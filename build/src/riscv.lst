GAS LISTING /tmp/ccf1To17.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   8              	_Z41__static_initialization_and_destruction_0ii:
   9              	.LFB56:
  10              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../lib/console.h"
   7:src/riscv.cpp **** #include "../h/print.hpp"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** //zasto se ne uvozi body iz tcb.hpp???(using vazi samo za fajl u kom je definisan?)
  11:src/riscv.cpp **** using Body = void (*)();
  12:src/riscv.cpp **** List<_thread> Riscv::sleepingThreads;
  13:src/riscv.cpp **** KeyboardBuffer Riscv::buff1, Riscv::buff2;
  14:src/riscv.cpp **** char Riscv::ttt;
  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::popSppSpie()
  17:src/riscv.cpp **** {
  18:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  19:src/riscv.cpp ****     __asm__ volatile("sret");
  20:src/riscv.cpp **** }
  21:src/riscv.cpp **** 
  22:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  23:src/riscv.cpp **** {
  24:src/riscv.cpp ****     uint64 scause = r_scause();
  25:src/riscv.cpp **** 
  26:src/riscv.cpp ****     int ret = 0;
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  29:src/riscv.cpp ****     {
  30:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  33:src/riscv.cpp ****         uint64  code;
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****         if(code == 0x1) {
  37:src/riscv.cpp ****             //MEM_ALLOC
  38:src/riscv.cpp ****             //poslat je poravnati broj blokova, ali se opet mora izraziti u bajtovima velicina memo
  39:src/riscv.cpp ****             uint64 x;
  40:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
  41:src/riscv.cpp ****             x *= MEM_BLOCK_SIZE;
  42:src/riscv.cpp ****             void* r = __mem_alloc(x);
  43:src/riscv.cpp ****             //povratna vrednost
  44:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
  45:src/riscv.cpp ****         }else if(code == 0x02) {
  46:src/riscv.cpp ****             //MEM_FREE
  47:src/riscv.cpp ****             uint64 ret;
  48:src/riscv.cpp ****             uint64 x;
GAS LISTING /tmp/ccf1To17.s 			page 2


  49:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
  50:src/riscv.cpp ****             ret = __mem_free((void*)x);
  51:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
  52:src/riscv.cpp ****         }else if(code == 0x11){
  53:src/riscv.cpp ****             //THREAD_CREATE
  54:src/riscv.cpp ****             thread_t *handle;
  55:src/riscv.cpp ****             Body body;
  56:src/riscv.cpp ****             void* args;
  57:src/riscv.cpp ****             void* stack;
  58:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
  59:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
  60:src/riscv.cpp **** //            __asm__ volatile("mv %0, a3" : "=r" (args));
  61:src/riscv.cpp **** //            __asm__ volatile("mv %0, a4" : "=r" (stack));
  62:src/riscv.cpp **** 
  63:src/riscv.cpp ****             //vrednosti registara a3 i a4 se pobrkaju skroz, pa cu  njih uzeti sa steka
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****             //radi sa fp umesto sp, nzm zasto, proveriti posle
  66:src/riscv.cpp ****             __asm__ volatile("ld t2, 104(fp)");
  67:src/riscv.cpp ****             __asm__ volatile("ld t3, 112(fp)");
  68:src/riscv.cpp **** 
  69:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (args));
  70:src/riscv.cpp ****             __asm__ volatile("mv %0, t3" : "=r" (stack));
  71:src/riscv.cpp ****             printInteger((uint64)stack);
  72:src/riscv.cpp ****             int ret = _thread::createThread(handle, body, args, stack);
  73:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
  74:src/riscv.cpp **** 
  75:src/riscv.cpp ****         }else if(code == 0x12){
  76:src/riscv.cpp ****             //THREAD_EXIT
  77:src/riscv.cpp ****             int ret = _thread::threadStop();
  78:src/riscv.cpp ****             if(ret != 0)
  79:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ret));
  80:src/riscv.cpp ****             else
  81:src/riscv.cpp ****                 __asm__ volatile("mv a0, zero");
  82:src/riscv.cpp ****         }else if(code == 0x13){
  83:src/riscv.cpp ****             //THREAD_DISPACH
  84:src/riscv.cpp **** 
  85:src/riscv.cpp ****         }else if(code == 0x21){
  86:src/riscv.cpp ****             //SEM_OPEN
  87:src/riscv.cpp ****             sem_t *handle;
  88:src/riscv.cpp ****             uint64 init;
  89:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
  90:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (init));
  91:src/riscv.cpp ****             int ret = _sem::createSem(handle, init);
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
  93:src/riscv.cpp **** 
  94:src/riscv.cpp ****         }else if(code == 0x22){
  95:src/riscv.cpp ****             //SEM_CLOSE
  96:src/riscv.cpp ****             sem_t handle;
  97:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
  98:src/riscv.cpp ****             delete handle; //TODO ??????????????????????????????????????
  99:src/riscv.cpp ****             int ret = 0;
 100:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 101:src/riscv.cpp **** 
 102:src/riscv.cpp ****         }else if(code == 0x23){
 103:src/riscv.cpp ****             //SEM_WAIT
 104:src/riscv.cpp ****             sem_t handle;
 105:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
GAS LISTING /tmp/ccf1To17.s 			page 3


 106:src/riscv.cpp ****             int ret = handle->wait(); //TODO ?????????;
 107:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 108:src/riscv.cpp **** 
 109:src/riscv.cpp ****         }else if(code == 0x24){
 110:src/riscv.cpp ****             //SEM_SIGNAL
 111:src/riscv.cpp ****             sem_t id;
 112:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (id));
 113:src/riscv.cpp ****             int ret = id->signal();
 114:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 115:src/riscv.cpp ****         }else if(code == 0x31){
 116:src/riscv.cpp ****             //TIME_SLEEP
 117:src/riscv.cpp ****             time_t time;
 118:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (time));
 119:src/riscv.cpp ****             int ret = _thread::sleep(time);
 120:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 121:src/riscv.cpp **** 
 122:src/riscv.cpp ****         }else if(code == 0x41){
 123:src/riscv.cpp ****             //GETC
 124:src/riscv.cpp ****             ret = buff2.take();
 125:src/riscv.cpp **** 
 126:src/riscv.cpp ****         }else if(code == 0x42){
 127:src/riscv.cpp ****             //PUTC
 128:src/riscv.cpp ****             char c;
 129:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (c));
 130:src/riscv.cpp **** //            *((char*)CONSOLE_TX_DATA) = c;
 131:src/riscv.cpp ****             buff1.append(c);
 132:src/riscv.cpp **** 
 133:src/riscv.cpp ****         }else{
 134:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 135:src/riscv.cpp ****             _thread::dispatch();
 136:src/riscv.cpp ****         }
 137:src/riscv.cpp **** 
 138:src/riscv.cpp ****         w_sstatus(sstatus);
 139:src/riscv.cpp ****         w_sepc(sepc);
 140:src/riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 141:src/riscv.cpp ****     }
 142:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 143:src/riscv.cpp ****     {
 144:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 145:src/riscv.cpp ****         Riscv::sleepingThreads.sleepControl();  //budi uspaavane niti ako je dosao red na njih
 146:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 147:src/riscv.cpp ****         _thread::timeSliceCounter++;
 148:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 149:src/riscv.cpp ****         {
 150:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 151:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 152:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 153:src/riscv.cpp ****             _thread::dispatch();
 154:src/riscv.cpp ****             w_sstatus(sstatus);
 155:src/riscv.cpp ****             w_sepc(sepc);
 156:src/riscv.cpp ****         }
 157:src/riscv.cpp ****     }
 158:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 159:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 160:src/riscv.cpp **** //        console_handler();
 161:src/riscv.cpp ****         static int IRQ_CONSOLE = 10;
 162:src/riscv.cpp ****         int irq = plic_claim();
GAS LISTING /tmp/ccf1To17.s 			page 4


 163:src/riscv.cpp ****         if (irq == IRQ_CONSOLE)
 164:src/riscv.cpp ****         {
 165:src/riscv.cpp ****             //pomeriti kasnije inicijalizaciju negde drugde(main npr.)
 166:src/riscv.cpp **** 
 167:src/riscv.cpp ****             //NE CUVATI CONSOLE_STATUS U LOKALNOJ PROMNLJIVOJ JER NE RADI IZ NEKOG RAZLOGA!!!!
 168:src/riscv.cpp ****             while (*((char*)CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT){
 169:src/riscv.cpp ****                 __asm__ volatile("mv a1, %0" : : "r" (*((char*)CONSOLE_STATUS)));
 170:src/riscv.cpp ****                 char c = (*(char*)CONSOLE_RX_DATA);
 171:src/riscv.cpp ****                 buff2.append(c);
 172:src/riscv.cpp **** //                c = c;
 173:src/riscv.cpp **** //                __asm__ volatile("mv a2, %0" : : "r" (c));
 174:src/riscv.cpp **** //                ttt = 'e';
 175:src/riscv.cpp **** //                buff1.append((*(char*)CONSOLE_RX_DATA));  ne radi direktno??????, mora prvo u pro
 176:src/riscv.cpp **** //                buff1.append(c);
 177:src/riscv.cpp ****             }
 178:src/riscv.cpp ****         }
 179:src/riscv.cpp ****         plic_complete(irq);
 180:src/riscv.cpp ****     }
 181:src/riscv.cpp ****         else
 182:src/riscv.cpp ****     {
 183:src/riscv.cpp ****         // unexpected trap cause
 184:src/riscv.cpp ****     }
 185:src/riscv.cpp **** }...
  11              		.loc 1 185 1
  12              		.cfi_startproc
  13              	.LVL0:
  14 0000 93071000 		li	a5,1
  15 0004 6304F500 		beq	a0,a5,.L7
  16              	.L4:
  17 0008 67800000 		ret
  18              	.L7:
  19              		.loc 1 185 1 is_stmt 0 discriminator 1
  20 000c B7070100 		li	a5,65536
  21 0010 9387F7FF 		addi	a5,a5,-1
  22 0014 E39AF5FE 		bne	a1,a5,.L4
  23              		.loc 1 185 1
  24 0018 130101FE 		addi	sp,sp,-32
  25              		.cfi_def_cfa_offset 32
  26 001c 233C1100 		sd	ra,24(sp)
  27 0020 23388100 		sd	s0,16(sp)
  28 0024 23349100 		sd	s1,8(sp)
  29              		.cfi_offset 1, -8
  30              		.cfi_offset 8, -16
  31              		.cfi_offset 9, -24
  32 0028 13040102 		addi	s0,sp,32
  33              		.cfi_def_cfa 8, 0
  34              	.LVL1:
  35              	.LBB68:
  36              	.LBB69:
  37              	.LBB70:
  38              		.file 2 "src/../h/../h/list.hpp"
   1:src/../h/../h/list.hpp **** //
   2:src/../h/../h/list.hpp **** // Created by marko on 20.4.22..
   3:src/../h/../h/list.hpp **** //
   4:src/../h/../h/list.hpp **** 
   5:src/../h/../h/list.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_LIST_HPP
   6:src/../h/../h/list.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_LIST_HPP
GAS LISTING /tmp/ccf1To17.s 			page 5


   7:src/../h/../h/list.hpp **** 
   8:src/../h/../h/list.hpp **** //#include "riscv.hpp"
   9:src/../h/../h/list.hpp **** 
  10:src/../h/../h/list.hpp **** //class Scheduler;
  11:src/../h/../h/list.hpp **** template<typename T>
  12:src/../h/../h/list.hpp **** class List
  13:src/../h/../h/list.hpp **** {
  14:src/../h/../h/list.hpp **** private:
  15:src/../h/../h/list.hpp ****     struct Elem
  16:src/../h/../h/list.hpp ****     {
  17:src/../h/../h/list.hpp ****         T *data;
  18:src/../h/../h/list.hpp ****         Elem *next;
  19:src/../h/../h/list.hpp ****         int sleepTime;
  20:src/../h/../h/list.hpp ****         Elem(T *data, Elem *next, int sleepTime = 0) : data(data), next(next), sleepTime(sleepTime)
  21:src/../h/../h/list.hpp ****         Elem(T *data) : data(data), next(nullptr), sleepTime(0) {}
  22:src/../h/../h/list.hpp ****     };
  23:src/../h/../h/list.hpp **** 
  24:src/../h/../h/list.hpp ****     Elem *head, *tail;
  25:src/../h/../h/list.hpp **** 
  26:src/../h/../h/list.hpp **** public:
  27:src/../h/../h/list.hpp ****     List() : head(0), tail(0) {}
  39              		.loc 2 27 29
  40 002c 97040000 		lla	s1,.LANCHOR0
  40      93840400 
  41 0034 23B00400 		sd	zero,0(s1)
  42 0038 23B40400 		sd	zero,8(s1)
  43              	.LVL2:
  44              	.LBE70:
  45              	.LBE69:
  46              	.LBE68:
  47              	.LBB71:
  48              	.LBB72:
  49              	.LBB73:
  50              		.file 3 "src/../h/_buffer.hpp"
   1:src/../h/_buffer.hpp **** //
   2:src/../h/_buffer.hpp **** // Created by os on 9/10/22.
   3:src/../h/_buffer.hpp **** //
   4:src/../h/_buffer.hpp **** 
   5:src/../h/_buffer.hpp **** #ifndef PROJECT_BASE__BUFFER_HPP
   6:src/../h/_buffer.hpp **** #define PROJECT_BASE__BUFFER_HPP
   7:src/../h/_buffer.hpp **** 
   8:src/../h/_buffer.hpp **** #include "_sem.hpp"
   9:src/../h/_buffer.hpp **** 
  10:src/../h/_buffer.hpp **** class KeyboardBuffer {
  11:src/../h/_buffer.hpp **** public:
  12:src/../h/_buffer.hpp ****     KeyboardBuffer() : head(0),tail(0),count(0) { _sem::createSem(&itemAvailable, 0);}
  51              		.loc 3 12 47
  52 003c 23BC0410 		sd	zero,280(s1)
  53 0040 23B00412 		sd	zero,288(s1)
  54 0044 23B40412 		sd	zero,296(s1)
  55              		.loc 3 12 51 is_stmt 1
  56              		.loc 3 12 66 is_stmt 0
  57 0048 93050000 		li	a1,0
  58              	.LVL3:
  59 004c 17050000 		lla	a0,.LANCHOR0+16
  59      13050500 
  60              	.LVL4:
GAS LISTING /tmp/ccf1To17.s 			page 6


  61 0054 97000000 		call	_ZN4_sem9createSemEPPS_m@plt
  61      E7800000 
  62              	.LVL5:
  63              	.LBE73:
  64              	.LBE72:
  65              	.LBE71:
  66              	.LBB74:
  67              	.LBB75:
  68              	.LBB76:
  69              		.loc 3 12 47
  70 005c 23BC0422 		sd	zero,568(s1)
  71 0060 23B00424 		sd	zero,576(s1)
  72 0064 23B40424 		sd	zero,584(s1)
  73              		.loc 3 12 51 is_stmt 1
  74              		.loc 3 12 66 is_stmt 0
  75 0068 93050000 		li	a1,0
  76 006c 17050000 		lla	a0,.LANCHOR0+304
  76      13050500 
  77 0074 97000000 		call	_ZN4_sem9createSemEPPS_m@plt
  77      E7800000 
  78              	.LVL6:
  79              	.LBE76:
  80              	.LBE75:
  81              	.LBE74:
  82              		.loc 1 185 1
  83 007c 83308101 		ld	ra,24(sp)
  84              		.cfi_restore 1
  85 0080 03340101 		ld	s0,16(sp)
  86              		.cfi_restore 8
  87              		.cfi_def_cfa 2, 32
  88 0084 83348100 		ld	s1,8(sp)
  89              		.cfi_restore 9
  90 0088 13010102 		addi	sp,sp,32
  91              		.cfi_def_cfa_offset 0
  92 008c 67800000 		jr	ra
  93              		.cfi_endproc
  94              	.LFE56:
  96              		.align	2
  97              		.globl	_ZN5Riscv10popSppSpieEv
  99              	_ZN5Riscv10popSppSpieEv:
 100              	.LFB49:
  17:src/riscv.cpp **** {
 101              		.loc 1 17 1 is_stmt 1
 102              		.cfi_startproc
 103 0090 130101FF 		addi	sp,sp,-16
 104              		.cfi_def_cfa_offset 16
 105 0094 23348100 		sd	s0,8(sp)
 106              		.cfi_offset 8, -8
 107 0098 13040101 		addi	s0,sp,16
 108              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
 109              		.loc 1 18 5
  18:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
 110              		.loc 1 18 38 is_stmt 0
 111              	#APP
 112              	# 18 "src/riscv.cpp" 1
  19:src/riscv.cpp ****     __asm__ volatile("sret");
GAS LISTING /tmp/ccf1To17.s 			page 7


 113              		csrw sepc, ra
 114              	# 0 "" 2
 115              		.loc 1 19 5 is_stmt 1
  19:src/riscv.cpp ****     __asm__ volatile("sret");
 116              		.loc 1 19 29 is_stmt 0
 117              	# 19 "src/riscv.cpp" 1
  20:src/riscv.cpp **** }
 118              		sret
 119              	# 0 "" 2
 120              		.loc 1 20 1
 121              	#NO_APP
 122 00a4 03348100 		ld	s0,8(sp)
 123              		.cfi_restore 8
 124              		.cfi_def_cfa 2, 16
 125 00a8 13010101 		addi	sp,sp,16
 126              		.cfi_def_cfa_offset 0
 127 00ac 67800000 		jr	ra
 128              		.cfi_endproc
 129              	.LFE49:
 131              		.align	2
 132              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 134              	_ZN5Riscv20handleSupervisorTrapEv:
 135              	.LFB50:
  23:src/riscv.cpp **** {
 136              		.loc 1 23 1 is_stmt 1
 137              		.cfi_startproc
 138 00b0 130101F8 		addi	sp,sp,-128
 139              		.cfi_def_cfa_offset 128
 140 00b4 233C1106 		sd	ra,120(sp)
 141 00b8 23388106 		sd	s0,112(sp)
 142 00bc 23349106 		sd	s1,104(sp)
 143 00c0 23302107 		sd	s2,96(sp)
 144 00c4 233C3105 		sd	s3,88(sp)
 145 00c8 23384105 		sd	s4,80(sp)
 146              		.cfi_offset 1, -8
 147              		.cfi_offset 8, -16
 148              		.cfi_offset 9, -24
 149              		.cfi_offset 18, -32
 150              		.cfi_offset 19, -40
 151              		.cfi_offset 20, -48
 152 00cc 13040108 		addi	s0,sp,128
 153              		.cfi_def_cfa 8, 0
  24:src/riscv.cpp ****     uint64 scause = r_scause();
 154              		.loc 1 24 5
 155              	.LBB138:
 156              	.LBB139:
 157              		.file 4 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../h/tcb.hpp"
  10:src/../h/riscv.hpp **** #include "list.hpp"
GAS LISTING /tmp/ccf1To17.s 			page 8


  11:src/../h/riscv.hpp **** #include "_buffer.hpp"
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** template<typename T>
  14:src/../h/riscv.hpp **** class List;
  15:src/../h/riscv.hpp **** class Riscv
  16:src/../h/riscv.hpp **** {
  17:src/../h/riscv.hpp **** public:
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // read register scause
  23:src/../h/riscv.hpp ****     static uint64 r_scause();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // write register scause
  26:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register sepc
  29:src/../h/riscv.hpp ****     static uint64 r_sepc();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register sepc
  32:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register stvec
  35:src/../h/riscv.hpp ****     static uint64 r_stvec();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register stvec
  38:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stval
  41:src/../h/riscv.hpp ****     static uint64 r_stval();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stval
  44:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     enum BitMaskSip
  47:src/../h/riscv.hpp ****     {
  48:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  49:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  50:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  51:src/../h/riscv.hpp ****     };
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask set register sip
  54:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask clear register sip
  57:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // read register sip
  60:src/../h/riscv.hpp ****     static uint64 r_sip();
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // write register sip
  63:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     enum BitMaskSstatus
  66:src/../h/riscv.hpp ****     {
  67:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
GAS LISTING /tmp/ccf1To17.s 			page 9


  68:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  69:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  70:src/../h/riscv.hpp ****     };
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask set register sstatus
  73:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // mask clear register sstatus
  76:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // read register sstatus
  79:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // write register sstatus
  82:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap
  85:src/../h/riscv.hpp ****     static void supervisorTrap();
  86:src/../h/riscv.hpp ****     static char ttt;
  87:src/../h/riscv.hpp ****     static KeyboardBuffer buff1, buff2;
  88:src/../h/riscv.hpp **** private:
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp ****     // supervisor trap handler
  91:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  92:src/../h/riscv.hpp ****     friend class _thread;
  93:src/../h/riscv.hpp ****     static List<_thread> sleepingThreads;
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** };
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  98:src/../h/riscv.hpp **** {
  99:src/../h/riscv.hpp ****     uint64 volatile scause;
 158              		.loc 4 99 5
 100:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 159              		.loc 4 100 5
 160              		.loc 4 100 72 is_stmt 0
 161              	#APP
 162              	# 100 "src/../h/riscv.hpp" 1
 101              	    return scause;
 163              		csrr a5, scause
 164              	# 0 "" 2
 165              	#NO_APP
 166 00d4 2334F4FA 		sd	a5,-88(s0)
 167              		.loc 4 101 5 is_stmt 1
 168              		.loc 4 101 12 is_stmt 0
 169 00d8 033784FA 		ld	a4,-88(s0)
 170              	.LVL7:
 171              	.LBE139:
 172              	.LBE138:
  26:src/riscv.cpp ****     int ret = 0;
 173              		.loc 1 26 5 is_stmt 1
  28:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 174              		.loc 1 28 5
 175              	.LBB140:
  28:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 176              		.loc 1 28 40 is_stmt 0
 177 00dc 930687FF 		addi	a3,a4,-8
GAS LISTING /tmp/ccf1To17.s 			page 10


  28:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 178              		.loc 1 28 5
 179 00e0 93071000 		li	a5,1
 180 00e4 63F4D704 		bleu	a3,a5,.L34
 181              	.LBE140:
 142:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 182              		.loc 1 142 10 is_stmt 1
 183              	.LBB370:
 184              	.LBB141:
 185 00e8 9307F0FF 		li	a5,-1
 186 00ec 9397F703 		slli	a5,a5,63
 187 00f0 93871700 		addi	a5,a5,1
 188 00f4 630EF726 		beq	a4,a5,.L35
 189              	.LBE141:
 190              	.LBE370:
 158:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 191              		.loc 1 158 10
 192              	.LBB371:
 193              	.LBB173:
 194              	.LBB142:
 195 00f8 9307F0FF 		li	a5,-1
 196 00fc 9397F703 		slli	a5,a5,63
 197 0100 93879700 		addi	a5,a5,9
 198 0104 631CF70E 		bne	a4,a5,.L10
 199              	.LBB143:
 161:src/riscv.cpp ****         static int IRQ_CONSOLE = 10;
 200              		.loc 1 161 9
 162:src/riscv.cpp ****         int irq = plic_claim();
 201              		.loc 1 162 9
 162:src/riscv.cpp ****         int irq = plic_claim();
 202              		.loc 1 162 29 is_stmt 0
 203 0108 97000000 		call	plic_claim@plt
 203      E7800000 
 204              	.LVL8:
 205 0110 93040500 		mv	s1,a0
 206              	.LVL9:
 163:src/riscv.cpp ****         if (irq == IRQ_CONSOLE)
 207              		.loc 1 163 9 is_stmt 1
 208              	.LBB144:
 209 0114 9307A000 		li	a5,10
 210 0118 6308F532 		beq	a0,a5,.L31
 211              	.LVL10:
 212              	.L30:
 213              	.LBE144:
 179:src/riscv.cpp ****         plic_complete(irq);
 214              		.loc 1 179 9
 179:src/riscv.cpp ****         plic_complete(irq);
 215              		.loc 1 179 22 is_stmt 0
 216 011c 13850400 		mv	a0,s1
 217 0120 97000000 		call	plic_complete@plt
 217      E7800000 
 218              	.LVL11:
 219              	.LBE143:
 220              	.LBE142:
 221              	.LBE173:
 222              	.LBE371:
 223              		.loc 1 185 1
GAS LISTING /tmp/ccf1To17.s 			page 11


 224 0128 6F00400D 		j	.L10
 225              	.LVL12:
 226              	.L34:
 227              	.LBB372:
 228              	.LBB174:
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 229              		.loc 1 31 9 is_stmt 1
 230              	.LBB175:
 231              	.LBB176:
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 107:src/../h/riscv.hpp **** }
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 110:src/../h/riscv.hpp **** {
 111:src/../h/riscv.hpp ****     uint64 volatile sepc;
 232              		.loc 4 111 5
 112:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 233              		.loc 4 112 5
 234              		.loc 4 112 64 is_stmt 0
 235              	#APP
 236              	# 112 "src/../h/riscv.hpp" 1
 113              	    return sepc;
 237              		csrr a5, sepc
 238              	# 0 "" 2
 239              	#NO_APP
 240 0130 233CF4FA 		sd	a5,-72(s0)
 241              		.loc 4 113 5 is_stmt 1
 242              		.loc 4 113 12 is_stmt 0
 243 0134 833784FB 		ld	a5,-72(s0)
 244              	.LBE176:
 245              	.LBE175:
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 246              		.loc 1 31 41
 247 0138 93874700 		addi	a5,a5,4
  31:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 248              		.loc 1 31 43
 249 013c 2334F4F8 		sd	a5,-120(s0)
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 250              		.loc 1 32 9 is_stmt 1
 251              	.LBB177:
 252              	.LBB178:
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 119:src/../h/riscv.hpp **** }
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 122:src/../h/riscv.hpp **** {
 123:src/../h/riscv.hpp ****     uint64 volatile stvec;
 124:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 125:src/../h/riscv.hpp ****     return stvec;
GAS LISTING /tmp/ccf1To17.s 			page 12


 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 131:src/../h/riscv.hpp **** }
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 134:src/../h/riscv.hpp **** {
 135:src/../h/riscv.hpp ****     uint64 volatile stval;
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 137:src/../h/riscv.hpp ****     return stval;
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 143:src/../h/riscv.hpp **** }
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     uint64 volatile sip;
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 159:src/../h/riscv.hpp ****     return sip;
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 175:src/../h/riscv.hpp **** }
 176:src/../h/riscv.hpp **** 
 177:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 178:src/../h/riscv.hpp **** {
 179:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 253              		.loc 4 179 5
 180:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 254              		.loc 4 180 5
GAS LISTING /tmp/ccf1To17.s 			page 13


 255              		.loc 4 180 76 is_stmt 0
 256              	#APP
 257              	# 180 "src/../h/riscv.hpp" 1
 181              	    return sstatus;
 258              		csrr a5, sstatus
 259              	# 0 "" 2
 260              	#NO_APP
 261 0144 2338F4FA 		sd	a5,-80(s0)
 262              		.loc 4 181 5 is_stmt 1
 263              		.loc 4 181 12 is_stmt 0
 264 0148 833704FB 		ld	a5,-80(s0)
 265              	.LBE178:
 266              	.LBE177:
  32:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 267              		.loc 1 32 45
 268 014c 2338F4F8 		sd	a5,-112(s0)
  33:src/riscv.cpp ****         uint64  code;
 269              		.loc 1 33 9 is_stmt 1
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
 270              		.loc 1 34 9
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
 271              		.loc 1 34 52 is_stmt 0
 272              	#APP
 273              	# 34 "src/riscv.cpp" 1
 274              		mv a5, a0
 275              	# 0 "" 2
 276              	.LVL13:
  36:src/riscv.cpp ****         if(code == 0x1) {
 277              		.loc 1 36 9 is_stmt 1
 278              	#NO_APP
 279              	.LBB179:
 280 0154 13071000 		li	a4,1
 281              	.LVL14:
 282 0158 638CE706 		beq	a5,a4,.L36
 283              	.LBE179:
 284              	.LBE174:
 285              	.LBE372:
  45:src/riscv.cpp ****         }else if(code == 0x02) {
 286              		.loc 1 45 15
 287              	.LBB373:
 288              	.LBB346:
 289              	.LBB320:
 290              	.LBB180:
 291 015c 13072000 		li	a4,2
 292 0160 638EE70A 		beq	a5,a4,.L37
 293              	.LBE180:
 294              	.LBE320:
 295              	.LBE346:
 296              	.LBE373:
  52:src/riscv.cpp ****         }else if(code == 0x11){
 297              		.loc 1 52 15
 298              	.LBB374:
 299              	.LBB347:
 300              	.LBB321:
 301              	.LBB299:
 302              	.LBB181:
 303 0164 13071001 		li	a4,17
GAS LISTING /tmp/ccf1To17.s 			page 14


 304 0168 6386E70C 		beq	a5,a4,.L38
 305              	.LBE181:
 306              	.LBE299:
 307              	.LBE321:
 308              	.LBE347:
 309              	.LBE374:
  75:src/riscv.cpp ****         }else if(code == 0x12){
 310              		.loc 1 75 15
 311              	.LBB375:
 312              	.LBB348:
 313              	.LBB322:
 314              	.LBB300:
 315              	.LBB280:
 316              	.LBB182:
 317 016c 13072001 		li	a4,18
 318 0170 6386E710 		beq	a5,a4,.L39
 319              	.LBE182:
 320              	.LBE280:
 321              	.LBE300:
 322              	.LBE322:
 323              	.LBE348:
 324              	.LBE375:
  82:src/riscv.cpp ****         }else if(code == 0x13){
 325              		.loc 1 82 15
 326              	.LBB376:
 327              	.LBB349:
 328              	.LBB323:
 329              	.LBB301:
 330              	.LBB281:
 331              	.LBB263:
 332              	.LBB183:
 333 0174 13073001 		li	a4,19
 334 0178 6388E71E 		beq	a5,a4,.L32
 335              	.LBE183:
 336              	.LBE263:
 337              	.LBE281:
 338              	.LBE301:
 339              	.LBE323:
 340              	.LBE349:
 341              	.LBE376:
  85:src/riscv.cpp ****         }else if(code == 0x21){
 342              		.loc 1 85 15
 343              	.LBB377:
 344              	.LBB350:
 345              	.LBB324:
 346              	.LBB302:
 347              	.LBB282:
 348              	.LBB264:
 349              	.LBB247:
 350              	.LBB184:
 351 017c 13071002 		li	a4,33
 352 0180 638EE710 		beq	a5,a4,.L40
 353              	.LBE184:
 354              	.LBE247:
 355              	.LBE264:
 356              	.LBE282:
 357              	.LBE302:
GAS LISTING /tmp/ccf1To17.s 			page 15


 358              	.LBE324:
 359              	.LBE350:
 360              	.LBE377:
  94:src/riscv.cpp ****         }else if(code == 0x22){
 361              		.loc 1 94 15
 362              	.LBB378:
 363              	.LBB351:
 364              	.LBB325:
 365              	.LBB303:
 366              	.LBB283:
 367              	.LBB265:
 368              	.LBB248:
 369              	.LBB234:
 370              	.LBB185:
 371 0184 13072002 		li	a4,34
 372 0188 6388E712 		beq	a5,a4,.L41
 373              	.LBE185:
 374              	.LBE234:
 375              	.LBE248:
 376              	.LBE265:
 377              	.LBE283:
 378              	.LBE303:
 379              	.LBE325:
 380              	.LBE351:
 381              	.LBE378:
 102:src/riscv.cpp ****         }else if(code == 0x23){
 382              		.loc 1 102 15
 383              	.LBB379:
 384              	.LBB352:
 385              	.LBB326:
 386              	.LBB304:
 387              	.LBB284:
 388              	.LBB266:
 389              	.LBB249:
 390              	.LBB235:
 391              	.LBB222:
 392              	.LBB186:
 393 018c 13073002 		li	a4,35
 394 0190 638CE714 		beq	a5,a4,.L42
 395              	.LBE186:
 396              	.LBE222:
 397              	.LBE235:
 398              	.LBE249:
 399              	.LBE266:
 400              	.LBE284:
 401              	.LBE304:
 402              	.LBE326:
 403              	.LBE352:
 404              	.LBE379:
 109:src/riscv.cpp ****         }else if(code == 0x24){
 405              		.loc 1 109 15
 406              	.LBB380:
 407              	.LBB353:
 408              	.LBB327:
 409              	.LBB305:
 410              	.LBB285:
 411              	.LBB267:
GAS LISTING /tmp/ccf1To17.s 			page 16


 412              	.LBB250:
 413              	.LBB236:
 414              	.LBB223:
 415              	.LBB212:
 416              	.LBB187:
 417 0194 13074002 		li	a4,36
 418 0198 6384E716 		beq	a5,a4,.L43
 419              	.LBE187:
 420              	.LBE212:
 421              	.LBE223:
 422              	.LBE236:
 423              	.LBE250:
 424              	.LBE267:
 425              	.LBE285:
 426              	.LBE305:
 427              	.LBE327:
 428              	.LBE353:
 429              	.LBE380:
 115:src/riscv.cpp ****         }else if(code == 0x31){
 430              		.loc 1 115 15
 431              	.LBB381:
 432              	.LBB354:
 433              	.LBB328:
 434              	.LBB306:
 435              	.LBB286:
 436              	.LBB268:
 437              	.LBB251:
 438              	.LBB237:
 439              	.LBB224:
 440              	.LBB213:
 441              	.LBB204:
 442              	.LBB188:
 443 019c 13071003 		li	a4,49
 444 01a0 638CE716 		beq	a5,a4,.L44
 445              	.LBE188:
 446              	.LBE204:
 447              	.LBE213:
 448              	.LBE224:
 449              	.LBE237:
 450              	.LBE251:
 451              	.LBE268:
 452              	.LBE286:
 453              	.LBE306:
 454              	.LBE328:
 455              	.LBE354:
 456              	.LBE381:
 122:src/riscv.cpp ****         }else if(code == 0x41){
 457              		.loc 1 122 15
 458              	.LBB382:
 459              	.LBB355:
 460              	.LBB329:
 461              	.LBB307:
 462              	.LBB287:
 463              	.LBB269:
 464              	.LBB252:
 465              	.LBB238:
 466              	.LBB225:
GAS LISTING /tmp/ccf1To17.s 			page 17


 467              	.LBB214:
 468              	.LBB205:
 469              	.LBB198:
 470              	.LBB189:
 471 01a4 13071004 		li	a4,65
 472 01a8 6384E718 		beq	a5,a4,.L45
 473              	.LBE189:
 474              	.LBE198:
 475              	.LBE205:
 476              	.LBE214:
 477              	.LBE225:
 478              	.LBE238:
 479              	.LBE252:
 480              	.LBE269:
 481              	.LBE287:
 482              	.LBE307:
 483              	.LBE329:
 484              	.LBE355:
 485              	.LBE382:
 126:src/riscv.cpp ****         }else if(code == 0x42){
 486              		.loc 1 126 15
 487              	.LBB383:
 488              	.LBB356:
 489              	.LBB330:
 490              	.LBB308:
 491              	.LBB288:
 492              	.LBB270:
 493              	.LBB253:
 494              	.LBB239:
 495              	.LBB226:
 496              	.LBB215:
 497              	.LBB206:
 498              	.LBB199:
 499              	.LBB194:
 500              	.LBB190:
 501 01ac 13072004 		li	a4,66
 502 01b0 638CE718 		beq	a5,a4,.L46
 134:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 503              		.loc 1 134 13
 134:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 504              		.loc 1 134 39 is_stmt 0
 505 01b4 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 505      83B70700 
 506              	.LVL15:
 507 01bc 23B00700 		sd	zero,0(a5)
 135:src/riscv.cpp ****             _thread::dispatch();
 508              		.loc 1 135 13 is_stmt 1
 135:src/riscv.cpp ****             _thread::dispatch();
 509              		.loc 1 135 30 is_stmt 0
 510 01c0 97000000 		call	_ZN7_thread8dispatchEv@plt
 510      E7800000 
 511              	.LVL16:
 512              	.LBE190:
 513              	.LBE194:
 514              	.LBE199:
 515              	.LBE206:
 516              	.LBE215:
GAS LISTING /tmp/ccf1To17.s 			page 18


 517              	.LBE226:
 518              	.LBE239:
 519              	.LBE253:
 520              	.LBE270:
 521              	.LBE288:
 522              	.LBE308:
 523              	.LBE330:
 524              	.LBE356:
 525              	.LBE383:
  26:src/riscv.cpp ****     int ret = 0;
 526              		.loc 1 26 9
 527 01c8 13050000 		li	a0,0
 528 01cc 6F00C001 		j	.L13
 529              	.LVL17:
 530              	.L36:
 531              	.LBB384:
 532              	.LBB357:
 533              	.LBB331:
 534              	.LBB309:
  39:src/riscv.cpp ****             uint64 x;
 535              		.loc 1 39 13 is_stmt 1
  40:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 536              		.loc 1 40 13
  40:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 537              		.loc 1 40 53 is_stmt 0
 538              	#APP
 539              	# 40 "src/riscv.cpp" 1
 540              		mv a0, a1
 541              	# 0 "" 2
 542              	.LVL18:
  41:src/riscv.cpp ****             x *= MEM_BLOCK_SIZE;
 543              		.loc 1 41 13 is_stmt 1
  42:src/riscv.cpp ****             void* r = __mem_alloc(x);
 544              		.loc 1 42 13
  42:src/riscv.cpp ****             void* r = __mem_alloc(x);
 545              		.loc 1 42 34 is_stmt 0
 546              	#NO_APP
 547 01d4 13156500 		slli	a0,a0,6
 548              	.LVL19:
 549 01d8 97000000 		call	__mem_alloc@plt
 549      E7800000 
 550              	.LVL20:
  44:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
 551              		.loc 1 44 13 is_stmt 1
  44:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
 552              		.loc 1 44 54 is_stmt 0
 553              	#APP
 554              	# 44 "src/riscv.cpp" 1
 555              		mv a0, a0
 556              	# 0 "" 2
 557              	#NO_APP
 558              	.LBE309:
 559              	.LBE331:
 560              	.LBE357:
 561              	.LBE384:
  26:src/riscv.cpp ****     int ret = 0;
 562              		.loc 1 26 9
GAS LISTING /tmp/ccf1To17.s 			page 19


 563 01e4 13050000 		li	a0,0
 564              	.LVL21:
 565              	.L13:
 566              	.LBB385:
 567              	.LBB358:
 138:src/riscv.cpp ****         w_sstatus(sstatus);
 568              		.loc 1 138 9 is_stmt 1
 138:src/riscv.cpp ****         w_sstatus(sstatus);
 569              		.loc 1 138 18 is_stmt 0
 570 01e8 833704F9 		ld	a5,-112(s0)
 571              	.LVL22:
 572              	.LBB332:
 573              	.LBB333:
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 574              		.loc 4 186 5 is_stmt 1
 575              		.loc 4 186 77 is_stmt 0
 576              	#APP
 577              	# 186 "src/../h/riscv.hpp" 1
 187              	}
 578              		csrw sstatus, a5
 579              	# 0 "" 2
 580              	.LVL23:
 581              	#NO_APP
 582              	.LBE333:
 583              	.LBE332:
 139:src/riscv.cpp ****         w_sepc(sepc);
 584              		.loc 1 139 9 is_stmt 1
 139:src/riscv.cpp ****         w_sepc(sepc);
 585              		.loc 1 139 15 is_stmt 0
 586 01f0 833784F8 		ld	a5,-120(s0)
 587              	.LVL24:
 588              	.LBB334:
 589              	.LBB335:
 118:src/../h/riscv.hpp **** }
 590              		.loc 4 118 5 is_stmt 1
 118:src/../h/riscv.hpp **** }
 591              		.loc 4 118 65 is_stmt 0
 592              	#APP
 593              	# 118 "src/../h/riscv.hpp" 1
 594              		csrw sepc, a5
 595              	# 0 "" 2
 596              	.LVL25:
 597              	#NO_APP
 598              	.LBE335:
 599              	.LBE334:
 140:src/riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 600              		.loc 1 140 9 is_stmt 1
 140:src/riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 601              		.loc 1 140 52 is_stmt 0
 602              	#APP
 603              	# 140 "src/riscv.cpp" 1
 604              		mv a0, a0
 605              	# 0 "" 2
GAS LISTING /tmp/ccf1To17.s 			page 20


 606              	.LVL26:
 607              	#NO_APP
 608              	.L10:
 609              	.LBE358:
 610              	.LBE385:
 611              		.loc 1 185 1
 612 01fc 83308107 		ld	ra,120(sp)
 613              		.cfi_remember_state
 614              		.cfi_restore 1
 615 0200 03340107 		ld	s0,112(sp)
 616              		.cfi_restore 8
 617              		.cfi_def_cfa 2, 128
 618 0204 83348106 		ld	s1,104(sp)
 619              		.cfi_restore 9
 620 0208 03390106 		ld	s2,96(sp)
 621              		.cfi_restore 18
 622 020c 83398105 		ld	s3,88(sp)
 623              		.cfi_restore 19
 624 0210 033A0105 		ld	s4,80(sp)
 625              		.cfi_restore 20
 626 0214 13010108 		addi	sp,sp,128
 627              		.cfi_def_cfa_offset 0
 628 0218 67800000 		jr	ra
 629              	.LVL27:
 630              	.L37:
 631              		.cfi_restore_state
 632              	.LBB386:
 633              	.LBB359:
 634              	.LBB336:
 635              	.LBB310:
 636              	.LBB289:
  47:src/riscv.cpp ****             uint64 ret;
 637              		.loc 1 47 13 is_stmt 1
  48:src/riscv.cpp ****             uint64 x;
 638              		.loc 1 48 13
  49:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 639              		.loc 1 49 13
  49:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 640              		.loc 1 49 53 is_stmt 0
 641              	#APP
 642              	# 49 "src/riscv.cpp" 1
 643              		mv a0, a1
 644              	# 0 "" 2
 645              	.LVL28:
  50:src/riscv.cpp ****             ret = __mem_free((void*)x);
 646              		.loc 1 50 13 is_stmt 1
  50:src/riscv.cpp ****             ret = __mem_free((void*)x);
 647              		.loc 1 50 29 is_stmt 0
 648              	#NO_APP
 649 0220 97000000 		call	__mem_free@plt
 649      E7800000 
 650              	.LVL29:
  51:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 651              		.loc 1 51 13 is_stmt 1
  51:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 652              		.loc 1 51 56 is_stmt 0
 653              	#APP
GAS LISTING /tmp/ccf1To17.s 			page 21


 654              	# 51 "src/riscv.cpp" 1
 655              		mv a0, a0
 656              	# 0 "" 2
 657              	#NO_APP
 658              	.LBE289:
 659              	.LBE310:
 660              	.LBE336:
 661              	.LBE359:
 662              	.LBE386:
  26:src/riscv.cpp ****     int ret = 0;
 663              		.loc 1 26 9
 664 022c 13050000 		li	a0,0
 665              	.LVL30:
 666              	.LBB387:
 667              	.LBB360:
 668              	.LBB337:
 669              	.LBB311:
 670 0230 6FF09FFB 		j	.L13
 671              	.LVL31:
 672              	.L38:
 673              	.LBB290:
 674              	.LBB271:
  54:src/riscv.cpp ****             thread_t *handle;
 675              		.loc 1 54 13 is_stmt 1
  55:src/riscv.cpp ****             Body body;
 676              		.loc 1 55 13
  56:src/riscv.cpp ****             void* args;
 677              		.loc 1 56 13
  57:src/riscv.cpp ****             void* stack;
 678              		.loc 1 57 13
  58:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 679              		.loc 1 58 13
  58:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 680              		.loc 1 58 58 is_stmt 0
 681              	#APP
 682              	# 58 "src/riscv.cpp" 1
 683              		mv s2, a1
 684              	# 0 "" 2
 685              	.LVL32:
  59:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
 686              		.loc 1 59 13 is_stmt 1
  59:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
 687              		.loc 1 59 56 is_stmt 0
 688              	# 59 "src/riscv.cpp" 1
 689              		mv s3, a2
 690              	# 0 "" 2
 691              	.LVL33:
  66:src/riscv.cpp ****             __asm__ volatile("ld t2, 104(fp)");
 692              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****             __asm__ volatile("ld t2, 104(fp)");
 693              		.loc 1 66 47 is_stmt 0
 694              	# 66 "src/riscv.cpp" 1
  67:src/riscv.cpp ****             __asm__ volatile("ld t3, 112(fp)");
 695              		ld t2, 104(fp)
 696              	# 0 "" 2
 697              		.loc 1 67 13 is_stmt 1
  67:src/riscv.cpp ****             __asm__ volatile("ld t3, 112(fp)");
GAS LISTING /tmp/ccf1To17.s 			page 22


 698              		.loc 1 67 47 is_stmt 0
 699              	# 67 "src/riscv.cpp" 1
  69:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (args));
 700              		ld t3, 112(fp)
 701              	# 0 "" 2
 702              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (args));
 703              		.loc 1 69 56 is_stmt 0
 704              	# 69 "src/riscv.cpp" 1
 705              		mv s4, t2
 706              	# 0 "" 2
 707              	.LVL34:
  70:src/riscv.cpp ****             __asm__ volatile("mv %0, t3" : "=r" (stack));
 708              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             __asm__ volatile("mv %0, t3" : "=r" (stack));
 709              		.loc 1 70 57 is_stmt 0
 710              	# 70 "src/riscv.cpp" 1
 711              		mv s1, t3
 712              	# 0 "" 2
 713              	.LVL35:
  71:src/riscv.cpp ****             printInteger((uint64)stack);
 714              		.loc 1 71 13 is_stmt 1
  71:src/riscv.cpp ****             printInteger((uint64)stack);
 715              		.loc 1 71 25 is_stmt 0
 716              	#NO_APP
 717 024c 13850400 		mv	a0,s1
 718 0250 97000000 		call	_Z12printIntegerm@plt
 718      E7800000 
 719              	.LVL36:
  72:src/riscv.cpp ****             int ret = _thread::createThread(handle, body, args, stack);
 720              		.loc 1 72 13 is_stmt 1
  72:src/riscv.cpp ****             int ret = _thread::createThread(handle, body, args, stack);
 721              		.loc 1 72 44 is_stmt 0
 722 0258 93860400 		mv	a3,s1
 723 025c 13060A00 		mv	a2,s4
 724 0260 93850900 		mv	a1,s3
 725 0264 13050900 		mv	a0,s2
 726 0268 97000000 		call	_ZN7_thread12createThreadEPPS_PFvvEPvS4_@plt
 726      E7800000 
 727              	.LVL37:
  73:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 728              		.loc 1 73 13 is_stmt 1
  73:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 729              		.loc 1 73 56 is_stmt 0
 730              	#APP
 731              	# 73 "src/riscv.cpp" 1
 732              		mv a0, a0
 733              	# 0 "" 2
 734              	#NO_APP
 735              	.LBE271:
 736              	.LBE290:
 737              	.LBE311:
 738              	.LBE337:
 739              	.LBE360:
 740              	.LBE387:
  26:src/riscv.cpp ****     int ret = 0;
 741              		.loc 1 26 9
GAS LISTING /tmp/ccf1To17.s 			page 23


 742 0274 13050000 		li	a0,0
 743              	.LVL38:
 744              	.LBB388:
 745              	.LBB361:
 746              	.LBB338:
 747              	.LBB312:
 748              	.LBB291:
 749 0278 6FF01FF7 		j	.L13
 750              	.LVL39:
 751              	.L39:
 752              	.LBB272:
 753              	.LBB254:
  77:src/riscv.cpp ****             int ret = _thread::threadStop();
 754              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****             int ret = _thread::threadStop();
 755              		.loc 1 77 42 is_stmt 0
 756 027c 97000000 		call	_ZN7_thread10threadStopEv@plt
 756      E7800000 
 757              	.LVL40:
  78:src/riscv.cpp ****             if(ret != 0)
 758              		.loc 1 78 13 is_stmt 1
 759 0284 63080500 		beqz	a0,.L17
  79:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ret));
 760              		.loc 1 79 17
  79:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ret));
 761              		.loc 1 79 60 is_stmt 0
 762              	#APP
 763              	# 79 "src/riscv.cpp" 1
 764              		mv a0, a0
 765              	# 0 "" 2
 766              	#NO_APP
 767              	.LBE254:
 768              	.LBE272:
 769              	.LBE291:
 770              	.LBE312:
 771              	.LBE338:
 772              	.LBE361:
 773              	.LBE388:
  26:src/riscv.cpp ****     int ret = 0;
 774              		.loc 1 26 9
 775 028c 13050000 		li	a0,0
 776              	.LVL41:
 777              	.LBB389:
 778              	.LBB362:
 779              	.LBB339:
 780              	.LBB313:
 781              	.LBB292:
 782              	.LBB273:
 783              	.LBB255:
 784 0290 6FF09FF5 		j	.L13
 785              	.LVL42:
 786              	.L17:
  81:src/riscv.cpp ****                 __asm__ volatile("mv a0, zero");
 787              		.loc 1 81 17 is_stmt 1
  81:src/riscv.cpp ****                 __asm__ volatile("mv a0, zero");
 788              		.loc 1 81 48 is_stmt 0
 789              	#APP
GAS LISTING /tmp/ccf1To17.s 			page 24


 790              	# 81 "src/riscv.cpp" 1
 791              		mv a0, zero
 792              	# 0 "" 2
 793              	#NO_APP
 794 0298 6FF01FF5 		j	.L13
 795              	.LVL43:
 796              	.L40:
 797              	.LBE255:
 798              	.LBB256:
 799              	.LBB240:
 800              	.LBB227:
  87:src/riscv.cpp ****             sem_t *handle;
 801              		.loc 1 87 13 is_stmt 1
  88:src/riscv.cpp ****             uint64 init;
 802              		.loc 1 88 13
  89:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 803              		.loc 1 89 13
  89:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 804              		.loc 1 89 58 is_stmt 0
 805              	#APP
 806              	# 89 "src/riscv.cpp" 1
 807              		mv a0, a1
 808              	# 0 "" 2
 809              	.LVL44:
  90:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (init));
 810              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (init));
 811              		.loc 1 90 56 is_stmt 0
 812              	# 90 "src/riscv.cpp" 1
 813              		mv a1, a2
 814              	# 0 "" 2
 815              	.LVL45:
  91:src/riscv.cpp ****             int ret = _sem::createSem(handle, init);
 816              		.loc 1 91 13 is_stmt 1
  91:src/riscv.cpp ****             int ret = _sem::createSem(handle, init);
 817              		.loc 1 91 38 is_stmt 0
 818              	#NO_APP
 819 02a4 97000000 		call	_ZN4_sem9createSemEPPS_m@plt
 819      E7800000 
 820              	.LVL46:
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 821              		.loc 1 92 13 is_stmt 1
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 822              		.loc 1 92 56 is_stmt 0
 823              	#APP
 824              	# 92 "src/riscv.cpp" 1
 825              		mv a0, a0
 826              	# 0 "" 2
 827              	#NO_APP
 828              	.LBE227:
 829              	.LBE240:
 830              	.LBE256:
 831              	.LBE273:
 832              	.LBE292:
 833              	.LBE313:
 834              	.LBE339:
 835              	.LBE362:
GAS LISTING /tmp/ccf1To17.s 			page 25


 836              	.LBE389:
  26:src/riscv.cpp ****     int ret = 0;
 837              		.loc 1 26 9
 838 02b0 13050000 		li	a0,0
 839              	.LVL47:
 840              	.LBB390:
 841              	.LBB363:
 842              	.LBB340:
 843              	.LBB314:
 844              	.LBB293:
 845              	.LBB274:
 846              	.LBB257:
 847              	.LBB241:
 848 02b4 6FF05FF3 		j	.L13
 849              	.LVL48:
 850              	.L41:
 851              	.LBB228:
 852              	.LBB216:
  96:src/riscv.cpp ****             sem_t handle;
 853              		.loc 1 96 13 is_stmt 1
  97:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 854              		.loc 1 97 13
  97:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 855              		.loc 1 97 58 is_stmt 0
 856              	#APP
 857              	# 97 "src/riscv.cpp" 1
 858              		mv s1, a1
 859              	# 0 "" 2
 860              	.LVL49:
  98:src/riscv.cpp ****             delete handle; //TODO ??????????????????????????????????????
 861              		.loc 1 98 13 is_stmt 1
  98:src/riscv.cpp ****             delete handle; //TODO ??????????????????????????????????????
 862              		.loc 1 98 26 is_stmt 0
 863              	#NO_APP
 864 02bc 638E0400 		beqz	s1,.L20
  98:src/riscv.cpp ****             delete handle; //TODO ??????????????????????????????????????
 865              		.loc 1 98 20 discriminator 1
 866 02c0 13850400 		mv	a0,s1
 867 02c4 97000000 		call	_ZN4_semD1Ev@plt
 867      E7800000 
 868              	.LVL50:
 869 02cc 13850400 		mv	a0,s1
 870 02d0 97000000 		call	_ZdlPv@plt
 870      E7800000 
 871              	.LVL51:
 872              	.L20:
  99:src/riscv.cpp ****             int ret = 0;
 873              		.loc 1 99 13 is_stmt 1
 100:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 874              		.loc 1 100 13
 100:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 875              		.loc 1 100 56 is_stmt 0
 876 02d8 93070000 		li	a5,0
 877              	#APP
 878              	# 100 "src/riscv.cpp" 1
 879              		mv a0, a5
 880              	# 0 "" 2
GAS LISTING /tmp/ccf1To17.s 			page 26


 881              	#NO_APP
 882              	.LBE216:
 883              	.LBE228:
 884              	.LBE241:
 885              	.LBE257:
 886              	.LBE274:
 887              	.LBE293:
 888              	.LBE314:
 889              	.LBE340:
 890              	.LBE363:
 891              	.LBE390:
  26:src/riscv.cpp ****     int ret = 0;
 892              		.loc 1 26 9
 893 02e0 13050000 		li	a0,0
 894              	.LBB391:
 895              	.LBB364:
 896              	.LBB341:
 897              	.LBB315:
 898              	.LBB294:
 899              	.LBB275:
 900              	.LBB258:
 901              	.LBB242:
 902              	.LBB229:
 903 02e4 6FF05FF0 		j	.L13
 904              	.LVL52:
 905              	.L42:
 906              	.LBB217:
 907              	.LBB207:
 104:src/riscv.cpp ****             sem_t handle;
 908              		.loc 1 104 13 is_stmt 1
 105:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 909              		.loc 1 105 13
 105:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 910              		.loc 1 105 58 is_stmt 0
 911              	#APP
 912              	# 105 "src/riscv.cpp" 1
 913              		mv a0, a1
 914              	# 0 "" 2
 915              	.LVL53:
 106:src/riscv.cpp ****             int ret = handle->wait(); //TODO ?????????;
 916              		.loc 1 106 13 is_stmt 1
 106:src/riscv.cpp ****             int ret = handle->wait(); //TODO ?????????;
 917              		.loc 1 106 35 is_stmt 0
 918              	#NO_APP
 919 02ec 97000000 		call	_ZN4_sem4waitEv@plt
 919      E7800000 
 920              	.LVL54:
 107:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 921              		.loc 1 107 13 is_stmt 1
 107:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 922              		.loc 1 107 56 is_stmt 0
 923              	#APP
 924              	# 107 "src/riscv.cpp" 1
 925              		mv a0, a0
 926              	# 0 "" 2
 927              	#NO_APP
 928              	.LBE207:
GAS LISTING /tmp/ccf1To17.s 			page 27


 929              	.LBE217:
 930              	.LBE229:
 931              	.LBE242:
 932              	.LBE258:
 933              	.LBE275:
 934              	.LBE294:
 935              	.LBE315:
 936              	.LBE341:
 937              	.LBE364:
 938              	.LBE391:
  26:src/riscv.cpp ****     int ret = 0;
 939              		.loc 1 26 9
 940 02f8 13050000 		li	a0,0
 941              	.LVL55:
 942              	.LBB392:
 943              	.LBB365:
 944              	.LBB342:
 945              	.LBB316:
 946              	.LBB295:
 947              	.LBB276:
 948              	.LBB259:
 949              	.LBB243:
 950              	.LBB230:
 951              	.LBB218:
 952 02fc 6FF0DFEE 		j	.L13
 953              	.LVL56:
 954              	.L43:
 955              	.LBB208:
 956              	.LBB200:
 111:src/riscv.cpp ****             sem_t id;
 957              		.loc 1 111 13 is_stmt 1
 112:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (id));
 958              		.loc 1 112 13
 112:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (id));
 959              		.loc 1 112 54 is_stmt 0
 960              	#APP
 961              	# 112 "src/riscv.cpp" 1
 962              		mv a0, a1
 963              	# 0 "" 2
 964              	.LVL57:
 113:src/riscv.cpp ****             int ret = id->signal();
 965              		.loc 1 113 13 is_stmt 1
 113:src/riscv.cpp ****             int ret = id->signal();
 966              		.loc 1 113 33 is_stmt 0
 967              	#NO_APP
 968 0304 97000000 		call	_ZN4_sem6signalEv@plt
 968      E7800000 
 969              	.LVL58:
 114:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 970              		.loc 1 114 13 is_stmt 1
 114:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 971              		.loc 1 114 56 is_stmt 0
 972              	#APP
 973              	# 114 "src/riscv.cpp" 1
 974              		mv a0, a0
 975              	# 0 "" 2
 976              	#NO_APP
GAS LISTING /tmp/ccf1To17.s 			page 28


 977              	.LBE200:
 978              	.LBE208:
 979              	.LBE218:
 980              	.LBE230:
 981              	.LBE243:
 982              	.LBE259:
 983              	.LBE276:
 984              	.LBE295:
 985              	.LBE316:
 986              	.LBE342:
 987              	.LBE365:
 988              	.LBE392:
  26:src/riscv.cpp ****     int ret = 0;
 989              		.loc 1 26 9
 990 0310 13050000 		li	a0,0
 991              	.LVL59:
 992              	.LBB393:
 993              	.LBB366:
 994              	.LBB343:
 995              	.LBB317:
 996              	.LBB296:
 997              	.LBB277:
 998              	.LBB260:
 999              	.LBB244:
 1000              	.LBB231:
 1001              	.LBB219:
 1002              	.LBB209:
 1003 0314 6FF05FED 		j	.L13
 1004              	.LVL60:
 1005              	.L44:
 1006              	.LBB201:
 1007              	.LBB195:
 117:src/riscv.cpp ****             time_t time;
 1008              		.loc 1 117 13 is_stmt 1
 118:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (time));
 1009              		.loc 1 118 13
 118:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (time));
 1010              		.loc 1 118 56 is_stmt 0
 1011              	#APP
 1012              	# 118 "src/riscv.cpp" 1
 1013              		mv a0, a1
 1014              	# 0 "" 2
 1015              	.LVL61:
 119:src/riscv.cpp ****             int ret = _thread::sleep(time);
 1016              		.loc 1 119 13 is_stmt 1
 119:src/riscv.cpp ****             int ret = _thread::sleep(time);
 1017              		.loc 1 119 37 is_stmt 0
 1018              	#NO_APP
 1019 031c 97000000 		call	_ZN7_thread5sleepEm@plt
 1019      E7800000 
 1020              	.LVL62:
 120:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 1021              		.loc 1 120 13 is_stmt 1
 120:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 1022              		.loc 1 120 56 is_stmt 0
 1023              	#APP
 1024              	# 120 "src/riscv.cpp" 1
GAS LISTING /tmp/ccf1To17.s 			page 29


 1025              		mv a0, a0
 1026              	# 0 "" 2
 1027              	#NO_APP
 1028              	.LBE195:
 1029              	.LBE201:
 1030              	.LBE209:
 1031              	.LBE219:
 1032              	.LBE231:
 1033              	.LBE244:
 1034              	.LBE260:
 1035              	.LBE277:
 1036              	.LBE296:
 1037              	.LBE317:
 1038              	.LBE343:
 1039              	.LBE366:
 1040              	.LBE393:
  26:src/riscv.cpp ****     int ret = 0;
 1041              		.loc 1 26 9
 1042 0328 13050000 		li	a0,0
 1043              	.LVL63:
 1044              	.LBB394:
 1045              	.LBB367:
 1046              	.LBB344:
 1047              	.LBB318:
 1048              	.LBB297:
 1049              	.LBB278:
 1050              	.LBB261:
 1051              	.LBB245:
 1052              	.LBB232:
 1053              	.LBB220:
 1054              	.LBB210:
 1055              	.LBB202:
 1056 032c 6FF0DFEB 		j	.L13
 1057              	.LVL64:
 1058              	.L45:
 1059              	.LBB196:
 124:src/riscv.cpp ****             ret = buff2.take();
 1060              		.loc 1 124 13 is_stmt 1
 124:src/riscv.cpp ****             ret = buff2.take();
 1061              		.loc 1 124 29 is_stmt 0
 1062 0330 17050000 		lla	a0,.LANCHOR0+304
 1062      13050500 
 1063 0338 97000000 		call	_ZN14KeyboardBuffer4takeEv@plt
 1063      E7800000 
 1064              	.LVL65:
 124:src/riscv.cpp ****             ret = buff2.take();
 1065              		.loc 1 124 17
 1066 0340 1B050500 		sext.w	a0,a0
 1067              	.LVL66:
 1068 0344 6FF05FEA 		j	.L13
 1069              	.LVL67:
 1070              	.L46:
 1071              	.LBB192:
 1072              	.LBB191:
 128:src/riscv.cpp ****             char c;
 1073              		.loc 1 128 13 is_stmt 1
 129:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (c));
GAS LISTING /tmp/ccf1To17.s 			page 30


 1074              		.loc 1 129 13
 129:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (c));
 1075              		.loc 1 129 53 is_stmt 0
 1076              	#APP
 1077              	# 129 "src/riscv.cpp" 1
 1078              		mv a1, a1
 1079              	# 0 "" 2
 1080              	.LVL68:
 131:src/riscv.cpp ****             buff1.append(c);
 1081              		.loc 1 131 13 is_stmt 1
 131:src/riscv.cpp ****             buff1.append(c);
 1082              		.loc 1 131 25 is_stmt 0
 1083              	#NO_APP
 1084 034c 93F5F50F 		andi	a1,a1,0xff
 1085 0350 17050000 		lla	a0,.LANCHOR0+16
 1085      13050500 
 1086 0358 97000000 		call	_ZN14KeyboardBuffer6appendEc@plt
 1086      E7800000 
 1087              	.LVL69:
 1088              	.LBE191:
 1089              	.LBE192:
 1090              	.LBE196:
 1091              	.LBE202:
 1092              	.LBE210:
 1093              	.LBE220:
 1094              	.LBE232:
 1095              	.LBE245:
 1096              	.LBE261:
 1097              	.LBE278:
 1098              	.LBE297:
 1099              	.LBE318:
 1100              	.LBE344:
 1101              	.LBE367:
 1102              	.LBE394:
  26:src/riscv.cpp ****     int ret = 0;
 1103              		.loc 1 26 9
 1104 0360 13050000 		li	a0,0
 1105              	.LBB395:
 1106              	.LBB368:
 1107              	.LBB345:
 1108              	.LBB319:
 1109              	.LBB298:
 1110              	.LBB279:
 1111              	.LBB262:
 1112              	.LBB246:
 1113              	.LBB233:
 1114              	.LBB221:
 1115              	.LBB211:
 1116              	.LBB203:
 1117              	.LBB197:
 1118              	.LBB193:
 1119 0364 6FF05FE8 		j	.L13
 1120              	.LVL70:
 1121              	.L32:
 1122              	.LBE193:
 1123              	.LBE197:
 1124              	.LBE203:
GAS LISTING /tmp/ccf1To17.s 			page 31


 1125              	.LBE211:
 1126              	.LBE221:
 1127              	.LBE233:
 1128              	.LBE246:
 1129              	.LBE262:
 1130              	.LBE279:
 1131              	.LBE298:
 1132              	.LBE319:
 1133              	.LBE345:
 1134              	.LBE368:
 1135              	.LBE395:
 1136 0368 13050000 		li	a0,0
 1137 036c 6FF0DFE7 		j	.L13
 1138              	.LVL71:
 1139              	.L35:
 1140              	.LBB396:
 1141              	.LBB369:
 1142              	.LBB149:
 145:src/riscv.cpp ****         Riscv::sleepingThreads.sleepControl();  //budi uspaavane niti ako je dosao red na njih
 1143              		.loc 1 145 9 is_stmt 1
 1144              	.LBB150:
 1145              	.LBB151:
  28:src/../h/../h/list.hpp **** 
  29:src/../h/../h/list.hpp ****     List(const List<T> &) = delete;
  30:src/../h/../h/list.hpp **** 
  31:src/../h/../h/list.hpp ****     List<T> &operator=(const List<T> &) = delete;
  32:src/../h/../h/list.hpp **** 
  33:src/../h/../h/list.hpp ****     void addFirst(T *data)
  34:src/../h/../h/list.hpp ****     {
  35:src/../h/../h/list.hpp ****         Elem *elem = new Elem(data, head);
  36:src/../h/../h/list.hpp ****         head = elem;
  37:src/../h/../h/list.hpp ****         if (!tail) { tail = head; }
  38:src/../h/../h/list.hpp ****     }
  39:src/../h/../h/list.hpp **** 
  40:src/../h/../h/list.hpp ****     void addLast(T *data)
  41:src/../h/../h/list.hpp ****     {
  42:src/../h/../h/list.hpp ****         Elem *elem = new Elem(data, 0);
  43:src/../h/../h/list.hpp ****         if (tail)
  44:src/../h/../h/list.hpp ****         {
  45:src/../h/../h/list.hpp ****             tail->next = elem;
  46:src/../h/../h/list.hpp ****             tail = elem;
  47:src/../h/../h/list.hpp ****         } else
  48:src/../h/../h/list.hpp ****         {
  49:src/../h/../h/list.hpp ****             head = tail = elem;
  50:src/../h/../h/list.hpp ****         }
  51:src/../h/../h/list.hpp ****     }
  52:src/../h/../h/list.hpp **** 
  53:src/../h/../h/list.hpp ****     T *removeFirst()
  54:src/../h/../h/list.hpp ****     {
  55:src/../h/../h/list.hpp ****         if (!head) { return 0; }
  56:src/../h/../h/list.hpp **** 
  57:src/../h/../h/list.hpp ****         Elem *elem = head;
  58:src/../h/../h/list.hpp ****         head = head->next;
  59:src/../h/../h/list.hpp ****         if (!head) { tail = 0; }
  60:src/../h/../h/list.hpp **** 
  61:src/../h/../h/list.hpp ****         T *ret = elem->data;
  62:src/../h/../h/list.hpp ****         delete elem;
GAS LISTING /tmp/ccf1To17.s 			page 32


  63:src/../h/../h/list.hpp ****         return ret;
  64:src/../h/../h/list.hpp ****     }
  65:src/../h/../h/list.hpp **** 
  66:src/../h/../h/list.hpp ****     T *peekFirst()
  67:src/../h/../h/list.hpp ****     {
  68:src/../h/../h/list.hpp ****         if (!head) { return 0; }
  69:src/../h/../h/list.hpp ****         return head->data;
  70:src/../h/../h/list.hpp ****     }
  71:src/../h/../h/list.hpp **** 
  72:src/../h/../h/list.hpp ****     T *removeLast()
  73:src/../h/../h/list.hpp ****     {
  74:src/../h/../h/list.hpp ****         if (!head) { return 0; }
  75:src/../h/../h/list.hpp **** 
  76:src/../h/../h/list.hpp ****         Elem *prev = 0;
  77:src/../h/../h/list.hpp ****         for (Elem *curr = head; curr && curr != tail; curr = curr->next)
  78:src/../h/../h/list.hpp ****         {
  79:src/../h/../h/list.hpp ****             prev = curr;
  80:src/../h/../h/list.hpp ****         }
  81:src/../h/../h/list.hpp **** 
  82:src/../h/../h/list.hpp ****         Elem *elem = tail;
  83:src/../h/../h/list.hpp ****         if (prev) { prev->next = 0; }
  84:src/../h/../h/list.hpp ****         else { head = 0; }
  85:src/../h/../h/list.hpp ****         tail = prev;
  86:src/../h/../h/list.hpp **** 
  87:src/../h/../h/list.hpp ****         T *ret = elem->data;
  88:src/../h/../h/list.hpp ****         delete elem;
  89:src/../h/../h/list.hpp ****         return ret;
  90:src/../h/../h/list.hpp ****     }
  91:src/../h/../h/list.hpp **** 
  92:src/../h/../h/list.hpp ****     T *peekLast()
  93:src/../h/../h/list.hpp ****     {
  94:src/../h/../h/list.hpp ****         if (!tail) { return 0; }
  95:src/../h/../h/list.hpp ****         return tail->data;
  96:src/../h/../h/list.hpp ****     }
  97:src/../h/../h/list.hpp **** 
  98:src/../h/../h/list.hpp ****     void addSleepingThread(T *data, int time){
  99:src/../h/../h/list.hpp ****         Elem *elem = new Elem(data);
 100:src/../h/../h/list.hpp ****         if(!head){
 101:src/../h/../h/list.hpp ****             head = elem;
 102:src/../h/../h/list.hpp ****             elem->next = nullptr;
 103:src/../h/../h/list.hpp ****             elem->sleepTime = time;
 104:src/../h/../h/list.hpp ****             tail = head;
 105:src/../h/../h/list.hpp ****             return;
 106:src/../h/../h/list.hpp ****         }
 107:src/../h/../h/list.hpp ****         int timeCount = 0;
 108:src/../h/../h/list.hpp ****         Elem *next = head, *prev = nullptr;
 109:src/../h/../h/list.hpp **** 
 110:src/../h/../h/list.hpp ****         while(time >= timeCount + next->sleepTime){
 111:src/../h/../h/list.hpp ****              timeCount += next->sleepTime;
 112:src/../h/../h/list.hpp ****              prev= next;
 113:src/../h/../h/list.hpp ****              next = next->next;
 114:src/../h/../h/list.hpp ****              if(next == nullptr)
 115:src/../h/../h/list.hpp ****                  break;
 116:src/../h/../h/list.hpp ****         }
 117:src/../h/../h/list.hpp ****         if(!prev){
 118:src/../h/../h/list.hpp ****             head = elem;
 119:src/../h/../h/list.hpp ****             head->next = next;
GAS LISTING /tmp/ccf1To17.s 			page 33


 120:src/../h/../h/list.hpp ****             head->next->sleepTime -=  head->sleepTime;
 121:src/../h/../h/list.hpp ****         }
 122:src/../h/../h/list.hpp ****         else {
 123:src/../h/../h/list.hpp ****             prev->next = elem;
 124:src/../h/../h/list.hpp ****             elem->next = next;
 125:src/../h/../h/list.hpp ****             int diff = time - timeCount;
 126:src/../h/../h/list.hpp ****             elem->sleepTime = diff;
 127:src/../h/../h/list.hpp ****             if(next != nullptr)
 128:src/../h/../h/list.hpp ****                 next->sleepTime -= diff;
 129:src/../h/../h/list.hpp ****         }
 130:src/../h/../h/list.hpp ****     }
 131:src/../h/../h/list.hpp **** 
 132:src/../h/../h/list.hpp ****     void removeSleepingThreads(){
 133:src/../h/../h/list.hpp ****         T *t;
 134:src/../h/../h/list.hpp ****         while(head && head->sleepTime == 0){
 135:src/../h/../h/list.hpp ****             t = head->data;
 136:src/../h/../h/list.hpp ****             head = head->next;
 137:src/../h/../h/list.hpp ****             t->setSleep();
 138:src/../h/../h/list.hpp ****             t->insertScheduler();
 139:src/../h/../h/list.hpp **** //            Scheduler::put(t);
 140:src/../h/../h/list.hpp ****         }
 141:src/../h/../h/list.hpp ****     }
 142:src/../h/../h/list.hpp **** 
 143:src/../h/../h/list.hpp ****     void sleepControl(){
 144:src/../h/../h/list.hpp ****         if(head != nullptr && --head->sleepTime == 0) //dekrementira vreme i radi proveru
 1146              		.loc 2 144 12 is_stmt 0
 1147 0370 17070000 		ld	a4,.LANCHOR0
 1147      03370700 
 1148              	.LVL72:
 1149              		.loc 2 144 28
 1150 0378 630C0700 		beqz	a4,.L28
 1151              		.loc 2 144 39
 1152 037c 83270701 		lw	a5,16(a4)
 1153              		.loc 2 144 49
 1154 0380 9B87F7FF 		addiw	a5,a5,-1
 1155 0384 9B860700 		sext.w	a3,a5
 1156              	.LVL73:
 1157              		.loc 2 144 28
 1158 0388 2328F700 		sw	a5,16(a4)
 1159 038c 638E0606 		beqz	a3,.L29
 1160              	.L28:
 1161              	.LVL74:
 1162              	.LBE151:
 1163              	.LBE150:
 146:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 1164              		.loc 1 146 9 is_stmt 1
 1165              	.LBB157:
 1166              	.LBB158:
 152:src/../h/riscv.hpp **** }
 1167              		.loc 4 152 5
 152:src/../h/riscv.hpp **** }
 1168              		.loc 4 152 64 is_stmt 0
 1169 0390 93072000 		li	a5,2
 1170              	#APP
 1171              	# 152 "src/../h/riscv.hpp" 1
 1172              		csrc sip, a5
 1173              	# 0 "" 2
GAS LISTING /tmp/ccf1To17.s 			page 34


 1174              	.LVL75:
 1175              	#NO_APP
 1176              	.LBE158:
 1177              	.LBE157:
 147:src/riscv.cpp ****         _thread::timeSliceCounter++;
 1178              		.loc 1 147 9 is_stmt 1
 147:src/riscv.cpp ****         _thread::timeSliceCounter++;
 1179              		.loc 1 147 34 is_stmt 0
 1180 0398 17070000 		la	a4,_ZN7_thread16timeSliceCounterE
 1180      03370700 
 1181 03a0 83370700 		ld	a5,0(a4)
 1182 03a4 93871700 		addi	a5,a5,1
 1183 03a8 2330F700 		sd	a5,0(a4)
 148:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 1184              		.loc 1 148 9 is_stmt 1
 1185              	.LBB159:
 148:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 1186              		.loc 1 148 72 is_stmt 0
 1187 03ac 17070000 		la	a4,_ZN7_thread7runningE
 1187      03370700 
 1188 03b4 03370700 		ld	a4,0(a4)
 1189              	.LVL76:
 1190              	.LBB160:
 1191              	.LBB161:
 1192              		.file 5 "src/../h/../h/tcb.hpp"
   1:src/../h/../h/tcb.hpp **** //
   2:src/../h/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/../h/tcb.hpp **** //
   4:src/../h/../h/tcb.hpp **** 
   5:src/../h/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/../h/tcb.hpp **** 
   8:src/../h/../h/tcb.hpp **** #include "syscall_c.h"
   9:src/../h/../h/tcb.hpp **** #include "../lib/hw.h"
  10:src/../h/../h/tcb.hpp **** #include "scheduler.hpp"
  11:src/../h/../h/tcb.hpp **** #include "../h/print.hpp"
  12:src/../h/../h/tcb.hpp **** #include "_sem.hpp"
  13:src/../h/../h/tcb.hpp **** 
  14:src/../h/../h/tcb.hpp **** // Thread Control Block
  15:src/../h/../h/tcb.hpp **** 
  16:src/../h/../h/tcb.hpp **** class _thread
  17:src/../h/../h/tcb.hpp **** {
  18:src/../h/../h/tcb.hpp **** public:
  19:src/../h/../h/tcb.hpp ****     ~_thread() { delete[] stack; }
  20:src/../h/../h/tcb.hpp **** 
  21:src/../h/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  22:src/../h/../h/tcb.hpp **** 
  23:src/../h/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  24:src/../h/../h/tcb.hpp **** 
  25:src/../h/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 1193              		.loc 5 25 35 is_stmt 1
 1194              		.loc 5 25 42 is_stmt 0
 1195 03b8 03370702 		ld	a4,32(a4)
 1196              	.LVL77:
 1197              	.LBE161:
 1198              	.LBE160:
 148:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
GAS LISTING /tmp/ccf1To17.s 			page 35


 1199              		.loc 1 148 9
 1200 03bc E3E0E7E4 		bltu	a5,a4,.L10
 1201              	.LBB162:
 150:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1202              		.loc 1 150 13 is_stmt 1
 1203              	.LBB163:
 1204              	.LBB164:
 111:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1205              		.loc 4 111 5
 112:src/../h/riscv.hpp ****     return sepc;
 1206              		.loc 4 112 5
 112:src/../h/riscv.hpp ****     return sepc;
 1207              		.loc 4 112 64 is_stmt 0
 1208              	#APP
 1209              	# 112 "src/../h/riscv.hpp" 1
 1210              		csrr a5, sepc
 1211              	# 0 "" 2
 1212              	#NO_APP
 1213 03c4 2334F4FC 		sd	a5,-56(s0)
 113:src/../h/riscv.hpp **** }
 1214              		.loc 4 113 5 is_stmt 1
 113:src/../h/riscv.hpp **** }
 1215              		.loc 4 113 12 is_stmt 0
 1216 03c8 833784FC 		ld	a5,-56(s0)
 1217              	.LBE164:
 1218              	.LBE163:
 150:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1219              		.loc 1 150 43
 1220 03cc 233CF4F8 		sd	a5,-104(s0)
 151:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1221              		.loc 1 151 13 is_stmt 1
 1222              	.LBB165:
 1223              	.LBB166:
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1224              		.loc 4 179 5
 180:src/../h/riscv.hpp ****     return sstatus;
 1225              		.loc 4 180 5
 180:src/../h/riscv.hpp ****     return sstatus;
 1226              		.loc 4 180 76 is_stmt 0
 1227              	#APP
 1228              	# 180 "src/../h/riscv.hpp" 1
 1229              		csrr a5, sstatus
 1230              	# 0 "" 2
 1231              	#NO_APP
 1232 03d4 2330F4FC 		sd	a5,-64(s0)
 181:src/../h/riscv.hpp **** }
 1233              		.loc 4 181 5 is_stmt 1
 181:src/../h/riscv.hpp **** }
 1234              		.loc 4 181 12 is_stmt 0
 1235 03d8 833704FC 		ld	a5,-64(s0)
 1236              	.LBE166:
 1237              	.LBE165:
 151:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1238              		.loc 1 151 49
 1239 03dc 2330F4FA 		sd	a5,-96(s0)
 152:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 1240              		.loc 1 152 13 is_stmt 1
GAS LISTING /tmp/ccf1To17.s 			page 36


 152:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 1241              		.loc 1 152 39 is_stmt 0
 1242 03e0 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 1242      83B70700 
 1243 03e8 23B00700 		sd	zero,0(a5)
 153:src/riscv.cpp ****             _thread::dispatch();
 1244              		.loc 1 153 13 is_stmt 1
 153:src/riscv.cpp ****             _thread::dispatch();
 1245              		.loc 1 153 30 is_stmt 0
 1246 03ec 97000000 		call	_ZN7_thread8dispatchEv@plt
 1246      E7800000 
 1247              	.LVL78:
 154:src/riscv.cpp ****             w_sstatus(sstatus);
 1248              		.loc 1 154 13 is_stmt 1
 154:src/riscv.cpp ****             w_sstatus(sstatus);
 1249              		.loc 1 154 22 is_stmt 0
 1250 03f4 833704FA 		ld	a5,-96(s0)
 1251              	.LVL79:
 1252              	.LBB167:
 1253              	.LBB168:
 186:src/../h/riscv.hpp **** }
 1254              		.loc 4 186 5 is_stmt 1
 186:src/../h/riscv.hpp **** }
 1255              		.loc 4 186 77 is_stmt 0
 1256              	#APP
 1257              	# 186 "src/../h/riscv.hpp" 1
 1258              		csrw sstatus, a5
 1259              	# 0 "" 2
 1260              	.LVL80:
 1261              	#NO_APP
 1262              	.LBE168:
 1263              	.LBE167:
 155:src/riscv.cpp ****             w_sepc(sepc);
 1264              		.loc 1 155 13 is_stmt 1
 155:src/riscv.cpp ****             w_sepc(sepc);
 1265              		.loc 1 155 19 is_stmt 0
 1266 03fc 833784F9 		ld	a5,-104(s0)
 1267              	.LVL81:
 1268              	.LBB169:
 1269              	.LBB170:
 118:src/../h/riscv.hpp **** }
 1270              		.loc 4 118 5 is_stmt 1
 118:src/../h/riscv.hpp **** }
 1271              		.loc 4 118 65 is_stmt 0
 1272              	#APP
 1273              	# 118 "src/../h/riscv.hpp" 1
 119:src/../h/riscv.hpp **** 
 1274              		csrw sepc, a5
 1275              	# 0 "" 2
 1276              		.loc 4 119 1
 1277              	#NO_APP
 1278 0404 6FF09FDF 		j	.L10
 1279              	.LVL82:
 1280              	.L29:
 1281              	.LBE170:
 1282              	.LBE169:
 1283              	.LBE162:
GAS LISTING /tmp/ccf1To17.s 			page 37


 1284              	.LBE159:
 1285              	.LBB171:
 1286              	.LBB156:
 1287              	.LBB152:
 1288              	.LBB153:
 134:src/../h/../h/list.hpp ****             t = head->data;
 1289              		.loc 2 134 20 is_stmt 1
 134:src/../h/../h/list.hpp ****             t = head->data;
 1290              		.loc 2 134 15 is_stmt 0
 1291 0408 97070000 		ld	a5,.LANCHOR0
 1291      83B70700 
 134:src/../h/../h/list.hpp ****             t = head->data;
 1292              		.loc 2 134 20
 1293 0410 E38007F8 		beqz	a5,.L28
 134:src/../h/../h/list.hpp ****             t = head->data;
 1294              		.loc 2 134 29
 1295 0414 03A70701 		lw	a4,16(a5)
 134:src/../h/../h/list.hpp ****             t = head->data;
 1296              		.loc 2 134 20
 1297 0418 E31C07F6 		bnez	a4,.L28
 135:src/../h/../h/list.hpp ****             head = head->next;
 1298              		.loc 2 135 13
 1299 041c 83B40700 		ld	s1,0(a5)
 1300              	.LVL83:
 136:src/../h/../h/list.hpp ****             t->setSleep();
 1301              		.loc 2 136 26
 1302 0420 83B78700 		ld	a5,8(a5)
 136:src/../h/../h/list.hpp ****             t->setSleep();
 1303              		.loc 2 136 13
 1304 0424 17070000 		sd	a5,.LANCHOR0,a4
 1304      2330F700 
 137:src/../h/../h/list.hpp ****             t->insertScheduler();
 1305              		.loc 2 137 13
 1306 042c 13850400 		mv	a0,s1
 1307 0430 97000000 		call	_ZN7_thread8setSleepEv@plt
 1307      E7800000 
 1308              	.LVL84:
 1309              	.LBB154:
 1310              	.LBB155:
  26:src/../h/../h/tcb.hpp **** 
  27:src/../h/../h/tcb.hpp ****     void setSleep();
  28:src/../h/../h/tcb.hpp **** 
  29:src/../h/../h/tcb.hpp ****     void insertScheduler() {
  30:src/../h/../h/tcb.hpp ****         Scheduler::put(this);
 1311              		.loc 5 30 9 is_stmt 1
 1312              		.loc 5 30 23 is_stmt 0
 1313 0438 13850400 		mv	a0,s1
 1314 043c 97000000 		call	_ZN9Scheduler3putEP7_thread@plt
 1314      E7800000 
 1315              	.LVL85:
  31:src/../h/../h/tcb.hpp ****     }
 1316              		.loc 5 31 5
 1317 0444 6FF05FFC 		j	.L29
 1318              	.LVL86:
 1319              	.L31:
 1320              	.LBE155:
 1321              	.LBE154:
GAS LISTING /tmp/ccf1To17.s 			page 38


 1322              	.LBE153:
 1323              	.LBE152:
 1324              	.LBE156:
 1325              	.LBE171:
 1326              	.LBE149:
 1327              	.LBB172:
 1328              	.LBB148:
 1329              	.LBB147:
 1330              	.LBB145:
 168:src/riscv.cpp ****             while (*((char*)CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT){
 1331              		.loc 1 168 13 is_stmt 1
 168:src/riscv.cpp ****             while (*((char*)CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT){
 1332              		.loc 1 168 47
 168:src/riscv.cpp ****             while (*((char*)CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT){
 1333              		.loc 1 168 20 is_stmt 0
 1334 0448 97070000 		la	a5,CONSOLE_STATUS
 1334      83B70700 
 1335 0450 83B70700 		ld	a5,0(a5)
 1336 0454 83C70700 		lbu	a5,0(a5)
 168:src/riscv.cpp ****             while (*((char*)CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT){
 1337              		.loc 1 168 47
 1338 0458 13F71700 		andi	a4,a5,1
 1339 045c E30007CC 		beqz	a4,.L30
 1340              	.LBB146:
 169:src/riscv.cpp ****                 __asm__ volatile("mv a1, %0" : : "r" (*((char*)CONSOLE_STATUS)));
 1341              		.loc 1 169 17 is_stmt 1
 169:src/riscv.cpp ****                 __asm__ volatile("mv a1, %0" : : "r" (*((char*)CONSOLE_STATUS)));
 1342              		.loc 1 169 81 is_stmt 0
 1343              	#APP
 1344              	# 169 "src/riscv.cpp" 1
 170:src/riscv.cpp ****                 char c = (*(char*)CONSOLE_RX_DATA);
 1345              		mv a1, a5
 1346              	# 0 "" 2
 1347              		.loc 1 170 17 is_stmt 1
 170:src/riscv.cpp ****                 char c = (*(char*)CONSOLE_RX_DATA);
 1348              		.loc 1 170 27 is_stmt 0
 1349              	#NO_APP
 1350 0464 97070000 		la	a5,CONSOLE_RX_DATA
 1350      83B70700 
 1351 046c 83B70700 		ld	a5,0(a5)
 1352              	.LVL87:
 171:src/riscv.cpp ****                 buff2.append(c);
 1353              		.loc 1 171 17 is_stmt 1
 171:src/riscv.cpp ****                 buff2.append(c);
 1354              		.loc 1 171 29 is_stmt 0
 1355 0470 83C50700 		lbu	a1,0(a5)
 1356 0474 17050000 		lla	a0,.LANCHOR0+304
 1356      13050500 
 1357 047c 97000000 		call	_ZN14KeyboardBuffer6appendEc@plt
 1357      E7800000 
 1358              	.LVL88:
 1359              	.LBE146:
 168:src/riscv.cpp ****             while (*((char*)CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT){
 1360              		.loc 1 168 13
 1361 0484 6FF05FFC 		j	.L31
 1362              	.LBE145:
 1363              	.LBE147:
GAS LISTING /tmp/ccf1To17.s 			page 39


 1364              	.LBE148:
 1365              	.LBE172:
 1366              	.LBE369:
 1367              	.LBE396:
 1368              		.cfi_endproc
 1369              	.LFE50:
 1371              		.align	2
 1373              	_GLOBAL__sub_I__ZN5Riscv15sleepingThreadsE:
 1374              	.LFB57:
 1375              		.loc 1 185 1 is_stmt 1
 1376              		.cfi_startproc
 1377 0488 130101FF 		addi	sp,sp,-16
 1378              		.cfi_def_cfa_offset 16
 1379 048c 23341100 		sd	ra,8(sp)
 1380 0490 23308100 		sd	s0,0(sp)
 1381              		.cfi_offset 1, -8
 1382              		.cfi_offset 8, -16
 1383 0494 13040101 		addi	s0,sp,16
 1384              		.cfi_def_cfa 8, 0
 1385              		.loc 1 185 1 is_stmt 0
 1386 0498 B7050100 		li	a1,65536
 1387 049c 9385F5FF 		addi	a1,a1,-1
 1388 04a0 13051000 		li	a0,1
 1389 04a4 97000000 		call	_Z41__static_initialization_and_destruction_0ii
 1389      E7800000 
 1390              	.LVL89:
 1391 04ac 83308100 		ld	ra,8(sp)
 1392              		.cfi_restore 1
 1393 04b0 03340100 		ld	s0,0(sp)
 1394              		.cfi_restore 8
 1395              		.cfi_def_cfa 2, 16
 1396 04b4 13010101 		addi	sp,sp,16
 1397              		.cfi_def_cfa_offset 0
 1398 04b8 67800000 		jr	ra
 1399              		.cfi_endproc
 1400              	.LFE57:
 1402              		.section	.init_array,"aw"
 1403              		.align	3
 1404 0000 00000000 		.dword	_GLOBAL__sub_I__ZN5Riscv15sleepingThreadsE
 1404      00000000 
 1405              		.globl	_ZN5Riscv3tttE
 1406              		.globl	_ZN5Riscv5buff2E
 1407              		.globl	_ZN5Riscv5buff1E
 1408              		.globl	_ZN5Riscv15sleepingThreadsE
 1409              		.bss
 1410              		.align	3
 1411              		.set	.LANCHOR0,. + 0
 1414              	_ZN5Riscv15sleepingThreadsE:
 1415 0000 00000000 		.zero	16
 1415      00000000 
 1415      00000000 
 1415      00000000 
 1418              	_ZN5Riscv5buff1E:
 1419 0010 00000000 		.zero	288
 1419      00000000 
 1419      00000000 
 1419      00000000 
GAS LISTING /tmp/ccf1To17.s 			page 40


 1419      00000000 
 1422              	_ZN5Riscv5buff2E:
 1423 0130 00000000 		.zero	288
 1423      00000000 
 1423      00000000 
 1423      00000000 
 1423      00000000 
 1426              	_ZN5Riscv3tttE:
 1427 0250 00       		.zero	1
 1428              		.text
 1429              	.Letext0:
 1430              		.file 6 "src/../h/../lib/hw.h"
 1431              		.file 7 "src/../h/../h/syscall_c.h"
 1432              		.file 8 "src/../h/../h/_sem.hpp"
 1433              		.file 9 "src/../h/../h/scheduler.hpp"
 1434              		.file 10 "src/../lib/mem.h"
 1435              		.file 11 "src/../h/../h/../h/print.hpp"
GAS LISTING /tmp/ccf1To17.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccf1To17.s:8      .text:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccf1To17.s:12     .text:0000000000000000 .L0 
     /tmp/ccf1To17.s:14     .text:0000000000000000 .L0 
     /tmp/ccf1To17.s:20     .text:000000000000000c .L0 
     /tmp/ccf1To17.s:24     .text:0000000000000018 .L0 
     /tmp/ccf1To17.s:25     .text:000000000000001c .L0 
     /tmp/ccf1To17.s:29     .text:0000000000000028 .L0 
     /tmp/ccf1To17.s:30     .text:0000000000000028 .L0 
     /tmp/ccf1To17.s:31     .text:0000000000000028 .L0 
     /tmp/ccf1To17.s:33     .text:000000000000002c .L0 
     /tmp/ccf1To17.s:40     .text:000000000000002c .L0 
     /tmp/ccf1To17.s:52     .text:000000000000003c .L0 
     /tmp/ccf1To17.s:56     .text:0000000000000048 .L0 
     /tmp/ccf1To17.s:57     .text:0000000000000048 .L0 
     /tmp/ccf1To17.s:70     .text:000000000000005c .L0 
     /tmp/ccf1To17.s:74     .text:0000000000000068 .L0 
     /tmp/ccf1To17.s:75     .text:0000000000000068 .L0 
     /tmp/ccf1To17.s:83     .text:000000000000007c .L0 
     /tmp/ccf1To17.s:84     .text:0000000000000080 .L0 
     /tmp/ccf1To17.s:86     .text:0000000000000084 .L0 
     /tmp/ccf1To17.s:87     .text:0000000000000084 .L0 
     /tmp/ccf1To17.s:89     .text:0000000000000088 .L0 
     /tmp/ccf1To17.s:91     .text:000000000000008c .L0 
     /tmp/ccf1To17.s:93     .text:0000000000000090 .L0 
     /tmp/ccf1To17.s:99     .text:0000000000000090 _ZN5Riscv10popSppSpieEv
     /tmp/ccf1To17.s:102    .text:0000000000000090 .L0 
     /tmp/ccf1To17.s:103    .text:0000000000000090 .L0 
     /tmp/ccf1To17.s:104    .text:0000000000000094 .L0 
     /tmp/ccf1To17.s:106    .text:0000000000000098 .L0 
     /tmp/ccf1To17.s:108    .text:000000000000009c .L0 
     /tmp/ccf1To17.s:110    .text:000000000000009c .L0 
       src/riscv.cpp:18     .text:000000000000009c .L0 
     /tmp/ccf1To17.s:116    .text:00000000000000a0 .L0 
       src/riscv.cpp:19     .text:00000000000000a0 .L0 
     /tmp/ccf1To17.s:122    .text:00000000000000a4 .L0 
     /tmp/ccf1To17.s:123    .text:00000000000000a8 .L0 
     /tmp/ccf1To17.s:124    .text:00000000000000a8 .L0 
     /tmp/ccf1To17.s:126    .text:00000000000000ac .L0 
     /tmp/ccf1To17.s:128    .text:00000000000000b0 .L0 
     /tmp/ccf1To17.s:134    .text:00000000000000b0 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccf1To17.s:137    .text:00000000000000b0 .L0 
     /tmp/ccf1To17.s:138    .text:00000000000000b0 .L0 
     /tmp/ccf1To17.s:139    .text:00000000000000b4 .L0 
     /tmp/ccf1To17.s:146    .text:00000000000000cc .L0 
     /tmp/ccf1To17.s:147    .text:00000000000000cc .L0 
     /tmp/ccf1To17.s:148    .text:00000000000000cc .L0 
     /tmp/ccf1To17.s:149    .text:00000000000000cc .L0 
     /tmp/ccf1To17.s:150    .text:00000000000000cc .L0 
     /tmp/ccf1To17.s:151    .text:00000000000000cc .L0 
     /tmp/ccf1To17.s:153    .text:00000000000000d0 .L0 
     /tmp/ccf1To17.s:158    .text:00000000000000d0 .L0 
     /tmp/ccf1To17.s:159    .text:00000000000000d0 .L0 
     /tmp/ccf1To17.s:160    .text:00000000000000d0 .L0 
  src/../h/riscv.hpp:100    .text:00000000000000d0 .L0 
     /tmp/ccf1To17.s:168    .text:00000000000000d8 .L0 
GAS LISTING /tmp/ccf1To17.s 			page 42


     /tmp/ccf1To17.s:169    .text:00000000000000d8 .L0 
     /tmp/ccf1To17.s:174    .text:00000000000000dc .L0 
     /tmp/ccf1To17.s:176    .text:00000000000000dc .L0 
     /tmp/ccf1To17.s:177    .text:00000000000000dc .L0 
     /tmp/ccf1To17.s:179    .text:00000000000000e0 .L0 
     /tmp/ccf1To17.s:185    .text:00000000000000e8 .L0 
     /tmp/ccf1To17.s:195    .text:00000000000000f8 .L0 
     /tmp/ccf1To17.s:201    .text:0000000000000108 .L0 
     /tmp/ccf1To17.s:202    .text:0000000000000108 .L0 
     /tmp/ccf1To17.s:203    .text:0000000000000108 .L0 
     /tmp/ccf1To17.s:209    .text:0000000000000114 .L0 
     /tmp/ccf1To17.s:215    .text:000000000000011c .L0 
     /tmp/ccf1To17.s:216    .text:000000000000011c .L0 
     /tmp/ccf1To17.s:224    .text:0000000000000128 .L0 
     /tmp/ccf1To17.s:232    .text:000000000000012c .L0 
     /tmp/ccf1To17.s:233    .text:000000000000012c .L0 
     /tmp/ccf1To17.s:234    .text:000000000000012c .L0 
  src/../h/riscv.hpp:112    .text:000000000000012c .L0 
     /tmp/ccf1To17.s:242    .text:0000000000000134 .L0 
     /tmp/ccf1To17.s:243    .text:0000000000000134 .L0 
     /tmp/ccf1To17.s:247    .text:0000000000000138 .L0 
     /tmp/ccf1To17.s:249    .text:000000000000013c .L0 
     /tmp/ccf1To17.s:253    .text:0000000000000140 .L0 
     /tmp/ccf1To17.s:254    .text:0000000000000140 .L0 
     /tmp/ccf1To17.s:255    .text:0000000000000140 .L0 
  src/../h/riscv.hpp:180    .text:0000000000000140 .L0 
     /tmp/ccf1To17.s:263    .text:0000000000000148 .L0 
     /tmp/ccf1To17.s:264    .text:0000000000000148 .L0 
     /tmp/ccf1To17.s:268    .text:000000000000014c .L0 
     /tmp/ccf1To17.s:270    .text:0000000000000150 .L0 
     /tmp/ccf1To17.s:271    .text:0000000000000150 .L0 
       src/riscv.cpp:34     .text:0000000000000150 .L0 
     /tmp/ccf1To17.s:280    .text:0000000000000154 .L0 
     /tmp/ccf1To17.s:291    .text:000000000000015c .L0 
     /tmp/ccf1To17.s:303    .text:0000000000000164 .L0 
     /tmp/ccf1To17.s:317    .text:000000000000016c .L0 
     /tmp/ccf1To17.s:333    .text:0000000000000174 .L0 
     /tmp/ccf1To17.s:351    .text:000000000000017c .L0 
     /tmp/ccf1To17.s:371    .text:0000000000000184 .L0 
     /tmp/ccf1To17.s:393    .text:000000000000018c .L0 
     /tmp/ccf1To17.s:417    .text:0000000000000194 .L0 
     /tmp/ccf1To17.s:443    .text:000000000000019c .L0 
     /tmp/ccf1To17.s:471    .text:00000000000001a4 .L0 
     /tmp/ccf1To17.s:501    .text:00000000000001ac .L0 
     /tmp/ccf1To17.s:504    .text:00000000000001b4 .L0 
     /tmp/ccf1To17.s:505    .text:00000000000001b4 .L0 
     /tmp/ccf1To17.s:509    .text:00000000000001c0 .L0 
     /tmp/ccf1To17.s:510    .text:00000000000001c0 .L0 
     /tmp/ccf1To17.s:527    .text:00000000000001c8 .L0 
     /tmp/ccf1To17.s:536    .text:00000000000001d0 .L0 
     /tmp/ccf1To17.s:537    .text:00000000000001d0 .L0 
       src/riscv.cpp:40     .text:00000000000001d0 .L0 
     /tmp/ccf1To17.s:544    .text:00000000000001d4 .L0 
     /tmp/ccf1To17.s:545    .text:00000000000001d4 .L0 
     /tmp/ccf1To17.s:547    .text:00000000000001d4 .L0 
     /tmp/ccf1To17.s:552    .text:00000000000001e0 .L0 
       src/riscv.cpp:44     .text:00000000000001e0 .L0 
GAS LISTING /tmp/ccf1To17.s 			page 43


     /tmp/ccf1To17.s:563    .text:00000000000001e4 .L0 
     /tmp/ccf1To17.s:569    .text:00000000000001e8 .L0 
     /tmp/ccf1To17.s:570    .text:00000000000001e8 .L0 
     /tmp/ccf1To17.s:575    .text:00000000000001ec .L0 
  src/../h/riscv.hpp:186    .text:00000000000001ec .L0 
     /tmp/ccf1To17.s:585    .text:00000000000001f0 .L0 
     /tmp/ccf1To17.s:586    .text:00000000000001f0 .L0 
     /tmp/ccf1To17.s:591    .text:00000000000001f4 .L0 
  src/../h/riscv.hpp:118    .text:00000000000001f4 .L0 
     /tmp/ccf1To17.s:601    .text:00000000000001f8 .L0 
       src/riscv.cpp:140    .text:00000000000001f8 .L0 
     /tmp/ccf1To17.s:612    .text:00000000000001fc .L0 
     /tmp/ccf1To17.s:613    .text:0000000000000200 .L0 
     /tmp/ccf1To17.s:614    .text:0000000000000200 .L0 
     /tmp/ccf1To17.s:616    .text:0000000000000204 .L0 
     /tmp/ccf1To17.s:617    .text:0000000000000204 .L0 
     /tmp/ccf1To17.s:619    .text:0000000000000208 .L0 
     /tmp/ccf1To17.s:621    .text:000000000000020c .L0 
     /tmp/ccf1To17.s:623    .text:0000000000000210 .L0 
     /tmp/ccf1To17.s:625    .text:0000000000000214 .L0 
     /tmp/ccf1To17.s:627    .text:0000000000000218 .L0 
     /tmp/ccf1To17.s:631    .text:000000000000021c .L0 
     /tmp/ccf1To17.s:638    .text:000000000000021c .L0 
     /tmp/ccf1To17.s:639    .text:000000000000021c .L0 
     /tmp/ccf1To17.s:640    .text:000000000000021c .L0 
       src/riscv.cpp:49     .text:000000000000021c .L0 
     /tmp/ccf1To17.s:647    .text:0000000000000220 .L0 
     /tmp/ccf1To17.s:649    .text:0000000000000220 .L0 
     /tmp/ccf1To17.s:652    .text:0000000000000228 .L0 
       src/riscv.cpp:51     .text:0000000000000228 .L0 
     /tmp/ccf1To17.s:664    .text:000000000000022c .L0 
     /tmp/ccf1To17.s:676    .text:0000000000000234 .L0 
     /tmp/ccf1To17.s:677    .text:0000000000000234 .L0 
     /tmp/ccf1To17.s:678    .text:0000000000000234 .L0 
     /tmp/ccf1To17.s:679    .text:0000000000000234 .L0 
     /tmp/ccf1To17.s:680    .text:0000000000000234 .L0 
       src/riscv.cpp:58     .text:0000000000000234 .L0 
     /tmp/ccf1To17.s:687    .text:0000000000000238 .L0 
       src/riscv.cpp:59     .text:0000000000000238 .L0 
     /tmp/ccf1To17.s:693    .text:000000000000023c .L0 
       src/riscv.cpp:66     .text:000000000000023c .L0 
     /tmp/ccf1To17.s:698    .text:0000000000000240 .L0 
       src/riscv.cpp:67     .text:0000000000000240 .L0 
     /tmp/ccf1To17.s:703    .text:0000000000000244 .L0 
       src/riscv.cpp:69     .text:0000000000000244 .L0 
     /tmp/ccf1To17.s:709    .text:0000000000000248 .L0 
       src/riscv.cpp:70     .text:0000000000000248 .L0 
     /tmp/ccf1To17.s:715    .text:000000000000024c .L0 
     /tmp/ccf1To17.s:717    .text:000000000000024c .L0 
     /tmp/ccf1To17.s:721    .text:0000000000000258 .L0 
     /tmp/ccf1To17.s:722    .text:0000000000000258 .L0 
     /tmp/ccf1To17.s:729    .text:0000000000000270 .L0 
       src/riscv.cpp:73     .text:0000000000000270 .L0 
     /tmp/ccf1To17.s:742    .text:0000000000000274 .L0 
     /tmp/ccf1To17.s:755    .text:000000000000027c .L0 
     /tmp/ccf1To17.s:756    .text:000000000000027c .L0 
     /tmp/ccf1To17.s:759    .text:0000000000000284 .L0 
GAS LISTING /tmp/ccf1To17.s 			page 44


     /tmp/ccf1To17.s:761    .text:0000000000000288 .L0 
       src/riscv.cpp:79     .text:0000000000000288 .L0 
     /tmp/ccf1To17.s:775    .text:000000000000028c .L0 
     /tmp/ccf1To17.s:788    .text:0000000000000294 .L0 
       src/riscv.cpp:81     .text:0000000000000294 .L0 
     /tmp/ccf1To17.s:802    .text:000000000000029c .L0 
     /tmp/ccf1To17.s:803    .text:000000000000029c .L0 
     /tmp/ccf1To17.s:804    .text:000000000000029c .L0 
       src/riscv.cpp:89     .text:000000000000029c .L0 
     /tmp/ccf1To17.s:811    .text:00000000000002a0 .L0 
       src/riscv.cpp:90     .text:00000000000002a0 .L0 
     /tmp/ccf1To17.s:817    .text:00000000000002a4 .L0 
     /tmp/ccf1To17.s:819    .text:00000000000002a4 .L0 
     /tmp/ccf1To17.s:822    .text:00000000000002ac .L0 
       src/riscv.cpp:92     .text:00000000000002ac .L0 
     /tmp/ccf1To17.s:838    .text:00000000000002b0 .L0 
     /tmp/ccf1To17.s:854    .text:00000000000002b8 .L0 
     /tmp/ccf1To17.s:855    .text:00000000000002b8 .L0 
       src/riscv.cpp:97     .text:00000000000002b8 .L0 
     /tmp/ccf1To17.s:862    .text:00000000000002bc .L0 
     /tmp/ccf1To17.s:864    .text:00000000000002bc .L0 
     /tmp/ccf1To17.s:866    .text:00000000000002c0 .L0 
     /tmp/ccf1To17.s:874    .text:00000000000002d8 .L0 
     /tmp/ccf1To17.s:875    .text:00000000000002d8 .L0 
     /tmp/ccf1To17.s:876    .text:00000000000002d8 .L0 
     /tmp/ccf1To17.s:893    .text:00000000000002e0 .L0 
     /tmp/ccf1To17.s:909    .text:00000000000002e8 .L0 
     /tmp/ccf1To17.s:910    .text:00000000000002e8 .L0 
       src/riscv.cpp:105    .text:00000000000002e8 .L0 
     /tmp/ccf1To17.s:917    .text:00000000000002ec .L0 
     /tmp/ccf1To17.s:919    .text:00000000000002ec .L0 
     /tmp/ccf1To17.s:922    .text:00000000000002f4 .L0 
       src/riscv.cpp:107    .text:00000000000002f4 .L0 
     /tmp/ccf1To17.s:940    .text:00000000000002f8 .L0 
     /tmp/ccf1To17.s:958    .text:0000000000000300 .L0 
     /tmp/ccf1To17.s:959    .text:0000000000000300 .L0 
       src/riscv.cpp:112    .text:0000000000000300 .L0 
     /tmp/ccf1To17.s:966    .text:0000000000000304 .L0 
     /tmp/ccf1To17.s:968    .text:0000000000000304 .L0 
     /tmp/ccf1To17.s:971    .text:000000000000030c .L0 
       src/riscv.cpp:114    .text:000000000000030c .L0 
     /tmp/ccf1To17.s:990    .text:0000000000000310 .L0 
     /tmp/ccf1To17.s:1009   .text:0000000000000318 .L0 
     /tmp/ccf1To17.s:1010   .text:0000000000000318 .L0 
       src/riscv.cpp:118    .text:0000000000000318 .L0 
     /tmp/ccf1To17.s:1017   .text:000000000000031c .L0 
     /tmp/ccf1To17.s:1019   .text:000000000000031c .L0 
     /tmp/ccf1To17.s:1022   .text:0000000000000324 .L0 
       src/riscv.cpp:120    .text:0000000000000324 .L0 
     /tmp/ccf1To17.s:1042   .text:0000000000000328 .L0 
     /tmp/ccf1To17.s:1061   .text:0000000000000330 .L0 
     /tmp/ccf1To17.s:1062   .text:0000000000000330 .L0 
     /tmp/ccf1To17.s:1066   .text:0000000000000340 .L0 
     /tmp/ccf1To17.s:1074   .text:0000000000000348 .L0 
     /tmp/ccf1To17.s:1075   .text:0000000000000348 .L0 
       src/riscv.cpp:129    .text:0000000000000348 .L0 
     /tmp/ccf1To17.s:1082   .text:000000000000034c .L0 
GAS LISTING /tmp/ccf1To17.s 			page 45


     /tmp/ccf1To17.s:1084   .text:000000000000034c .L0 
     /tmp/ccf1To17.s:1104   .text:0000000000000360 .L0 
     /tmp/ccf1To17.s:1146   .text:0000000000000370 .L0 
     /tmp/ccf1To17.s:1147   .text:0000000000000370 .L0 
     /tmp/ccf1To17.s:1150   .text:0000000000000378 .L0 
     /tmp/ccf1To17.s:1152   .text:000000000000037c .L0 
     /tmp/ccf1To17.s:1154   .text:0000000000000380 .L0 
     /tmp/ccf1To17.s:1158   .text:0000000000000388 .L0 
     /tmp/ccf1To17.s:1167   .text:0000000000000390 .L0 
     /tmp/ccf1To17.s:1168   .text:0000000000000390 .L0 
     /tmp/ccf1To17.s:1169   .text:0000000000000390 .L0 
     /tmp/ccf1To17.s:1179   .text:0000000000000398 .L0 
     /tmp/ccf1To17.s:1180   .text:0000000000000398 .L0 
     /tmp/ccf1To17.s:1186   .text:00000000000003ac .L0 
     /tmp/ccf1To17.s:1187   .text:00000000000003ac .L0 
     /tmp/ccf1To17.s:1194   .text:00000000000003b8 .L0 
     /tmp/ccf1To17.s:1195   .text:00000000000003b8 .L0 
     /tmp/ccf1To17.s:1200   .text:00000000000003bc .L0 
     /tmp/ccf1To17.s:1205   .text:00000000000003c0 .L0 
     /tmp/ccf1To17.s:1206   .text:00000000000003c0 .L0 
     /tmp/ccf1To17.s:1207   .text:00000000000003c0 .L0 
  src/../h/riscv.hpp:112    .text:00000000000003c0 .L0 
     /tmp/ccf1To17.s:1215   .text:00000000000003c8 .L0 
     /tmp/ccf1To17.s:1216   .text:00000000000003c8 .L0 
     /tmp/ccf1To17.s:1220   .text:00000000000003cc .L0 
     /tmp/ccf1To17.s:1224   .text:00000000000003d0 .L0 
     /tmp/ccf1To17.s:1225   .text:00000000000003d0 .L0 
     /tmp/ccf1To17.s:1226   .text:00000000000003d0 .L0 
  src/../h/riscv.hpp:180    .text:00000000000003d0 .L0 
     /tmp/ccf1To17.s:1234   .text:00000000000003d8 .L0 
     /tmp/ccf1To17.s:1235   .text:00000000000003d8 .L0 
     /tmp/ccf1To17.s:1239   .text:00000000000003dc .L0 
     /tmp/ccf1To17.s:1241   .text:00000000000003e0 .L0 
     /tmp/ccf1To17.s:1242   .text:00000000000003e0 .L0 
     /tmp/ccf1To17.s:1245   .text:00000000000003ec .L0 
     /tmp/ccf1To17.s:1246   .text:00000000000003ec .L0 
     /tmp/ccf1To17.s:1249   .text:00000000000003f4 .L0 
     /tmp/ccf1To17.s:1250   .text:00000000000003f4 .L0 
     /tmp/ccf1To17.s:1255   .text:00000000000003f8 .L0 
  src/../h/riscv.hpp:186    .text:00000000000003f8 .L0 
     /tmp/ccf1To17.s:1265   .text:00000000000003fc .L0 
     /tmp/ccf1To17.s:1266   .text:00000000000003fc .L0 
     /tmp/ccf1To17.s:1271   .text:0000000000000400 .L0 
  src/../h/riscv.hpp:118    .text:0000000000000400 .L0 
     /tmp/ccf1To17.s:1278   .text:0000000000000404 .L0 
     /tmp/ccf1To17.s:1290   .text:0000000000000408 .L0 
     /tmp/ccf1To17.s:1291   .text:0000000000000408 .L0 
     /tmp/ccf1To17.s:1293   .text:0000000000000410 .L0 
     /tmp/ccf1To17.s:1295   .text:0000000000000414 .L0 
     /tmp/ccf1To17.s:1297   .text:0000000000000418 .L0 
     /tmp/ccf1To17.s:1299   .text:000000000000041c .L0 
     /tmp/ccf1To17.s:1302   .text:0000000000000420 .L0 
     /tmp/ccf1To17.s:1304   .text:0000000000000424 .L0 
     /tmp/ccf1To17.s:1306   .text:000000000000042c .L0 
     /tmp/ccf1To17.s:1312   .text:0000000000000438 .L0 
     /tmp/ccf1To17.s:1313   .text:0000000000000438 .L0 
     /tmp/ccf1To17.s:1317   .text:0000000000000444 .L0 
GAS LISTING /tmp/ccf1To17.s 			page 46


     /tmp/ccf1To17.s:1332   .text:0000000000000448 .L0 
     /tmp/ccf1To17.s:1333   .text:0000000000000448 .L0 
     /tmp/ccf1To17.s:1334   .text:0000000000000448 .L0 
     /tmp/ccf1To17.s:1338   .text:0000000000000458 .L0 
     /tmp/ccf1To17.s:1342   .text:0000000000000460 .L0 
       src/riscv.cpp:169    .text:0000000000000460 .L0 
     /tmp/ccf1To17.s:1348   .text:0000000000000464 .L0 
     /tmp/ccf1To17.s:1350   .text:0000000000000464 .L0 
     /tmp/ccf1To17.s:1354   .text:0000000000000470 .L0 
     /tmp/ccf1To17.s:1355   .text:0000000000000470 .L0 
     /tmp/ccf1To17.s:1361   .text:0000000000000484 .L0 
     /tmp/ccf1To17.s:1368   .text:0000000000000488 .L0 
     /tmp/ccf1To17.s:1373   .text:0000000000000488 _GLOBAL__sub_I__ZN5Riscv15sleepingThreadsE
     /tmp/ccf1To17.s:1376   .text:0000000000000488 .L0 
     /tmp/ccf1To17.s:1377   .text:0000000000000488 .L0 
     /tmp/ccf1To17.s:1378   .text:000000000000048c .L0 
     /tmp/ccf1To17.s:1381   .text:0000000000000494 .L0 
     /tmp/ccf1To17.s:1382   .text:0000000000000494 .L0 
     /tmp/ccf1To17.s:1384   .text:0000000000000498 .L0 
     /tmp/ccf1To17.s:1386   .text:0000000000000498 .L0 
     /tmp/ccf1To17.s:1392   .text:00000000000004b0 .L0 
     /tmp/ccf1To17.s:1394   .text:00000000000004b4 .L0 
     /tmp/ccf1To17.s:1395   .text:00000000000004b4 .L0 
     /tmp/ccf1To17.s:1397   .text:00000000000004b8 .L0 
     /tmp/ccf1To17.s:1399   .text:00000000000004bc .L0 
     /tmp/ccf1To17.s:1426   .bss:0000000000000250 _ZN5Riscv3tttE
     /tmp/ccf1To17.s:1422   .bss:0000000000000130 _ZN5Riscv5buff2E
     /tmp/ccf1To17.s:1418   .bss:0000000000000010 _ZN5Riscv5buff1E
     /tmp/ccf1To17.s:1414   .bss:0000000000000000 _ZN5Riscv15sleepingThreadsE
     /tmp/ccf1To17.s:1411   .bss:0000000000000000 .LANCHOR0
     /tmp/ccf1To17.s:1436   .text:00000000000004bc .L0 
     /tmp/ccf1To17.s:40     .text:000000000000002c .L0 
     /tmp/ccf1To17.s:59     .text:000000000000004c .L0 
     /tmp/ccf1To17.s:76     .text:000000000000006c .L0 
     /tmp/ccf1To17.s:505    .text:00000000000001b4 .L0 
     /tmp/ccf1To17.s:1062   .text:0000000000000330 .L0 
     /tmp/ccf1To17.s:1085   .text:0000000000000350 .L0 
     /tmp/ccf1To17.s:1147   .text:0000000000000370 .L0 
     /tmp/ccf1To17.s:1180   .text:0000000000000398 .L0 
     /tmp/ccf1To17.s:1187   .text:00000000000003ac .L0 
     /tmp/ccf1To17.s:1242   .text:00000000000003e0 .L0 
     /tmp/ccf1To17.s:1291   .text:0000000000000408 .L0 
     /tmp/ccf1To17.s:1304   .text:0000000000000424 .L0 
     /tmp/ccf1To17.s:1334   .text:0000000000000448 .L0 
     /tmp/ccf1To17.s:1350   .text:0000000000000464 .L0 
     /tmp/ccf1To17.s:1356   .text:0000000000000474 .L0 
     /tmp/ccf1To17.s:18     .text:000000000000000c .L7
     /tmp/ccf1To17.s:16     .text:0000000000000008 .L4
     /tmp/ccf1To17.s:226    .text:000000000000012c .L34
     /tmp/ccf1To17.s:1139   .text:0000000000000370 .L35
     /tmp/ccf1To17.s:608    .text:00000000000001fc .L10
     /tmp/ccf1To17.s:1319   .text:0000000000000448 .L31
     /tmp/ccf1To17.s:530    .text:00000000000001d0 .L36
     /tmp/ccf1To17.s:630    .text:000000000000021c .L37
     /tmp/ccf1To17.s:672    .text:0000000000000234 .L38
     /tmp/ccf1To17.s:751    .text:000000000000027c .L39
     /tmp/ccf1To17.s:1121   .text:0000000000000368 .L32
GAS LISTING /tmp/ccf1To17.s 			page 47


     /tmp/ccf1To17.s:796    .text:000000000000029c .L40
     /tmp/ccf1To17.s:850    .text:00000000000002b8 .L41
     /tmp/ccf1To17.s:905    .text:00000000000002e8 .L42
     /tmp/ccf1To17.s:954    .text:0000000000000300 .L43
     /tmp/ccf1To17.s:1005   .text:0000000000000318 .L44
     /tmp/ccf1To17.s:1058   .text:0000000000000330 .L45
     /tmp/ccf1To17.s:1070   .text:0000000000000348 .L46
     /tmp/ccf1To17.s:565    .text:00000000000001e8 .L13
     /tmp/ccf1To17.s:786    .text:0000000000000294 .L17
     /tmp/ccf1To17.s:872    .text:00000000000002d8 .L20
     /tmp/ccf1To17.s:1160   .text:0000000000000390 .L28
     /tmp/ccf1To17.s:1280   .text:0000000000000408 .L29
     /tmp/ccf1To17.s:212    .text:000000000000011c .L30
     /tmp/ccf1To17.s:3733   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccf1To17.s:5973   .debug_str:0000000000000a22 .LASF205
     /tmp/ccf1To17.s:6039   .debug_str:0000000000000cc9 .LASF206
     /tmp/ccf1To17.s:5741   .debug_str:000000000000030d .LASF207
     /tmp/ccf1To17.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccf1To17.s:1429   .text:00000000000004bc .Letext0
     /tmp/ccf1To17.s:5639   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccf1To17.s:5769   .debug_str:00000000000003ff .LASF0
     /tmp/ccf1To17.s:5799   .debug_str:0000000000000509 .LASF1
     /tmp/ccf1To17.s:5905   .debug_str:0000000000000837 .LASF2
     /tmp/ccf1To17.s:5915   .debug_str:000000000000088d .LASF4
     /tmp/ccf1To17.s:5777   .debug_str:0000000000000435 .LASF3
     /tmp/ccf1To17.s:5649   .debug_str:000000000000002d .LASF5
     /tmp/ccf1To17.s:5873   .debug_str:0000000000000739 .LASF6
     /tmp/ccf1To17.s:5861   .debug_str:00000000000006d2 .LASF7
     /tmp/ccf1To17.s:5789   .debug_str:00000000000004b5 .LASF8
     /tmp/ccf1To17.s:5739   .debug_str:00000000000002fd .LASF9
     /tmp/ccf1To17.s:5745   .debug_str:0000000000000347 .LASF10
     /tmp/ccf1To17.s:5673   .debug_str:00000000000000d4 .LASF11
     /tmp/ccf1To17.s:5725   .debug_str:0000000000000278 .LASF12
     /tmp/ccf1To17.s:5685   .debug_str:000000000000013a .LASF13
     /tmp/ccf1To17.s:5671   .debug_str:00000000000000c4 .LASF14
     /tmp/ccf1To17.s:5949   .debug_str:000000000000099a .LASF15
     /tmp/ccf1To17.s:5713   .debug_str:0000000000000215 .LASF16
     /tmp/ccf1To17.s:5935   .debug_str:000000000000092a .LASF17
     /tmp/ccf1To17.s:6019   .debug_str:0000000000000c39 .LASF18
     /tmp/ccf1To17.s:5657   .debug_str:0000000000000068 .LASF42
     /tmp/ccf1To17.s:5959   .debug_str:00000000000009ca .LASF85
     /tmp/ccf1To17.s:5951   .debug_str:00000000000009a6 .LASF19
     /tmp/ccf1To17.s:5795   .debug_str:00000000000004f4 .LASF21
     /tmp/ccf1To17.s:5961   .debug_str:00000000000009d2 .LASF23
     /tmp/ccf1To17.s:5943   .debug_str:000000000000095e .LASF25
     /tmp/ccf1To17.s:5661   .debug_str:0000000000000075 .LASF20
     /tmp/ccf1To17.s:6011   .debug_str:0000000000000be5 .LASF22
     /tmp/ccf1To17.s:5803   .debug_str:0000000000000522 .LASF24
     /tmp/ccf1To17.s:5669   .debug_str:00000000000000a7 .LASF26
     /tmp/ccf1To17.s:6005   .debug_str:0000000000000bab .LASF27
     /tmp/ccf1To17.s:5963   .debug_str:00000000000009dd .LASF28
     /tmp/ccf1To17.s:5889   .debug_str:00000000000007a6 .LASF29
     /tmp/ccf1To17.s:5709   .debug_str:00000000000001f0 .LASF30
     /tmp/ccf1To17.s:5721   .debug_str:0000000000000261 .LASF31
     /tmp/ccf1To17.s:5863   .debug_str:00000000000006e5 .LASF32
     /tmp/ccf1To17.s:5947   .debug_str:000000000000098d .LASF33
     /tmp/ccf1To17.s:5707   .debug_str:00000000000001d0 .LASF34
GAS LISTING /tmp/ccf1To17.s 			page 48


     /tmp/ccf1To17.s:5857   .debug_str:00000000000006c1 .LASF178
     /tmp/ccf1To17.s:5735   .debug_str:00000000000002c7 .LASF35
     /tmp/ccf1To17.s:5801   .debug_str:000000000000051c .LASF36
     /tmp/ccf1To17.s:5839   .debug_str:000000000000061c .LASF38
     /tmp/ccf1To17.s:5971   .debug_str:0000000000000a1a .LASF126
     /tmp/ccf1To17.s:5879   .debug_str:000000000000074e .LASF37
     /tmp/ccf1To17.s:5753   .debug_str:0000000000000372 .LASF39
     /tmp/ccf1To17.s:5701   .debug_str:00000000000001bc .LASF40
     /tmp/ccf1To17.s:5693   .debug_str:0000000000000175 .LASF41
     /tmp/ccf1To17.s:5761   .debug_str:00000000000003ba .LASF43
     /tmp/ccf1To17.s:6049   .debug_str:0000000000000cfd .LASF44
     /tmp/ccf1To17.s:5645   .debug_str:0000000000000018 .LASF45
     /tmp/ccf1To17.s:6057   .debug_str:0000000000000d56 .LASF46
     /tmp/ccf1To17.s:5989   .debug_str:0000000000000b26 .LASF47
     /tmp/ccf1To17.s:5983   .debug_str:0000000000000b0c .LASF48
     /tmp/ccf1To17.s:5933   .debug_str:0000000000000921 .LASF49
     /tmp/ccf1To17.s:6003   .debug_str:0000000000000ba6 .LASF50
     /tmp/ccf1To17.s:5849   .debug_str:0000000000000673 .LASF51
     /tmp/ccf1To17.s:5957   .debug_str:00000000000009c1 .LASF52
     /tmp/ccf1To17.s:5823   .debug_str:00000000000005b4 .LASF53
     /tmp/ccf1To17.s:5665   .debug_str:000000000000008c .LASF173
     /tmp/ccf1To17.s:5891   .debug_str:00000000000007b6 .LASF175
     /tmp/ccf1To17.s:5691   .debug_str:0000000000000167 .LASF83
     /tmp/ccf1To17.s:5779   .debug_str:0000000000000447 .LASF91
     /tmp/ccf1To17.s:5955   .debug_str:00000000000009b6 .LASF54
     /tmp/ccf1To17.s:6031   .debug_str:0000000000000c77 .LASF55
     /tmp/ccf1To17.s:5653   .debug_str:000000000000003f .LASF56
     /tmp/ccf1To17.s:5781   .debug_str:0000000000000473 .LASF57
     /tmp/ccf1To17.s:5921   .debug_str:00000000000008ae .LASF81
     /tmp/ccf1To17.s:5913   .debug_str:0000000000000882 .LASF58
     /tmp/ccf1To17.s:6043   .debug_str:0000000000000ce3 .LASF59
     /tmp/ccf1To17.s:6045   .debug_str:0000000000000cee .LASF60
     /tmp/ccf1To17.s:5965   .debug_str:00000000000009f4 .LASF61
     /tmp/ccf1To17.s:5931   .debug_str:0000000000000917 .LASF62
     /tmp/ccf1To17.s:5791   .debug_str:00000000000004c8 .LASF63
     /tmp/ccf1To17.s:5711   .debug_str:000000000000020f .LASF64
     /tmp/ccf1To17.s:5737   .debug_str:00000000000002f0 .LASF65
     /tmp/ccf1To17.s:5703   .debug_str:00000000000001c5 .LASF66
     /tmp/ccf1To17.s:5833   .debug_str:00000000000005ee .LASF67
     /tmp/ccf1To17.s:5953   .debug_str:00000000000009af .LASF68
     /tmp/ccf1To17.s:5937   .debug_str:0000000000000940 .LASF69
     /tmp/ccf1To17.s:5759   .debug_str:00000000000003b4 .LASF70
     /tmp/ccf1To17.s:5981   .debug_str:0000000000000afb .LASF71
     /tmp/ccf1To17.s:6041   .debug_str:0000000000000cd7 .LASF72
     /tmp/ccf1To17.s:5845   .debug_str:000000000000064f .LASF73
     /tmp/ccf1To17.s:5667   .debug_str:000000000000009a .LASF74
     /tmp/ccf1To17.s:5767   .debug_str:00000000000003f9 .LASF75
     /tmp/ccf1To17.s:5723   .debug_str:0000000000000267 .LASF76
     /tmp/ccf1To17.s:6053   .debug_str:0000000000000d2a .LASF77
     /tmp/ccf1To17.s:6023   .debug_str:0000000000000c4c .LASF78
     /tmp/ccf1To17.s:5897   .debug_str:0000000000000807 .LASF79
     /tmp/ccf1To17.s:5785   .debug_str:00000000000004a3 .LASF80
     /tmp/ccf1To17.s:5929   .debug_str:0000000000000906 .LASF82
     /tmp/ccf1To17.s:6051   .debug_str:0000000000000d16 .LASF208
     /tmp/ccf1To17.s:5783   .debug_str:0000000000000487 .LASF209
     /tmp/ccf1To17.s:6067   .debug_str:0000000000000da9 .LASF84
     /tmp/ccf1To17.s:5689   .debug_str:0000000000000162 .LASF86
GAS LISTING /tmp/ccf1To17.s 			page 49


     /tmp/ccf1To17.s:5797   .debug_str:0000000000000504 .LASF87
     /tmp/ccf1To17.s:5675   .debug_str:00000000000000e3 .LASF88
     /tmp/ccf1To17.s:5985   .debug_str:0000000000000b16 .LASF89
     /tmp/ccf1To17.s:6055   .debug_str:0000000000000d32 .LASF90
     /tmp/ccf1To17.s:6033   .debug_str:0000000000000c91 .LASF92
     /tmp/ccf1To17.s:5941   .debug_str:0000000000000959 .LASF93
     /tmp/ccf1To17.s:5813   .debug_str:000000000000055e .LASF94
     /tmp/ccf1To17.s:5831   .debug_str:00000000000005e9 .LASF95
     /tmp/ccf1To17.s:6013   .debug_str:0000000000000c00 .LASF96
     /tmp/ccf1To17.s:5883   .debug_str:000000000000076e .LASF97
     /tmp/ccf1To17.s:5907   .debug_str:0000000000000845 .LASF210
     /tmp/ccf1To17.s:5755   .debug_str:000000000000038e .LASF211
     /tmp/ccf1To17.s:5899   .debug_str:000000000000081a .LASF98
     /tmp/ccf1To17.s:6059   .debug_str:0000000000000d5c .LASF99
     /tmp/ccf1To17.s:5811   .debug_str:0000000000000556 .LASF100
     /tmp/ccf1To17.s:5867   .debug_str:00000000000006fe .LASF101
     /tmp/ccf1To17.s:5859   .debug_str:00000000000006c6 .LASF102
     /tmp/ccf1To17.s:5821   .debug_str:0000000000000592 .LASF103
     /tmp/ccf1To17.s:6069   .debug_str:0000000000000db7 .LASF104
     /tmp/ccf1To17.s:5895   .debug_str:00000000000007e8 .LASF105
     /tmp/ccf1To17.s:5925   .debug_str:00000000000008d0 .LASF106
     /tmp/ccf1To17.s:5729   .debug_str:000000000000028d .LASF107
     /tmp/ccf1To17.s:5887   .debug_str:000000000000079d .LASF108
     /tmp/ccf1To17.s:5679   .debug_str:00000000000000fb .LASF109
     /tmp/ccf1To17.s:5997   .debug_str:0000000000000b7e .LASF110
     /tmp/ccf1To17.s:5993   .debug_str:0000000000000b43 .LASF111
     /tmp/ccf1To17.s:5835   .debug_str:00000000000005fe .LASF112
     /tmp/ccf1To17.s:6009   .debug_str:0000000000000bb9 .LASF113
     /tmp/ccf1To17.s:6001   .debug_str:0000000000000b99 .LASF114
     /tmp/ccf1To17.s:5655   .debug_str:0000000000000045 .LASF115
     /tmp/ccf1To17.s:5817   .debug_str:000000000000056e .LASF116
     /tmp/ccf1To17.s:5771   .debug_str:000000000000040c .LASF117
     /tmp/ccf1To17.s:5841   .debug_str:0000000000000630 .LASF118
     /tmp/ccf1To17.s:5751   .debug_str:000000000000036d .LASF119
     /tmp/ccf1To17.s:5911   .debug_str:0000000000000867 .LASF120
     /tmp/ccf1To17.s:5829   .debug_str:00000000000005e2 .LASF121
     /tmp/ccf1To17.s:6015   .debug_str:0000000000000c17 .LASF122
     /tmp/ccf1To17.s:5825   .debug_str:00000000000005be .LASF123
     /tmp/ccf1To17.s:5979   .debug_str:0000000000000af2 .LASF124
     /tmp/ccf1To17.s:5819   .debug_str:0000000000000573 .LASF125
     /tmp/ccf1To17.s:5787   .debug_str:00000000000004ad .LASF127
     /tmp/ccf1To17.s:5977   .debug_str:0000000000000aeb .LASF128
     /tmp/ccf1To17.s:5641   .debug_str:0000000000000000 .LASF129
     /tmp/ccf1To17.s:5967   .debug_str:00000000000009f9 .LASF130
     /tmp/ccf1To17.s:6025   .debug_str:0000000000000c5f .LASF131
     /tmp/ccf1To17.s:5683   .debug_str:000000000000012f .LASF212
     /tmp/ccf1To17.s:5747   .debug_str:0000000000000355 .LASF132
     /tmp/ccf1To17.s:5719   .debug_str:0000000000000258 .LASF133
     /tmp/ccf1To17.s:6047   .debug_str:0000000000000cf4 .LASF134
     /tmp/ccf1To17.s:5757   .debug_str:00000000000003a9 .LASF135
     /tmp/ccf1To17.s:5765   .debug_str:00000000000003e1 .LASF136
     /tmp/ccf1To17.s:5999   .debug_str:0000000000000b90 .LASF137
     /tmp/ccf1To17.s:5991   .debug_str:0000000000000b2e .LASF141
     /tmp/ccf1To17.s:5901   .debug_str:0000000000000823 .LASF138
     /tmp/ccf1To17.s:5851   .debug_str:000000000000067b .LASF139
     /tmp/ccf1To17.s:5877   .debug_str:0000000000000747 .LASF140
     /tmp/ccf1To17.s:5881   .debug_str:000000000000075b .LASF142
GAS LISTING /tmp/ccf1To17.s 			page 50


     /tmp/ccf1To17.s:5843   .debug_str:0000000000000648 .LASF143
     /tmp/ccf1To17.s:5793   .debug_str:00000000000004e1 .LASF144
     /tmp/ccf1To17.s:6037   .debug_str:0000000000000cc1 .LASF145
     /tmp/ccf1To17.s:5945   .debug_str:0000000000000979 .LASF146
     /tmp/ccf1To17.s:5837   .debug_str:0000000000000614 .LASF147
     /tmp/ccf1To17.s:5731   .debug_str:00000000000002ae .LASF148
     /tmp/ccf1To17.s:5809   .debug_str:000000000000054e .LASF149
     /tmp/ccf1To17.s:5885   .debug_str:0000000000000789 .LASF150
     /tmp/ccf1To17.s:6065   .debug_str:0000000000000da1 .LASF151
     /tmp/ccf1To17.s:5775   .debug_str:0000000000000421 .LASF152
     /tmp/ccf1To17.s:5695   .debug_str:000000000000018c .LASF153
     /tmp/ccf1To17.s:5917   .debug_str:0000000000000894 .LASF154
     /tmp/ccf1To17.s:5919   .debug_str:00000000000008a7 .LASF155
     /tmp/ccf1To17.s:5677   .debug_str:00000000000000e8 .LASF156
     /tmp/ccf1To17.s:5705   .debug_str:00000000000001ca .LASF157
     /tmp/ccf1To17.s:5763   .debug_str:00000000000003cf .LASF158
     /tmp/ccf1To17.s:5773   .debug_str:000000000000041b .LASF159
     /tmp/ccf1To17.s:5697   .debug_str:0000000000000193 .LASF160
     /tmp/ccf1To17.s:5651   .debug_str:0000000000000034 .LASF161
     /tmp/ccf1To17.s:5909   .debug_str:000000000000084f .LASF162
     /tmp/ccf1To17.s:5903   .debug_str:000000000000082c .LASF163
     /tmp/ccf1To17.s:6061   .debug_str:0000000000000d7d .LASF164
     /tmp/ccf1To17.s:6027   .debug_str:0000000000000c65 .LASF165
     /tmp/ccf1To17.s:5681   .debug_str:0000000000000119 .LASF166
     /tmp/ccf1To17.s:6021   .debug_str:0000000000000c42 .LASF167
     /tmp/ccf1To17.s:5827   .debug_str:00000000000005cc .LASF168
     /tmp/ccf1To17.s:5995   .debug_str:0000000000000b6f .LASF169
     /tmp/ccf1To17.s:5743   .debug_str:000000000000032b .LASF170
     /tmp/ccf1To17.s:5727   .debug_str:0000000000000287 .LASF171
     /tmp/ccf1To17.s:5987   .debug_str:0000000000000b20 .LASF172
     /tmp/ccf1To17.s:5893   .debug_str:00000000000007d3 .LASF174
     /tmp/ccf1To17.s:5715   .debug_str:000000000000022b .LASF176
     /tmp/ccf1To17.s:5807   .debug_str:000000000000053e .LASF177
     /tmp/ccf1To17.s:5969   .debug_str:00000000000009fe .LASF179
     /tmp/ccf1To17.s:5923   .debug_str:00000000000008bf .LASF180
     /tmp/ccf1To17.s:6035   .debug_str:0000000000000cb0 .LASF181
     /tmp/ccf1To17.s:5805   .debug_str:000000000000052f .LASF182
     /tmp/ccf1To17.s:5927   .debug_str:00000000000008db .LASF183
     /tmp/ccf1To17.s:1374   .text:0000000000000488 .LFB57
     /tmp/ccf1To17.s:1400   .text:00000000000004bc .LFE57
     /tmp/ccf1To17.s:1390   .text:00000000000004ac .LVL89
     /tmp/ccf1To17.s:5853   .debug_str:0000000000000690 .LASF184
     /tmp/ccf1To17.s:9      .text:0000000000000000 .LFB56
     /tmp/ccf1To17.s:94     .text:0000000000000090 .LFE56
     /tmp/ccf1To17.s:5749   .debug_str:000000000000035e .LASF185
     /tmp/ccf1To17.s:5067   .debug_loc:0000000000000000 .LLST0
     /tmp/ccf1To17.s:5663   .debug_str:0000000000000081 .LASF186
     /tmp/ccf1To17.s:5081   .debug_loc:0000000000000039 .LLST1
     /tmp/ccf1To17.s:35     .text:000000000000002c .LBB68
     /tmp/ccf1To17.s:46     .text:000000000000003c .LBE68
     /tmp/ccf1To17.s:5095   .debug_loc:0000000000000072 .LLST2
     /tmp/ccf1To17.s:47     .text:000000000000003c .LBB71
     /tmp/ccf1To17.s:65     .text:000000000000005c .LBE71
     /tmp/ccf1To17.s:5104   .debug_loc:000000000000009e .LLST3
     /tmp/ccf1To17.s:62     .text:000000000000005c .LVL5
     /tmp/ccf1To17.s:66     .text:000000000000005c .LBB74
     /tmp/ccf1To17.s:81     .text:000000000000007c .LBE74
GAS LISTING /tmp/ccf1To17.s 			page 51


     /tmp/ccf1To17.s:5113   .debug_loc:00000000000000ca .LLST4
     /tmp/ccf1To17.s:78     .text:000000000000007c .LVL6
     /tmp/ccf1To17.s:5733   .debug_str:00000000000002c2 .LASF187
     /tmp/ccf1To17.s:5699   .debug_str:00000000000001a5 .LASF197
     /tmp/ccf1To17.s:135    .text:00000000000000b0 .LFB50
     /tmp/ccf1To17.s:1369   .text:0000000000000488 .LFE50
     /tmp/ccf1To17.s:5939   .debug_str:0000000000000952 .LASF188
     /tmp/ccf1To17.s:5122   .debug_loc:00000000000000f6 .LLST5
     /tmp/ccf1To17.s:5221   .debug_loc:0000000000000265 .LLST6
     /tmp/ccf1To17.s:5569   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccf1To17.s:5975   .debug_str:0000000000000ae6 .LASF189
     /tmp/ccf1To17.s:6029   .debug_str:0000000000000c6f .LASF190
     /tmp/ccf1To17.s:6007   .debug_str:0000000000000bb4 .LASF191
     /tmp/ccf1To17.s:5247   .debug_loc:00000000000002d7 .LLST16
     /tmp/ccf1To17.s:534    .text:00000000000001d0 .LBB309
     /tmp/ccf1To17.s:558    .text:00000000000001e4 .LBE309
     /tmp/ccf1To17.s:5302   .debug_loc:00000000000003de .LLST37
     /tmp/ccf1To17.s:5317   .debug_loc:0000000000000418 .LLST38
     /tmp/ccf1To17.s:550    .text:00000000000001e0 .LVL20
     /tmp/ccf1To17.s:636    .text:000000000000021c .LBB289
     /tmp/ccf1To17.s:658    .text:000000000000022c .LBE289
     /tmp/ccf1To17.s:5324   .debug_loc:000000000000043b .LLST35
     /tmp/ccf1To17.s:5331   .debug_loc:000000000000045e .LLST36
     /tmp/ccf1To17.s:650    .text:0000000000000228 .LVL29
     /tmp/ccf1To17.s:674    .text:0000000000000234 .LBB271
     /tmp/ccf1To17.s:735    .text:0000000000000274 .LBE271
     /tmp/ccf1To17.s:5875   .debug_str:0000000000000740 .LASF192
     /tmp/ccf1To17.s:5338   .debug_loc:0000000000000481 .LLST30
     /tmp/ccf1To17.s:5345   .debug_loc:00000000000004a4 .LLST31
     /tmp/ccf1To17.s:5352   .debug_loc:00000000000004c7 .LLST32
     /tmp/ccf1To17.s:5359   .debug_loc:00000000000004ea .LLST33
     /tmp/ccf1To17.s:5366   .debug_loc:000000000000050d .LLST34
     /tmp/ccf1To17.s:719    .text:0000000000000258 .LVL36
     /tmp/ccf1To17.s:727    .text:0000000000000270 .LVL37
     /tmp/ccf1To17.s:5373   .debug_loc:0000000000000530 .LLST29
     /tmp/ccf1To17.s:757    .text:0000000000000284 .LVL40
     /tmp/ccf1To17.s:800    .text:000000000000029c .LBB227
     /tmp/ccf1To17.s:828    .text:00000000000002b0 .LBE227
     /tmp/ccf1To17.s:5384   .debug_loc:0000000000000566 .LLST26
     /tmp/ccf1To17.s:5659   .debug_str:0000000000000070 .LASF193
     /tmp/ccf1To17.s:5391   .debug_loc:0000000000000589 .LLST27
     /tmp/ccf1To17.s:5398   .debug_loc:00000000000005ac .LLST28
     /tmp/ccf1To17.s:820    .text:00000000000002ac .LVL46
     /tmp/ccf1To17.s:852    .text:00000000000002b8 .LBB216
     /tmp/ccf1To17.s:882    .text:00000000000002e0 .LBE216
     /tmp/ccf1To17.s:5405   .debug_loc:00000000000005cf .LLST24
     /tmp/ccf1To17.s:5412   .debug_loc:00000000000005f2 .LLST25
     /tmp/ccf1To17.s:868    .text:00000000000002cc .LVL50
     /tmp/ccf1To17.s:871    .text:00000000000002d8 .LVL51
     /tmp/ccf1To17.s:907    .text:00000000000002e8 .LBB207
     /tmp/ccf1To17.s:928    .text:00000000000002f8 .LBE207
     /tmp/ccf1To17.s:5420   .debug_loc:0000000000000616 .LLST22
     /tmp/ccf1To17.s:5427   .debug_loc:0000000000000639 .LLST23
     /tmp/ccf1To17.s:920    .text:00000000000002f4 .LVL54
     /tmp/ccf1To17.s:956    .text:0000000000000300 .LBB200
     /tmp/ccf1To17.s:977    .text:0000000000000310 .LBE200
     /tmp/ccf1To17.s:5434   .debug_loc:000000000000065c .LLST20
GAS LISTING /tmp/ccf1To17.s 			page 52


     /tmp/ccf1To17.s:5441   .debug_loc:000000000000067f .LLST21
     /tmp/ccf1To17.s:969    .text:000000000000030c .LVL58
     /tmp/ccf1To17.s:1007   .text:0000000000000318 .LBB195
     /tmp/ccf1To17.s:1028   .text:0000000000000328 .LBE195
     /tmp/ccf1To17.s:5865   .debug_str:00000000000006f9 .LASF194
     /tmp/ccf1To17.s:5448   .debug_loc:00000000000006a2 .LLST18
     /tmp/ccf1To17.s:5455   .debug_loc:00000000000006c5 .LLST19
     /tmp/ccf1To17.s:1020   .text:0000000000000324 .LVL62
     /tmp/ccf1To17.s:1072   .text:0000000000000348 .LBB191
     /tmp/ccf1To17.s:1088   .text:0000000000000360 .LBE191
     /tmp/ccf1To17.s:5462   .debug_loc:00000000000006e8 .LLST17
     /tmp/ccf1To17.s:1087   .text:0000000000000360 .LVL69
     /tmp/ccf1To17.s:230    .text:000000000000012c .LBB175
     /tmp/ccf1To17.s:245    .text:0000000000000138 .LBE175
     /tmp/ccf1To17.s:251    .text:0000000000000140 .LBB177
     /tmp/ccf1To17.s:266    .text:000000000000014c .LBE177
     /tmp/ccf1To17.s:572    .text:00000000000001ec .LBB332
     /tmp/ccf1To17.s:583    .text:00000000000001f0 .LBE332
     /tmp/ccf1To17.s:5469   .debug_loc:000000000000070b .LLST39
     /tmp/ccf1To17.s:588    .text:00000000000001f4 .LBB334
     /tmp/ccf1To17.s:599    .text:00000000000001f8 .LBE334
     /tmp/ccf1To17.s:5476   .debug_loc:000000000000072e .LLST40
     /tmp/ccf1To17.s:511    .text:00000000000001c8 .LVL16
     /tmp/ccf1To17.s:1064   .text:0000000000000340 .LVL65
     /tmp/ccf1To17.s:1201   .text:00000000000003c0 .LBB162
     /tmp/ccf1To17.s:1283   .text:0000000000000408 .LBE162
     /tmp/ccf1To17.s:1203   .text:00000000000003c0 .LBB163
     /tmp/ccf1To17.s:1218   .text:00000000000003cc .LBE163
     /tmp/ccf1To17.s:1222   .text:00000000000003d0 .LBB165
     /tmp/ccf1To17.s:1237   .text:00000000000003dc .LBE165
     /tmp/ccf1To17.s:1252   .text:00000000000003f8 .LBB167
     /tmp/ccf1To17.s:1263   .text:00000000000003fc .LBE167
     /tmp/ccf1To17.s:5483   .debug_loc:0000000000000751 .LLST14
     /tmp/ccf1To17.s:1268   .text:0000000000000400 .LBB169
     /tmp/ccf1To17.s:1282   .text:0000000000000408 .LBE169
     /tmp/ccf1To17.s:5490   .debug_loc:0000000000000774 .LLST15
     /tmp/ccf1To17.s:1247   .text:00000000000003f4 .LVL78
     /tmp/ccf1To17.s:5847   .debug_str:0000000000000667 .LASF195
     /tmp/ccf1To17.s:5497   .debug_loc:0000000000000797 .LLST7
     /tmp/ccf1To17.s:1340   .text:0000000000000460 .LBB146
     /tmp/ccf1To17.s:1359   .text:0000000000000484 .LBE146
     /tmp/ccf1To17.s:5504   .debug_loc:00000000000007ba .LLST8
     /tmp/ccf1To17.s:1358   .text:0000000000000484 .LVL88
     /tmp/ccf1To17.s:204    .text:0000000000000110 .LVL8
     /tmp/ccf1To17.s:218    .text:0000000000000128 .LVL11
     /tmp/ccf1To17.s:155    .text:00000000000000d0 .LBB138
     /tmp/ccf1To17.s:172    .text:00000000000000dc .LBE138
     /tmp/ccf1To17.s:1144   .text:0000000000000370 .LBB150
     /tmp/ccf1To17.s:5512   .debug_loc:00000000000007de .LLST9
     /tmp/ccf1To17.s:1287   .text:0000000000000408 .LBB152
     /tmp/ccf1To17.s:1323   .text:0000000000000448 .LBE152
     /tmp/ccf1To17.s:5527   .debug_loc:0000000000000826 .LLST10
     /tmp/ccf1To17.s:1309   .text:0000000000000438 .LBB154
     /tmp/ccf1To17.s:1321   .text:0000000000000448 .LBE154
     /tmp/ccf1To17.s:5534   .debug_loc:0000000000000849 .LLST11
     /tmp/ccf1To17.s:1315   .text:0000000000000444 .LVL85
     /tmp/ccf1To17.s:1308   .text:0000000000000438 .LVL84
GAS LISTING /tmp/ccf1To17.s 			page 53


     /tmp/ccf1To17.s:1165   .text:0000000000000390 .LBB157
     /tmp/ccf1To17.s:1177   .text:0000000000000398 .LBE157
     /tmp/ccf1To17.s:5541   .debug_loc:000000000000086c .LLST12
     /tmp/ccf1To17.s:1190   .text:00000000000003b8 .LBB160
     /tmp/ccf1To17.s:1198   .text:00000000000003bc .LBE160
     /tmp/ccf1To17.s:5549   .debug_loc:0000000000000890 .LLST13
     /tmp/ccf1To17.s:100    .text:0000000000000090 .LFB49
     /tmp/ccf1To17.s:129    .text:00000000000000b0 .LFE49
     /tmp/ccf1To17.s:6017   .debug_str:0000000000000c34 .LASF196
     /tmp/ccf1To17.s:5687   .debug_str:000000000000014a .LASF198
     /tmp/ccf1To17.s:6063   .debug_str:0000000000000d95 .LASF199
     /tmp/ccf1To17.s:5717   .debug_str:000000000000024d .LASF200
     /tmp/ccf1To17.s:5643   .debug_str:0000000000000006 .LASF201
     /tmp/ccf1To17.s:5871   .debug_str:000000000000072c .LASF202
     /tmp/ccf1To17.s:5855   .debug_str:00000000000006ba .LASF213
     /tmp/ccf1To17.s:5647   .debug_str:000000000000001d .LASF214
     /tmp/ccf1To17.s:5815   .debug_str:0000000000000563 .LASF203
     /tmp/ccf1To17.s:5869   .debug_str:000000000000071e .LASF204
     /tmp/ccf1To17.s:13     .text:0000000000000000 .LVL0
     /tmp/ccf1To17.s:60     .text:0000000000000054 .LVL4
     /tmp/ccf1To17.s:58     .text:000000000000004c .LVL3
     /tmp/ccf1To17.s:34     .text:000000000000002c .LVL1
     /tmp/ccf1To17.s:43     .text:000000000000003c .LVL2
     /tmp/ccf1To17.s:170    .text:00000000000000dc .LVL7
     /tmp/ccf1To17.s:225    .text:000000000000012c .LVL12
     /tmp/ccf1To17.s:281    .text:0000000000000158 .LVL14
     /tmp/ccf1To17.s:529    .text:00000000000001d0 .LVL17
     /tmp/ccf1To17.s:629    .text:000000000000021c .LVL27
     /tmp/ccf1To17.s:671    .text:0000000000000234 .LVL31
     /tmp/ccf1To17.s:750    .text:000000000000027c .LVL39
     /tmp/ccf1To17.s:795    .text:000000000000029c .LVL43
     /tmp/ccf1To17.s:849    .text:00000000000002b8 .LVL48
     /tmp/ccf1To17.s:904    .text:00000000000002e8 .LVL52
     /tmp/ccf1To17.s:953    .text:0000000000000300 .LVL56
     /tmp/ccf1To17.s:1004   .text:0000000000000318 .LVL60
     /tmp/ccf1To17.s:1057   .text:0000000000000330 .LVL64
     /tmp/ccf1To17.s:1069   .text:0000000000000348 .LVL67
     /tmp/ccf1To17.s:1120   .text:0000000000000368 .LVL70
     /tmp/ccf1To17.s:1138   .text:0000000000000370 .LVL71
     /tmp/ccf1To17.s:1148   .text:0000000000000378 .LVL72
     /tmp/ccf1To17.s:1156   .text:0000000000000388 .LVL73
     /tmp/ccf1To17.s:564    .text:00000000000001e8 .LVL21
     /tmp/ccf1To17.s:606    .text:00000000000001fc .LVL26
     /tmp/ccf1To17.s:1067   .text:0000000000000344 .LVL66
     /tmp/ccf1To17.s:276    .text:0000000000000154 .LVL13
     /tmp/ccf1To17.s:506    .text:00000000000001bc .LVL15
     /tmp/ccf1To17.s:542    .text:00000000000001d4 .LVL18
     /tmp/ccf1To17.s:548    .text:00000000000001d8 .LVL19
     /tmp/ccf1To17.s:665    .text:0000000000000230 .LVL30
     /tmp/ccf1To17.s:645    .text:0000000000000220 .LVL28
     /tmp/ccf1To17.s:685    .text:0000000000000238 .LVL32
     /tmp/ccf1To17.s:691    .text:000000000000023c .LVL33
     /tmp/ccf1To17.s:707    .text:0000000000000248 .LVL34
     /tmp/ccf1To17.s:713    .text:000000000000024c .LVL35
     /tmp/ccf1To17.s:743    .text:0000000000000278 .LVL38
     /tmp/ccf1To17.s:776    .text:0000000000000290 .LVL41
     /tmp/ccf1To17.s:785    .text:0000000000000294 .LVL42
GAS LISTING /tmp/ccf1To17.s 			page 54


     /tmp/ccf1To17.s:809    .text:00000000000002a0 .LVL44
     /tmp/ccf1To17.s:815    .text:00000000000002a4 .LVL45
     /tmp/ccf1To17.s:839    .text:00000000000002b4 .LVL47
     /tmp/ccf1To17.s:860    .text:00000000000002bc .LVL49
     /tmp/ccf1To17.s:915    .text:00000000000002ec .LVL53
     /tmp/ccf1To17.s:941    .text:00000000000002fc .LVL55
     /tmp/ccf1To17.s:964    .text:0000000000000304 .LVL57
     /tmp/ccf1To17.s:991    .text:0000000000000314 .LVL59
     /tmp/ccf1To17.s:1015   .text:000000000000031c .LVL61
     /tmp/ccf1To17.s:1043   .text:000000000000032c .LVL63
     /tmp/ccf1To17.s:1080   .text:000000000000034c .LVL68
     /tmp/ccf1To17.s:571    .text:00000000000001ec .LVL22
     /tmp/ccf1To17.s:580    .text:00000000000001f0 .LVL23
     /tmp/ccf1To17.s:587    .text:00000000000001f4 .LVL24
     /tmp/ccf1To17.s:596    .text:00000000000001f8 .LVL25
     /tmp/ccf1To17.s:1251   .text:00000000000003f8 .LVL79
     /tmp/ccf1To17.s:1260   .text:00000000000003fc .LVL80
     /tmp/ccf1To17.s:1267   .text:0000000000000400 .LVL81
     /tmp/ccf1To17.s:1279   .text:0000000000000408 .LVL82
     /tmp/ccf1To17.s:206    .text:0000000000000114 .LVL9
     /tmp/ccf1To17.s:211    .text:000000000000011c .LVL10
     /tmp/ccf1To17.s:1352   .text:0000000000000470 .LVL87
     /tmp/ccf1To17.s:1161   .text:0000000000000390 .LVL74
     /tmp/ccf1To17.s:1318   .text:0000000000000448 .LVL86
     /tmp/ccf1To17.s:1300   .text:0000000000000420 .LVL83
     /tmp/ccf1To17.s:1174   .text:0000000000000398 .LVL75
     /tmp/ccf1To17.s:1189   .text:00000000000003b8 .LVL76
     /tmp/ccf1To17.s:1196   .text:00000000000003bc .LVL77
     /tmp/ccf1To17.s:1437   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccf1To17.s:199    .text:0000000000000108 .LBB143
     /tmp/ccf1To17.s:219    .text:0000000000000128 .LBE143
     /tmp/ccf1To17.s:1328   .text:0000000000000448 .LBB148
     /tmp/ccf1To17.s:1364   .text:0000000000000488 .LBE148
     /tmp/ccf1To17.s:1163   .text:0000000000000390 .LBE150
     /tmp/ccf1To17.s:1285   .text:0000000000000408 .LBB171
     /tmp/ccf1To17.s:1325   .text:0000000000000448 .LBE171
     /tmp/ccf1To17.s:228    .text:000000000000012c .LBB174
     /tmp/ccf1To17.s:284    .text:000000000000015c .LBE174
     /tmp/ccf1To17.s:288    .text:000000000000015c .LBB346
     /tmp/ccf1To17.s:295    .text:0000000000000164 .LBE346
     /tmp/ccf1To17.s:299    .text:0000000000000164 .LBB347
     /tmp/ccf1To17.s:308    .text:000000000000016c .LBE347
     /tmp/ccf1To17.s:312    .text:000000000000016c .LBB348
     /tmp/ccf1To17.s:323    .text:0000000000000174 .LBE348
     /tmp/ccf1To17.s:327    .text:0000000000000174 .LBB349
     /tmp/ccf1To17.s:340    .text:000000000000017c .LBE349
     /tmp/ccf1To17.s:344    .text:000000000000017c .LBB350
     /tmp/ccf1To17.s:359    .text:0000000000000184 .LBE350
     /tmp/ccf1To17.s:363    .text:0000000000000184 .LBB351
     /tmp/ccf1To17.s:380    .text:000000000000018c .LBE351
     /tmp/ccf1To17.s:384    .text:000000000000018c .LBB352
     /tmp/ccf1To17.s:403    .text:0000000000000194 .LBE352
     /tmp/ccf1To17.s:407    .text:0000000000000194 .LBB353
     /tmp/ccf1To17.s:428    .text:000000000000019c .LBE353
     /tmp/ccf1To17.s:432    .text:000000000000019c .LBB354
     /tmp/ccf1To17.s:455    .text:00000000000001a4 .LBE354
     /tmp/ccf1To17.s:459    .text:00000000000001a4 .LBB355
GAS LISTING /tmp/ccf1To17.s 			page 55


     /tmp/ccf1To17.s:484    .text:00000000000001ac .LBE355
     /tmp/ccf1To17.s:488    .text:00000000000001ac .LBB356
     /tmp/ccf1To17.s:524    .text:00000000000001c8 .LBE356
     /tmp/ccf1To17.s:532    .text:00000000000001d0 .LBB357
     /tmp/ccf1To17.s:560    .text:00000000000001e4 .LBE357
     /tmp/ccf1To17.s:567    .text:00000000000001e8 .LBB358
     /tmp/ccf1To17.s:609    .text:00000000000001fc .LBE358
     /tmp/ccf1To17.s:633    .text:000000000000021c .LBB359
     /tmp/ccf1To17.s:661    .text:000000000000022c .LBE359
     /tmp/ccf1To17.s:667    .text:0000000000000230 .LBB360
     /tmp/ccf1To17.s:739    .text:0000000000000274 .LBE360
     /tmp/ccf1To17.s:745    .text:0000000000000278 .LBB361
     /tmp/ccf1To17.s:772    .text:000000000000028c .LBE361
     /tmp/ccf1To17.s:778    .text:0000000000000290 .LBB362
     /tmp/ccf1To17.s:835    .text:00000000000002b0 .LBE362
     /tmp/ccf1To17.s:841    .text:00000000000002b4 .LBB363
     /tmp/ccf1To17.s:890    .text:00000000000002e0 .LBE363
     /tmp/ccf1To17.s:895    .text:00000000000002e4 .LBB364
     /tmp/ccf1To17.s:937    .text:00000000000002f8 .LBE364
     /tmp/ccf1To17.s:943    .text:00000000000002fc .LBB365
     /tmp/ccf1To17.s:987    .text:0000000000000310 .LBE365
     /tmp/ccf1To17.s:993    .text:0000000000000314 .LBB366
     /tmp/ccf1To17.s:1039   .text:0000000000000328 .LBE366
     /tmp/ccf1To17.s:1045   .text:000000000000032c .LBB367
     /tmp/ccf1To17.s:1101   .text:0000000000000360 .LBE367
     /tmp/ccf1To17.s:1106   .text:0000000000000364 .LBB368
     /tmp/ccf1To17.s:1134   .text:0000000000000368 .LBE368
     /tmp/ccf1To17.s:753    .text:000000000000027c .LBB254
     /tmp/ccf1To17.s:767    .text:000000000000028c .LBE254
     /tmp/ccf1To17.s:783    .text:0000000000000290 .LBB255
     /tmp/ccf1To17.s:797    .text:000000000000029c .LBE255

UNDEFINED SYMBOLS
_ZN4_sem9createSemEPPS_m
plic_claim
plic_complete
_ZN7_thread16timeSliceCounterE
_ZN7_thread8dispatchEv
__mem_alloc
__mem_free
_Z12printIntegerm
_ZN7_thread12createThreadEPPS_PFvvEPvS4_
_ZN7_thread10threadStopEv
_ZN4_semD1Ev
_ZdlPv
_ZN4_sem4waitEv
_ZN4_sem6signalEv
_ZN7_thread5sleepEm
_ZN14KeyboardBuffer4takeEv
_ZN14KeyboardBuffer6appendEc
_ZN7_thread7runningE
_ZN7_thread8setSleepEv
_ZN9Scheduler3putEP7_thread
CONSOLE_STATUS
CONSOLE_RX_DATA
