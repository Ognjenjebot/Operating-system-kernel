GAS LISTING /tmp/ccdoq65R.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB36:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../lib/mem.h"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** //zasto se ne uvozi body iz tcb.hpp???(using vazi samo za fajl u kom je definisan?)
  12:src/riscv.cpp **** using Body = void (*)();
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::popSppSpie()
  15:src/riscv.cpp **** {
  12              		.loc 1 15 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  16:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 16 5
  21              		.loc 1 16 38 is_stmt 0
  22              	#APP
  23              	# 16 "src/riscv.cpp" 1
  17              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 17 5 is_stmt 1
  27              		.loc 1 17 29 is_stmt 0
  28              	# 17 "src/riscv.cpp" 1
  18              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 18 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE36:
GAS LISTING /tmp/ccdoq65R.s 			page 2


  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB37:
  19:src/riscv.cpp **** 
  20:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  21:src/riscv.cpp **** {
  47              		.loc 1 21 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F8 		addi	sp,sp,-128
  50              		.cfi_def_cfa_offset 128
  51 0024 233C1106 		sd	ra,120(sp)
  52 0028 23388106 		sd	s0,112(sp)
  53 002c 23349106 		sd	s1,104(sp)
  54 0030 23302107 		sd	s2,96(sp)
  55 0034 233C3105 		sd	s3,88(sp)
  56 0038 23384105 		sd	s4,80(sp)
  57              		.cfi_offset 1, -8
  58              		.cfi_offset 8, -16
  59              		.cfi_offset 9, -24
  60              		.cfi_offset 18, -32
  61              		.cfi_offset 19, -40
  62              		.cfi_offset 20, -48
  63 003c 13040108 		addi	s0,sp,128
  64              		.cfi_def_cfa 8, 0
  22:src/riscv.cpp ****     uint64 scause = r_scause();
  65              		.loc 1 22 5
  66              	.LBB38:
  67              	.LBB39:
  68              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
GAS LISTING /tmp/ccdoq65R.s 			page 3


  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
GAS LISTING /tmp/ccdoq65R.s 			page 4


  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  69              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  70              		.loc 2 92 5
  71              		.loc 2 92 72 is_stmt 0
  72              	#APP
  73              	# 92 "src/../h/riscv.hpp" 1
  93              	    return scause;
  74              		csrr a5, scause
  75              	# 0 "" 2
  76              	#NO_APP
  77 0044 2334F4FA 		sd	a5,-88(s0)
  78              		.loc 2 93 5 is_stmt 1
  79              		.loc 2 93 12 is_stmt 0
  80 0048 033784FA 		ld	a4,-88(s0)
  81              	.LVL0:
  82              	.LBE39:
  83              	.LBE38:
  23:src/riscv.cpp **** 
  24:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  84              		.loc 1 24 5 is_stmt 1
  85              	.LBB40:
  86              		.loc 1 24 40 is_stmt 0
  87 004c 930687FF 		addi	a3,a4,-8
  88              		.loc 1 24 5
  89 0050 93071000 		li	a5,1
  90 0054 63F8D702 		bleu	a3,a5,.L14
  91              	.LBE40:
  25:src/riscv.cpp ****     {
  26:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  29:src/riscv.cpp ****         uint64  code;
  30:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****         if(code == 0x1) {
  33:src/riscv.cpp ****             //MEM_ALLOC
  34:src/riscv.cpp ****             //poslat je poravnati broj blokova, ali se opet mora izraziti u bajtovima velicina memo
  35:src/riscv.cpp ****             uint64 x;
  36:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
  37:src/riscv.cpp ****             x *= MEM_BLOCK_SIZE;
  38:src/riscv.cpp ****             void* r = __mem_alloc(x);
  39:src/riscv.cpp ****             //povratna vrednost
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
  41:src/riscv.cpp ****         }else if(code == 0x02) {
  42:src/riscv.cpp ****             //MEM_FREE
  43:src/riscv.cpp ****             uint64 ret;
  44:src/riscv.cpp ****             uint64 x;
  45:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
  46:src/riscv.cpp ****             ret = __mem_free((void*)x);
  47:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
GAS LISTING /tmp/ccdoq65R.s 			page 5


  48:src/riscv.cpp ****         }else if(code == 0x11){
  49:src/riscv.cpp ****             //THREAD_CREATE
  50:src/riscv.cpp ****             thread_t *handle;
  51:src/riscv.cpp ****             Body body;
  52:src/riscv.cpp ****             void* args;
  53:src/riscv.cpp ****             void* stack;
  54:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
  55:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
  56:src/riscv.cpp **** //            __asm__ volatile("mv %0, a3" : "=r" (args));
  57:src/riscv.cpp **** //            __asm__ volatile("mv %0, a4" : "=r" (stack));
  58:src/riscv.cpp **** 
  59:src/riscv.cpp ****             //vrednosti registara a3 i a4 se pobrkaju skroz, pa cu  njih uzeti sa steka
  60:src/riscv.cpp **** 
  61:src/riscv.cpp ****             //radi sa fp umesto sp, nzm zasto, proveriti posle
  62:src/riscv.cpp ****             __asm__ volatile("ld t2, 104(fp)");
  63:src/riscv.cpp ****             __asm__ volatile("ld t3, 112(fp)");
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (args));
  66:src/riscv.cpp ****             __asm__ volatile("mv %0, t3" : "=r" (stack));
  67:src/riscv.cpp ****             printInteger((uint64)stack);
  68:src/riscv.cpp ****             int ret = _thread::createThread(handle, body, args, stack);
  69:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****         }else if(code == 0x12){
  72:src/riscv.cpp ****             //THREAD_EXIT
  73:src/riscv.cpp ****             int ret = _thread::threadStop();
  74:src/riscv.cpp ****             if(ret != 0)
  75:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ret));
  76:src/riscv.cpp ****             else
  77:src/riscv.cpp ****                 __asm__ volatile("mv a0, zero");
  78:src/riscv.cpp ****         }else if(code == 0x13){
  79:src/riscv.cpp ****             //THREAD_DISPACH
  80:src/riscv.cpp ****         }else if(code == 0x21){
  81:src/riscv.cpp ****             //SEM_OPEN
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****         }else if(code == 0x22){
  84:src/riscv.cpp ****             //SEM_CLOSE
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****         }else if(code == 0x23){
  87:src/riscv.cpp ****             //SEM_WAIT
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****         }else if(code == 0x24){
  90:src/riscv.cpp ****             //SEM_SIGNAL
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****         }else if(code == 0x31){
  93:src/riscv.cpp ****             //TIME_SLEEP
  94:src/riscv.cpp **** 
  95:src/riscv.cpp ****         }else if(code == 0x41){
  96:src/riscv.cpp ****             //GETC
  97:src/riscv.cpp **** 
  98:src/riscv.cpp ****         }else if(code == 0x42){
  99:src/riscv.cpp ****             //PUTC
 100:src/riscv.cpp **** 
 101:src/riscv.cpp ****         }else{
 102:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 103:src/riscv.cpp ****             _thread::dispatch();
 104:src/riscv.cpp ****         }
GAS LISTING /tmp/ccdoq65R.s 			page 6


 105:src/riscv.cpp **** 
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 107:src/riscv.cpp ****         w_sepc(sepc);
 108:src/riscv.cpp ****     }
 109:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  92              		.loc 1 109 10 is_stmt 1
  93              	.LBB89:
  94              	.LBB41:
  95 0058 9307F0FF 		li	a5,-1
  96 005c 9397F703 		slli	a5,a5,63
  97 0060 93871700 		addi	a5,a5,1
  98 0064 630CF716 		beq	a4,a5,.L15
 110:src/riscv.cpp ****     {
 111:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 112:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 113:src/riscv.cpp ****         _thread::timeSliceCounter++;
 114:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 115:src/riscv.cpp ****         {
 116:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 117:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 118:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 119:src/riscv.cpp ****             _thread::dispatch();
 120:src/riscv.cpp ****             w_sstatus(sstatus);
 121:src/riscv.cpp ****             w_sepc(sepc);
 122:src/riscv.cpp ****         }
 123:src/riscv.cpp ****     }
 124:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  99              		.loc 1 124 10
 100 0068 9307F0FF 		li	a5,-1
 101 006c 9397F703 		slli	a5,a5,63
 102 0070 93879700 		addi	a5,a5,9
 103 0074 631AF70C 		bne	a4,a5,.L3
 125:src/riscv.cpp ****     {
 126:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 127:src/riscv.cpp ****         console_handler();
 104              		.loc 1 127 9
 105              		.loc 1 127 24 is_stmt 0
 106 0078 97000000 		call	console_handler@plt
 106      E7800000 
 107              	.LVL1:
 108              	.LBE41:
 109              	.LBE89:
 128:src/riscv.cpp ****     }
 129:src/riscv.cpp ****     else
 130:src/riscv.cpp ****     {
 131:src/riscv.cpp ****         // unexpected trap cause
 132:src/riscv.cpp ****     }
 133:src/riscv.cpp **** }...
 110              		.loc 1 133 1
 111 0080 6F00800C 		j	.L3
 112              	.LVL2:
 113              	.L14:
 114              	.LBB90:
 115              	.LBB57:
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 116              		.loc 1 27 9 is_stmt 1
 117              	.LBB58:
GAS LISTING /tmp/ccdoq65R.s 			page 7


 118              	.LBB59:
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 119              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 120              		.loc 2 104 5
 121              		.loc 2 104 64 is_stmt 0
 122              	#APP
 123              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 124              		csrr a5, sepc
 125              	# 0 "" 2
 126              	#NO_APP
 127 0088 233CF4FA 		sd	a5,-72(s0)
 128              		.loc 2 105 5 is_stmt 1
 129              		.loc 2 105 12 is_stmt 0
 130 008c 833784FB 		ld	a5,-72(s0)
 131              	.LBE59:
 132              	.LBE58:
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 133              		.loc 1 27 41
 134 0090 93874700 		addi	a5,a5,4
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 135              		.loc 1 27 43
 136 0094 2334F4F8 		sd	a5,-120(s0)
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 137              		.loc 1 28 9 is_stmt 1
 138              	.LBB60:
 139              	.LBB61:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
GAS LISTING /tmp/ccdoq65R.s 			page 8


 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 140              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 141              		.loc 2 172 5
 142              		.loc 2 172 76 is_stmt 0
 143              	#APP
 144              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 145              		csrr a5, sstatus
 146              	# 0 "" 2
 147              	#NO_APP
 148 009c 2338F4FA 		sd	a5,-80(s0)
GAS LISTING /tmp/ccdoq65R.s 			page 9


 149              		.loc 2 173 5 is_stmt 1
 150              		.loc 2 173 12 is_stmt 0
 151 00a0 833704FB 		ld	a5,-80(s0)
 152              	.LBE61:
 153              	.LBE60:
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 154              		.loc 1 28 45
 155 00a4 2338F4F8 		sd	a5,-112(s0)
  29:src/riscv.cpp ****         uint64  code;
 156              		.loc 1 29 9 is_stmt 1
  30:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
 157              		.loc 1 30 9
  30:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
 158              		.loc 1 30 52 is_stmt 0
 159              	#APP
 160              	# 30 "src/riscv.cpp" 1
 161              		mv a5, a0
 162              	# 0 "" 2
 163              	.LVL3:
  32:src/riscv.cpp ****         if(code == 0x1) {
 164              		.loc 1 32 9 is_stmt 1
 165              	#NO_APP
 166              	.LBB62:
 167 00ac 13071000 		li	a4,1
 168              	.LVL4:
 169 00b0 638AE706 		beq	a5,a4,.L16
 170              	.LBE62:
 171              	.LBE57:
 172              	.LBE90:
  41:src/riscv.cpp ****         }else if(code == 0x02) {
 173              		.loc 1 41 15
 174              	.LBB91:
 175              	.LBB84:
 176              	.LBB76:
 177              	.LBB63:
 178 00b4 13072000 		li	a4,2
 179 00b8 6388E70A 		beq	a5,a4,.L17
 180              	.LBE63:
 181              	.LBE76:
 182              	.LBE84:
 183              	.LBE91:
  48:src/riscv.cpp ****         }else if(code == 0x11){
 184              		.loc 1 48 15
 185              	.LBB92:
 186              	.LBB85:
 187              	.LBB77:
 188              	.LBB72:
 189              	.LBB64:
 190 00bc 13071001 		li	a4,17
 191 00c0 638EE70A 		beq	a5,a4,.L18
 192              	.LBE64:
 193              	.LBE72:
 194              	.LBE77:
 195              	.LBE85:
 196              	.LBE92:
  71:src/riscv.cpp ****         }else if(code == 0x12){
 197              		.loc 1 71 15
GAS LISTING /tmp/ccdoq65R.s 			page 10


 198              	.LBB93:
 199              	.LBB86:
 200              	.LBB78:
 201              	.LBB73:
 202              	.LBB69:
 203              	.LBB65:
 204 00c4 13072001 		li	a4,18
 205 00c8 638CE70E 		beq	a5,a4,.L19
  78:src/riscv.cpp ****         }else if(code == 0x13){
 206              		.loc 1 78 15
 207 00cc 13073001 		li	a4,19
 208 00d0 6384E706 		beq	a5,a4,.L6
  80:src/riscv.cpp ****         }else if(code == 0x21){
 209              		.loc 1 80 15
 210 00d4 13071002 		li	a4,33
 211 00d8 6380E706 		beq	a5,a4,.L6
  83:src/riscv.cpp ****         }else if(code == 0x22){
 212              		.loc 1 83 15
 213 00dc 13072002 		li	a4,34
 214 00e0 638CE704 		beq	a5,a4,.L6
  86:src/riscv.cpp ****         }else if(code == 0x23){
 215              		.loc 1 86 15
 216 00e4 13073002 		li	a4,35
 217 00e8 6388E704 		beq	a5,a4,.L6
  89:src/riscv.cpp ****         }else if(code == 0x24){
 218              		.loc 1 89 15
 219 00ec 13074002 		li	a4,36
 220 00f0 6384E704 		beq	a5,a4,.L6
  92:src/riscv.cpp ****         }else if(code == 0x31){
 221              		.loc 1 92 15
 222 00f4 13071003 		li	a4,49
 223 00f8 6380E704 		beq	a5,a4,.L6
  95:src/riscv.cpp ****         }else if(code == 0x41){
 224              		.loc 1 95 15
 225 00fc 13071004 		li	a4,65
 226 0100 638CE702 		beq	a5,a4,.L6
  98:src/riscv.cpp ****         }else if(code == 0x42){
 227              		.loc 1 98 15
 228 0104 13072004 		li	a4,66
 229 0108 6388E702 		beq	a5,a4,.L6
 102:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 230              		.loc 1 102 13
 102:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 231              		.loc 1 102 39 is_stmt 0
 232 010c 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 232      83B70700 
 233              	.LVL5:
 234 0114 23B00700 		sd	zero,0(a5)
 103:src/riscv.cpp ****             _thread::dispatch();
 235              		.loc 1 103 13 is_stmt 1
 103:src/riscv.cpp ****             _thread::dispatch();
 236              		.loc 1 103 30 is_stmt 0
 237 0118 97000000 		call	_ZN7_thread8dispatchEv@plt
 237      E7800000 
 238              	.LVL6:
 239 0120 6F008001 		j	.L6
 240              	.LVL7:
GAS LISTING /tmp/ccdoq65R.s 			page 11


 241              	.L16:
 242              	.LBE65:
 243              	.LBE69:
 244              	.LBE73:
 245              	.LBB74:
  35:src/riscv.cpp ****             uint64 x;
 246              		.loc 1 35 13 is_stmt 1
  36:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 247              		.loc 1 36 13
  36:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 248              		.loc 1 36 53 is_stmt 0
 249              	#APP
 250              	# 36 "src/riscv.cpp" 1
 251              		mv a0, a1
 252              	# 0 "" 2
 253              	.LVL8:
  37:src/riscv.cpp ****             x *= MEM_BLOCK_SIZE;
 254              		.loc 1 37 13 is_stmt 1
  38:src/riscv.cpp ****             void* r = __mem_alloc(x);
 255              		.loc 1 38 13
  38:src/riscv.cpp ****             void* r = __mem_alloc(x);
 256              		.loc 1 38 34 is_stmt 0
 257              	#NO_APP
 258 0128 13156500 		slli	a0,a0,6
 259              	.LVL9:
 260 012c 97000000 		call	__mem_alloc@plt
 260      E7800000 
 261              	.LVL10:
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
 262              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
 263              		.loc 1 40 54 is_stmt 0
 264              	#APP
 265              	# 40 "src/riscv.cpp" 1
 266              		mv a0, a0
 267              	# 0 "" 2
 268              	.LVL11:
 269              	#NO_APP
 270              	.L6:
 271              	.LBE74:
 272              	.LBE78:
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 273              		.loc 1 106 9 is_stmt 1
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 274              		.loc 1 106 18 is_stmt 0
 275 0138 833704F9 		ld	a5,-112(s0)
 276              	.LVL12:
 277              	.LBB79:
 278              	.LBB80:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 279              		.loc 2 178 5 is_stmt 1
 280              		.loc 2 178 77 is_stmt 0
 281              	#APP
GAS LISTING /tmp/ccdoq65R.s 			page 12


 282              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 283              		csrw sstatus, a5
 284              	# 0 "" 2
 285              	.LVL13:
 286              	#NO_APP
 287              	.LBE80:
 288              	.LBE79:
 107:src/riscv.cpp ****         w_sepc(sepc);
 289              		.loc 1 107 9 is_stmt 1
 107:src/riscv.cpp ****         w_sepc(sepc);
 290              		.loc 1 107 15 is_stmt 0
 291 0140 833784F8 		ld	a5,-120(s0)
 292              	.LVL14:
 293              	.LBB81:
 294              	.LBB82:
 110:src/../h/riscv.hpp **** }
 295              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 296              		.loc 2 110 65 is_stmt 0
 297              	#APP
 298              	# 110 "src/../h/riscv.hpp" 1
 299              		csrw sepc, a5
 300              	# 0 "" 2
 301              	.LVL15:
 302              	#NO_APP
 303              	.L3:
 304              	.LBE82:
 305              	.LBE81:
 306              	.LBE86:
 307              	.LBE93:
 308              		.loc 1 133 1
 309 0148 83308107 		ld	ra,120(sp)
 310              		.cfi_remember_state
 311              		.cfi_restore 1
 312 014c 03340107 		ld	s0,112(sp)
 313              		.cfi_restore 8
 314              		.cfi_def_cfa 2, 128
 315 0150 83348106 		ld	s1,104(sp)
 316              		.cfi_restore 9
 317 0154 03390106 		ld	s2,96(sp)
 318              		.cfi_restore 18
 319 0158 83398105 		ld	s3,88(sp)
 320              		.cfi_restore 19
 321 015c 033A0105 		ld	s4,80(sp)
 322              		.cfi_restore 20
 323 0160 13010108 		addi	sp,sp,128
 324              		.cfi_def_cfa_offset 0
 325 0164 67800000 		jr	ra
 326              	.LVL16:
 327              	.L17:
 328              		.cfi_restore_state
 329              	.LBB94:
 330              	.LBB87:
 331              	.LBB83:
 332              	.LBB75:
 333              	.LBB70:
GAS LISTING /tmp/ccdoq65R.s 			page 13


  43:src/riscv.cpp ****             uint64 ret;
 334              		.loc 1 43 13 is_stmt 1
  44:src/riscv.cpp ****             uint64 x;
 335              		.loc 1 44 13
  45:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 336              		.loc 1 45 13
  45:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 337              		.loc 1 45 53 is_stmt 0
 338              	#APP
 339              	# 45 "src/riscv.cpp" 1
 340              		mv a0, a1
 341              	# 0 "" 2
 342              	.LVL17:
  46:src/riscv.cpp ****             ret = __mem_free((void*)x);
 343              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp ****             ret = __mem_free((void*)x);
 344              		.loc 1 46 29 is_stmt 0
 345              	#NO_APP
 346 016c 97000000 		call	__mem_free@plt
 346      E7800000 
 347              	.LVL18:
  47:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 348              		.loc 1 47 13 is_stmt 1
  47:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 349              		.loc 1 47 56 is_stmt 0
 350              	#APP
 351              	# 47 "src/riscv.cpp" 1
 352              		mv a0, a0
 353              	# 0 "" 2
 354              	#NO_APP
 355              	.LBE70:
 356 0178 6FF01FFC 		j	.L6
 357              	.LVL19:
 358              	.L18:
 359              	.LBB71:
 360              	.LBB67:
  50:src/riscv.cpp ****             thread_t *handle;
 361              		.loc 1 50 13 is_stmt 1
  51:src/riscv.cpp ****             Body body;
 362              		.loc 1 51 13
  52:src/riscv.cpp ****             void* args;
 363              		.loc 1 52 13
  53:src/riscv.cpp ****             void* stack;
 364              		.loc 1 53 13
  54:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 365              		.loc 1 54 13
  54:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 366              		.loc 1 54 58 is_stmt 0
 367              	#APP
 368              	# 54 "src/riscv.cpp" 1
 369              		mv s2, a1
 370              	# 0 "" 2
 371              	.LVL20:
  55:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
 372              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
 373              		.loc 1 55 56 is_stmt 0
GAS LISTING /tmp/ccdoq65R.s 			page 14


 374              	# 55 "src/riscv.cpp" 1
 375              		mv s3, a2
 376              	# 0 "" 2
 377              	.LVL21:
  62:src/riscv.cpp ****             __asm__ volatile("ld t2, 104(fp)");
 378              		.loc 1 62 13 is_stmt 1
  62:src/riscv.cpp ****             __asm__ volatile("ld t2, 104(fp)");
 379              		.loc 1 62 47 is_stmt 0
 380              	# 62 "src/riscv.cpp" 1
  63:src/riscv.cpp ****             __asm__ volatile("ld t3, 112(fp)");
 381              		ld t2, 104(fp)
 382              	# 0 "" 2
 383              		.loc 1 63 13 is_stmt 1
  63:src/riscv.cpp ****             __asm__ volatile("ld t3, 112(fp)");
 384              		.loc 1 63 47 is_stmt 0
 385              	# 63 "src/riscv.cpp" 1
  65:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (args));
 386              		ld t3, 112(fp)
 387              	# 0 "" 2
 388              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (args));
 389              		.loc 1 65 56 is_stmt 0
 390              	# 65 "src/riscv.cpp" 1
 391              		mv s4, t2
 392              	# 0 "" 2
 393              	.LVL22:
  66:src/riscv.cpp ****             __asm__ volatile("mv %0, t3" : "=r" (stack));
 394              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****             __asm__ volatile("mv %0, t3" : "=r" (stack));
 395              		.loc 1 66 57 is_stmt 0
 396              	# 66 "src/riscv.cpp" 1
 397              		mv s1, t3
 398              	# 0 "" 2
 399              	.LVL23:
  67:src/riscv.cpp ****             printInteger((uint64)stack);
 400              		.loc 1 67 13 is_stmt 1
  67:src/riscv.cpp ****             printInteger((uint64)stack);
 401              		.loc 1 67 25 is_stmt 0
 402              	#NO_APP
 403 0194 13850400 		mv	a0,s1
 404 0198 97000000 		call	_Z12printIntegerm@plt
 404      E7800000 
 405              	.LVL24:
  68:src/riscv.cpp ****             int ret = _thread::createThread(handle, body, args, stack);
 406              		.loc 1 68 13 is_stmt 1
  68:src/riscv.cpp ****             int ret = _thread::createThread(handle, body, args, stack);
 407              		.loc 1 68 44 is_stmt 0
 408 01a0 93860400 		mv	a3,s1
 409 01a4 13060A00 		mv	a2,s4
 410 01a8 93850900 		mv	a1,s3
 411 01ac 13050900 		mv	a0,s2
 412 01b0 97000000 		call	_ZN7_thread12createThreadEPPS_PFvvEPvS4_@plt
 412      E7800000 
 413              	.LVL25:
  69:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 414              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
GAS LISTING /tmp/ccdoq65R.s 			page 15


 415              		.loc 1 69 56 is_stmt 0
 416              	#APP
 417              	# 69 "src/riscv.cpp" 1
 418              		mv a0, a0
 419              	# 0 "" 2
 420              	#NO_APP
 421              	.LBE67:
 422 01bc 6FF0DFF7 		j	.L6
 423              	.LVL26:
 424              	.L19:
 425              	.LBB68:
 426              	.LBB66:
  73:src/riscv.cpp ****             int ret = _thread::threadStop();
 427              		.loc 1 73 13 is_stmt 1
  73:src/riscv.cpp ****             int ret = _thread::threadStop();
 428              		.loc 1 73 42 is_stmt 0
 429 01c0 97000000 		call	_ZN7_thread10threadStopEv@plt
 429      E7800000 
 430              	.LVL27:
  74:src/riscv.cpp ****             if(ret != 0)
 431              		.loc 1 74 13 is_stmt 1
 432 01c8 63060500 		beqz	a0,.L10
  75:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ret));
 433              		.loc 1 75 17
  75:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (ret));
 434              		.loc 1 75 60 is_stmt 0
 435              	#APP
 436              	# 75 "src/riscv.cpp" 1
 437              		mv a0, a0
 438              	# 0 "" 2
 439              	#NO_APP
 440 01d0 6FF09FF6 		j	.L6
 441              	.L10:
  77:src/riscv.cpp ****                 __asm__ volatile("mv a0, zero");
 442              		.loc 1 77 17 is_stmt 1
  77:src/riscv.cpp ****                 __asm__ volatile("mv a0, zero");
 443              		.loc 1 77 48 is_stmt 0
 444              	#APP
 445              	# 77 "src/riscv.cpp" 1
 446              		mv a0, zero
 447              	# 0 "" 2
 448              	#NO_APP
 449 01d8 6FF01FF6 		j	.L6
 450              	.LVL28:
 451              	.L15:
 452              	.LBE66:
 453              	.LBE68:
 454              	.LBE71:
 455              	.LBE75:
 456              	.LBE83:
 457              	.LBE87:
 458              	.LBB88:
 459              	.LBB42:
 112:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 460              		.loc 1 112 9 is_stmt 1
 461              	.LBB43:
 462              	.LBB44:
GAS LISTING /tmp/ccdoq65R.s 			page 16


 144:src/../h/riscv.hpp **** }
 463              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 464              		.loc 2 144 64 is_stmt 0
 465 01dc 93072000 		li	a5,2
 466              	#APP
 467              	# 144 "src/../h/riscv.hpp" 1
 468              		csrc sip, a5
 469              	# 0 "" 2
 470              	.LVL29:
 471              	#NO_APP
 472              	.LBE44:
 473              	.LBE43:
 113:src/riscv.cpp ****         _thread::timeSliceCounter++;
 474              		.loc 1 113 9 is_stmt 1
 113:src/riscv.cpp ****         _thread::timeSliceCounter++;
 475              		.loc 1 113 34 is_stmt 0
 476 01e4 17070000 		la	a4,_ZN7_thread16timeSliceCounterE
 476      03370700 
 477              	.LVL30:
 478 01ec 83370700 		ld	a5,0(a4)
 479 01f0 93871700 		addi	a5,a5,1
 480 01f4 2330F700 		sd	a5,0(a4)
 114:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 481              		.loc 1 114 9 is_stmt 1
 482              	.LBB45:
 114:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 483              		.loc 1 114 72 is_stmt 0
 484 01f8 17070000 		la	a4,_ZN7_thread7runningE
 484      03370700 
 485 0200 03370700 		ld	a4,0(a4)
 486              	.LVL31:
 487              	.LBB46:
 488              	.LBB47:
 489              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "syscall_c.h"
   9:src/../h/tcb.hpp **** #include "../lib/hw.h"
  10:src/../h/tcb.hpp **** #include "scheduler.hpp"
  11:src/../h/tcb.hpp **** #include "../h/print.hpp"
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** // Thread Control Block
  14:src/../h/tcb.hpp **** class _thread
  15:src/../h/tcb.hpp **** {
  16:src/../h/tcb.hpp **** public:
  17:src/../h/tcb.hpp ****     ~_thread() { delete[] stack; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  22:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccdoq65R.s 			page 17


  23:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 490              		.loc 3 23 35 is_stmt 1
 491              		.loc 3 23 42 is_stmt 0
 492 0204 03370702 		ld	a4,32(a4)
 493              	.LVL32:
 494              	.LBE47:
 495              	.LBE46:
 114:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 496              		.loc 1 114 9
 497 0208 E3E0E7F4 		bltu	a5,a4,.L3
 498              	.LBB48:
 116:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 499              		.loc 1 116 13 is_stmt 1
 500              	.LBB49:
 501              	.LBB50:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 502              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 503              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 504              		.loc 2 104 64 is_stmt 0
 505              	#APP
 506              	# 104 "src/../h/riscv.hpp" 1
 507              		csrr a5, sepc
 508              	# 0 "" 2
 509              	#NO_APP
 510 0210 2334F4FC 		sd	a5,-56(s0)
 105:src/../h/riscv.hpp **** }
 511              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 512              		.loc 2 105 12 is_stmt 0
 513 0214 833784FC 		ld	a5,-56(s0)
 514              	.LBE50:
 515              	.LBE49:
 116:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 516              		.loc 1 116 43
 517 0218 233CF4F8 		sd	a5,-104(s0)
 117:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 518              		.loc 1 117 13 is_stmt 1
 519              	.LBB51:
 520              	.LBB52:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 521              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 522              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 523              		.loc 2 172 76 is_stmt 0
 524              	#APP
 525              	# 172 "src/../h/riscv.hpp" 1
 526              		csrr a5, sstatus
 527              	# 0 "" 2
 528              	#NO_APP
 529 0220 2330F4FC 		sd	a5,-64(s0)
 173:src/../h/riscv.hpp **** }
 530              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 531              		.loc 2 173 12 is_stmt 0
GAS LISTING /tmp/ccdoq65R.s 			page 18


 532 0224 833704FC 		ld	a5,-64(s0)
 533              	.LBE52:
 534              	.LBE51:
 117:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 535              		.loc 1 117 49
 536 0228 2330F4FA 		sd	a5,-96(s0)
 118:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 537              		.loc 1 118 13 is_stmt 1
 118:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 538              		.loc 1 118 39 is_stmt 0
 539 022c 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 539      83B70700 
 540 0234 23B00700 		sd	zero,0(a5)
 119:src/riscv.cpp ****             _thread::dispatch();
 541              		.loc 1 119 13 is_stmt 1
 119:src/riscv.cpp ****             _thread::dispatch();
 542              		.loc 1 119 30 is_stmt 0
 543 0238 97000000 		call	_ZN7_thread8dispatchEv@plt
 543      E7800000 
 544              	.LVL33:
 120:src/riscv.cpp ****             w_sstatus(sstatus);
 545              		.loc 1 120 13 is_stmt 1
 120:src/riscv.cpp ****             w_sstatus(sstatus);
 546              		.loc 1 120 22 is_stmt 0
 547 0240 833704FA 		ld	a5,-96(s0)
 548              	.LVL34:
 549              	.LBB53:
 550              	.LBB54:
 178:src/../h/riscv.hpp **** }
 551              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 552              		.loc 2 178 77 is_stmt 0
 553              	#APP
 554              	# 178 "src/../h/riscv.hpp" 1
 555              		csrw sstatus, a5
 556              	# 0 "" 2
 557              	.LVL35:
 558              	#NO_APP
 559              	.LBE54:
 560              	.LBE53:
 121:src/riscv.cpp ****             w_sepc(sepc);
 561              		.loc 1 121 13 is_stmt 1
 121:src/riscv.cpp ****             w_sepc(sepc);
 562              		.loc 1 121 19 is_stmt 0
 563 0248 833784F9 		ld	a5,-104(s0)
 564              	.LVL36:
 565              	.LBB55:
 566              	.LBB56:
 110:src/../h/riscv.hpp **** }
 567              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 568              		.loc 2 110 65 is_stmt 0
 569              	#APP
 570              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 571              		csrw sepc, a5
 572              	# 0 "" 2
GAS LISTING /tmp/ccdoq65R.s 			page 19


 573              		.loc 2 111 1
 574              	#NO_APP
 575 0250 6FF09FEF 		j	.L3
 576              	.LBE56:
 577              	.LBE55:
 578              	.LBE48:
 579              	.LBE45:
 580              	.LBE42:
 581              	.LBE88:
 582              	.LBE94:
 583              		.cfi_endproc
 584              	.LFE37:
 586              	.Letext0:
 587              		.file 4 "src/../h/../lib/hw.h"
 588              		.file 5 "src/../h/syscall_c.h"
 589              		.file 6 "src/../lib/mem.h"
 590              		.file 7 "src/../h/../h/print.hpp"
 591              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/ccdoq65R.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccdoq65R.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccdoq65R.s:13     .text:0000000000000000 .L0 
     /tmp/ccdoq65R.s:14     .text:0000000000000000 .L0 
     /tmp/ccdoq65R.s:15     .text:0000000000000004 .L0 
     /tmp/ccdoq65R.s:17     .text:0000000000000008 .L0 
     /tmp/ccdoq65R.s:19     .text:000000000000000c .L0 
     /tmp/ccdoq65R.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:16     .text:000000000000000c .L0 
     /tmp/ccdoq65R.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:17     .text:0000000000000010 .L0 
     /tmp/ccdoq65R.s:33     .text:0000000000000014 .L0 
     /tmp/ccdoq65R.s:34     .text:0000000000000018 .L0 
     /tmp/ccdoq65R.s:35     .text:0000000000000018 .L0 
     /tmp/ccdoq65R.s:37     .text:000000000000001c .L0 
     /tmp/ccdoq65R.s:39     .text:0000000000000020 .L0 
     /tmp/ccdoq65R.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccdoq65R.s:48     .text:0000000000000020 .L0 
     /tmp/ccdoq65R.s:49     .text:0000000000000020 .L0 
     /tmp/ccdoq65R.s:50     .text:0000000000000024 .L0 
     /tmp/ccdoq65R.s:57     .text:000000000000003c .L0 
     /tmp/ccdoq65R.s:58     .text:000000000000003c .L0 
     /tmp/ccdoq65R.s:59     .text:000000000000003c .L0 
     /tmp/ccdoq65R.s:60     .text:000000000000003c .L0 
     /tmp/ccdoq65R.s:61     .text:000000000000003c .L0 
     /tmp/ccdoq65R.s:62     .text:000000000000003c .L0 
     /tmp/ccdoq65R.s:64     .text:0000000000000040 .L0 
     /tmp/ccdoq65R.s:69     .text:0000000000000040 .L0 
     /tmp/ccdoq65R.s:70     .text:0000000000000040 .L0 
     /tmp/ccdoq65R.s:71     .text:0000000000000040 .L0 
  src/../h/riscv.hpp:92     .text:0000000000000040 .L0 
     /tmp/ccdoq65R.s:79     .text:0000000000000048 .L0 
     /tmp/ccdoq65R.s:80     .text:0000000000000048 .L0 
     /tmp/ccdoq65R.s:86     .text:000000000000004c .L0 
     /tmp/ccdoq65R.s:87     .text:000000000000004c .L0 
     /tmp/ccdoq65R.s:89     .text:0000000000000050 .L0 
     /tmp/ccdoq65R.s:95     .text:0000000000000058 .L0 
     /tmp/ccdoq65R.s:100    .text:0000000000000068 .L0 
     /tmp/ccdoq65R.s:105    .text:0000000000000078 .L0 
     /tmp/ccdoq65R.s:106    .text:0000000000000078 .L0 
     /tmp/ccdoq65R.s:111    .text:0000000000000080 .L0 
     /tmp/ccdoq65R.s:119    .text:0000000000000084 .L0 
     /tmp/ccdoq65R.s:120    .text:0000000000000084 .L0 
     /tmp/ccdoq65R.s:121    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000084 .L0 
     /tmp/ccdoq65R.s:129    .text:000000000000008c .L0 
     /tmp/ccdoq65R.s:130    .text:000000000000008c .L0 
     /tmp/ccdoq65R.s:134    .text:0000000000000090 .L0 
     /tmp/ccdoq65R.s:136    .text:0000000000000094 .L0 
     /tmp/ccdoq65R.s:140    .text:0000000000000098 .L0 
     /tmp/ccdoq65R.s:141    .text:0000000000000098 .L0 
     /tmp/ccdoq65R.s:142    .text:0000000000000098 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000098 .L0 
     /tmp/ccdoq65R.s:150    .text:00000000000000a0 .L0 
     /tmp/ccdoq65R.s:151    .text:00000000000000a0 .L0 
     /tmp/ccdoq65R.s:155    .text:00000000000000a4 .L0 
GAS LISTING /tmp/ccdoq65R.s 			page 21


     /tmp/ccdoq65R.s:157    .text:00000000000000a8 .L0 
     /tmp/ccdoq65R.s:158    .text:00000000000000a8 .L0 
       src/riscv.cpp:30     .text:00000000000000a8 .L0 
     /tmp/ccdoq65R.s:167    .text:00000000000000ac .L0 
     /tmp/ccdoq65R.s:178    .text:00000000000000b4 .L0 
     /tmp/ccdoq65R.s:190    .text:00000000000000bc .L0 
     /tmp/ccdoq65R.s:204    .text:00000000000000c4 .L0 
     /tmp/ccdoq65R.s:207    .text:00000000000000cc .L0 
     /tmp/ccdoq65R.s:210    .text:00000000000000d4 .L0 
     /tmp/ccdoq65R.s:213    .text:00000000000000dc .L0 
     /tmp/ccdoq65R.s:216    .text:00000000000000e4 .L0 
     /tmp/ccdoq65R.s:219    .text:00000000000000ec .L0 
     /tmp/ccdoq65R.s:222    .text:00000000000000f4 .L0 
     /tmp/ccdoq65R.s:225    .text:00000000000000fc .L0 
     /tmp/ccdoq65R.s:228    .text:0000000000000104 .L0 
     /tmp/ccdoq65R.s:231    .text:000000000000010c .L0 
     /tmp/ccdoq65R.s:232    .text:000000000000010c .L0 
     /tmp/ccdoq65R.s:236    .text:0000000000000118 .L0 
     /tmp/ccdoq65R.s:237    .text:0000000000000118 .L0 
     /tmp/ccdoq65R.s:247    .text:0000000000000124 .L0 
     /tmp/ccdoq65R.s:248    .text:0000000000000124 .L0 
       src/riscv.cpp:36     .text:0000000000000124 .L0 
     /tmp/ccdoq65R.s:255    .text:0000000000000128 .L0 
     /tmp/ccdoq65R.s:256    .text:0000000000000128 .L0 
     /tmp/ccdoq65R.s:258    .text:0000000000000128 .L0 
     /tmp/ccdoq65R.s:263    .text:0000000000000134 .L0 
       src/riscv.cpp:40     .text:0000000000000134 .L0 
     /tmp/ccdoq65R.s:274    .text:0000000000000138 .L0 
     /tmp/ccdoq65R.s:275    .text:0000000000000138 .L0 
     /tmp/ccdoq65R.s:280    .text:000000000000013c .L0 
  src/../h/riscv.hpp:178    .text:000000000000013c .L0 
     /tmp/ccdoq65R.s:290    .text:0000000000000140 .L0 
     /tmp/ccdoq65R.s:291    .text:0000000000000140 .L0 
     /tmp/ccdoq65R.s:296    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000144 .L0 
     /tmp/ccdoq65R.s:309    .text:0000000000000148 .L0 
     /tmp/ccdoq65R.s:310    .text:000000000000014c .L0 
     /tmp/ccdoq65R.s:311    .text:000000000000014c .L0 
     /tmp/ccdoq65R.s:313    .text:0000000000000150 .L0 
     /tmp/ccdoq65R.s:314    .text:0000000000000150 .L0 
     /tmp/ccdoq65R.s:316    .text:0000000000000154 .L0 
     /tmp/ccdoq65R.s:318    .text:0000000000000158 .L0 
     /tmp/ccdoq65R.s:320    .text:000000000000015c .L0 
     /tmp/ccdoq65R.s:322    .text:0000000000000160 .L0 
     /tmp/ccdoq65R.s:324    .text:0000000000000164 .L0 
     /tmp/ccdoq65R.s:328    .text:0000000000000168 .L0 
     /tmp/ccdoq65R.s:335    .text:0000000000000168 .L0 
     /tmp/ccdoq65R.s:336    .text:0000000000000168 .L0 
     /tmp/ccdoq65R.s:337    .text:0000000000000168 .L0 
       src/riscv.cpp:45     .text:0000000000000168 .L0 
     /tmp/ccdoq65R.s:344    .text:000000000000016c .L0 
     /tmp/ccdoq65R.s:346    .text:000000000000016c .L0 
     /tmp/ccdoq65R.s:349    .text:0000000000000174 .L0 
       src/riscv.cpp:47     .text:0000000000000174 .L0 
     /tmp/ccdoq65R.s:362    .text:000000000000017c .L0 
     /tmp/ccdoq65R.s:363    .text:000000000000017c .L0 
     /tmp/ccdoq65R.s:364    .text:000000000000017c .L0 
GAS LISTING /tmp/ccdoq65R.s 			page 22


     /tmp/ccdoq65R.s:365    .text:000000000000017c .L0 
     /tmp/ccdoq65R.s:366    .text:000000000000017c .L0 
       src/riscv.cpp:54     .text:000000000000017c .L0 
     /tmp/ccdoq65R.s:373    .text:0000000000000180 .L0 
       src/riscv.cpp:55     .text:0000000000000180 .L0 
     /tmp/ccdoq65R.s:379    .text:0000000000000184 .L0 
       src/riscv.cpp:62     .text:0000000000000184 .L0 
     /tmp/ccdoq65R.s:384    .text:0000000000000188 .L0 
       src/riscv.cpp:63     .text:0000000000000188 .L0 
     /tmp/ccdoq65R.s:389    .text:000000000000018c .L0 
       src/riscv.cpp:65     .text:000000000000018c .L0 
     /tmp/ccdoq65R.s:395    .text:0000000000000190 .L0 
       src/riscv.cpp:66     .text:0000000000000190 .L0 
     /tmp/ccdoq65R.s:401    .text:0000000000000194 .L0 
     /tmp/ccdoq65R.s:403    .text:0000000000000194 .L0 
     /tmp/ccdoq65R.s:407    .text:00000000000001a0 .L0 
     /tmp/ccdoq65R.s:408    .text:00000000000001a0 .L0 
     /tmp/ccdoq65R.s:415    .text:00000000000001b8 .L0 
       src/riscv.cpp:69     .text:00000000000001b8 .L0 
     /tmp/ccdoq65R.s:428    .text:00000000000001c0 .L0 
     /tmp/ccdoq65R.s:429    .text:00000000000001c0 .L0 
     /tmp/ccdoq65R.s:432    .text:00000000000001c8 .L0 
     /tmp/ccdoq65R.s:434    .text:00000000000001cc .L0 
       src/riscv.cpp:75     .text:00000000000001cc .L0 
     /tmp/ccdoq65R.s:443    .text:00000000000001d4 .L0 
       src/riscv.cpp:77     .text:00000000000001d4 .L0 
     /tmp/ccdoq65R.s:463    .text:00000000000001dc .L0 
     /tmp/ccdoq65R.s:464    .text:00000000000001dc .L0 
     /tmp/ccdoq65R.s:465    .text:00000000000001dc .L0 
     /tmp/ccdoq65R.s:475    .text:00000000000001e4 .L0 
     /tmp/ccdoq65R.s:476    .text:00000000000001e4 .L0 
     /tmp/ccdoq65R.s:483    .text:00000000000001f8 .L0 
     /tmp/ccdoq65R.s:484    .text:00000000000001f8 .L0 
     /tmp/ccdoq65R.s:491    .text:0000000000000204 .L0 
     /tmp/ccdoq65R.s:492    .text:0000000000000204 .L0 
     /tmp/ccdoq65R.s:497    .text:0000000000000208 .L0 
     /tmp/ccdoq65R.s:502    .text:000000000000020c .L0 
     /tmp/ccdoq65R.s:503    .text:000000000000020c .L0 
     /tmp/ccdoq65R.s:504    .text:000000000000020c .L0 
  src/../h/riscv.hpp:104    .text:000000000000020c .L0 
     /tmp/ccdoq65R.s:512    .text:0000000000000214 .L0 
     /tmp/ccdoq65R.s:513    .text:0000000000000214 .L0 
     /tmp/ccdoq65R.s:517    .text:0000000000000218 .L0 
     /tmp/ccdoq65R.s:521    .text:000000000000021c .L0 
     /tmp/ccdoq65R.s:522    .text:000000000000021c .L0 
     /tmp/ccdoq65R.s:523    .text:000000000000021c .L0 
  src/../h/riscv.hpp:172    .text:000000000000021c .L0 
     /tmp/ccdoq65R.s:531    .text:0000000000000224 .L0 
     /tmp/ccdoq65R.s:532    .text:0000000000000224 .L0 
     /tmp/ccdoq65R.s:536    .text:0000000000000228 .L0 
     /tmp/ccdoq65R.s:538    .text:000000000000022c .L0 
     /tmp/ccdoq65R.s:539    .text:000000000000022c .L0 
     /tmp/ccdoq65R.s:542    .text:0000000000000238 .L0 
     /tmp/ccdoq65R.s:543    .text:0000000000000238 .L0 
     /tmp/ccdoq65R.s:546    .text:0000000000000240 .L0 
     /tmp/ccdoq65R.s:547    .text:0000000000000240 .L0 
     /tmp/ccdoq65R.s:552    .text:0000000000000244 .L0 
GAS LISTING /tmp/ccdoq65R.s 			page 23


  src/../h/riscv.hpp:178    .text:0000000000000244 .L0 
     /tmp/ccdoq65R.s:562    .text:0000000000000248 .L0 
     /tmp/ccdoq65R.s:563    .text:0000000000000248 .L0 
     /tmp/ccdoq65R.s:568    .text:000000000000024c .L0 
  src/../h/riscv.hpp:110    .text:000000000000024c .L0 
     /tmp/ccdoq65R.s:575    .text:0000000000000250 .L0 
     /tmp/ccdoq65R.s:583    .text:0000000000000254 .L0 
     /tmp/ccdoq65R.s:592    .text:0000000000000254 .L0 
     /tmp/ccdoq65R.s:232    .text:000000000000010c .L0 
     /tmp/ccdoq65R.s:476    .text:00000000000001e4 .L0 
     /tmp/ccdoq65R.s:484    .text:00000000000001f8 .L0 
     /tmp/ccdoq65R.s:539    .text:000000000000022c .L0 
     /tmp/ccdoq65R.s:113    .text:0000000000000084 .L14
     /tmp/ccdoq65R.s:451    .text:00000000000001dc .L15
     /tmp/ccdoq65R.s:303    .text:0000000000000148 .L3
     /tmp/ccdoq65R.s:241    .text:0000000000000124 .L16
     /tmp/ccdoq65R.s:327    .text:0000000000000168 .L17
     /tmp/ccdoq65R.s:358    .text:000000000000017c .L18
     /tmp/ccdoq65R.s:424    .text:00000000000001c0 .L19
     /tmp/ccdoq65R.s:270    .text:0000000000000138 .L6
     /tmp/ccdoq65R.s:441    .text:00000000000001d4 .L10
     /tmp/ccdoq65R.s:1718   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccdoq65R.s:3040   .debug_str:0000000000000578 .LASF103
     /tmp/ccdoq65R.s:2986   .debug_str:00000000000003c3 .LASF104
     /tmp/ccdoq65R.s:2900   .debug_str:0000000000000166 .LASF105
     /tmp/ccdoq65R.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccdoq65R.s:586    .text:0000000000000254 .Letext0
     /tmp/ccdoq65R.s:2846   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccdoq65R.s:2958   .debug_str:000000000000033c .LASF0
     /tmp/ccdoq65R.s:2980   .debug_str:0000000000000392 .LASF1
     /tmp/ccdoq65R.s:2948   .debug_str:00000000000002ec .LASF2
     /tmp/ccdoq65R.s:2924   .debug_str:000000000000023d .LASF4
     /tmp/ccdoq65R.s:3014   .debug_str:00000000000004ab .LASF3
     /tmp/ccdoq65R.s:2868   .debug_str:000000000000006e .LASF5
     /tmp/ccdoq65R.s:2984   .debug_str:00000000000003b0 .LASF6
     /tmp/ccdoq65R.s:2956   .debug_str:0000000000000329 .LASF7
     /tmp/ccdoq65R.s:3050   .debug_str:0000000000000692 .LASF8
     /tmp/ccdoq65R.s:2910   .debug_str:00000000000001bf .LASF9
     /tmp/ccdoq65R.s:2992   .debug_str:00000000000003ec .LASF10
     /tmp/ccdoq65R.s:3042   .debug_str:000000000000063c .LASF11
     /tmp/ccdoq65R.s:2870   .debug_str:0000000000000075 .LASF12
     /tmp/ccdoq65R.s:2852   .debug_str:0000000000000011 .LASF13
     /tmp/ccdoq65R.s:2878   .debug_str:00000000000000bf .LASF14
     /tmp/ccdoq65R.s:3008   .debug_str:0000000000000477 .LASF15
     /tmp/ccdoq65R.s:2882   .debug_str:00000000000000d8 .LASF16
     /tmp/ccdoq65R.s:2976   .debug_str:0000000000000381 .LASF57
     /tmp/ccdoq65R.s:2936   .debug_str:0000000000000285 .LASF106
     /tmp/ccdoq65R.s:3024   .debug_str:00000000000004f9 .LASF17
     /tmp/ccdoq65R.s:2974   .debug_str:0000000000000378 .LASF18
     /tmp/ccdoq65R.s:2930   .debug_str:0000000000000252 .LASF19
     /tmp/ccdoq65R.s:3006   .debug_str:000000000000046c .LASF52
     /tmp/ccdoq65R.s:3064   .debug_str:00000000000006f6 .LASF54
     /tmp/ccdoq65R.s:2854   .debug_str:0000000000000021 .LASF20
     /tmp/ccdoq65R.s:2894   .debug_str:0000000000000138 .LASF22
     /tmp/ccdoq65R.s:2890   .debug_str:0000000000000127 .LASF24
     /tmp/ccdoq65R.s:2888   .debug_str:0000000000000112 .LASF26
     /tmp/ccdoq65R.s:3018   .debug_str:00000000000004ce .LASF21
GAS LISTING /tmp/ccdoq65R.s 			page 24


     /tmp/ccdoq65R.s:2998   .debug_str:0000000000000423 .LASF23
     /tmp/ccdoq65R.s:3038   .debug_str:0000000000000571 .LASF25
     /tmp/ccdoq65R.s:3030   .debug_str:0000000000000521 .LASF27
     /tmp/ccdoq65R.s:2904   .debug_str:0000000000000197 .LASF28
     /tmp/ccdoq65R.s:2884   .debug_str:00000000000000ee .LASF29
     /tmp/ccdoq65R.s:2850   .debug_str:0000000000000009 .LASF30
     /tmp/ccdoq65R.s:2916   .debug_str:0000000000000200 .LASF31
     /tmp/ccdoq65R.s:2866   .debug_str:0000000000000066 .LASF32
     /tmp/ccdoq65R.s:2872   .debug_str:0000000000000085 .LASF33
     /tmp/ccdoq65R.s:3068   .debug_str:0000000000000719 .LASF34
     /tmp/ccdoq65R.s:2896   .debug_str:000000000000014d .LASF35
     /tmp/ccdoq65R.s:2960   .debug_str:0000000000000349 .LASF36
     /tmp/ccdoq65R.s:3060   .debug_str:00000000000006de .LASF37
     /tmp/ccdoq65R.s:2864   .debug_str:000000000000005f .LASF38
     /tmp/ccdoq65R.s:2902   .debug_str:0000000000000184 .LASF39
     /tmp/ccdoq65R.s:2908   .debug_str:00000000000001b9 .LASF40
     /tmp/ccdoq65R.s:3036   .debug_str:000000000000055f .LASF41
     /tmp/ccdoq65R.s:2862   .debug_str:0000000000000059 .LASF42
     /tmp/ccdoq65R.s:3072   .debug_str:0000000000000726 .LASF43
     /tmp/ccdoq65R.s:3066   .debug_str:000000000000070e .LASF44
     /tmp/ccdoq65R.s:3012   .debug_str:0000000000000493 .LASF45
     /tmp/ccdoq65R.s:2978   .debug_str:0000000000000387 .LASF46
     /tmp/ccdoq65R.s:3026   .debug_str:0000000000000502 .LASF47
     /tmp/ccdoq65R.s:2876   .debug_str:00000000000000b5 .LASF48
     /tmp/ccdoq65R.s:2920   .debug_str:000000000000021f .LASF49
     /tmp/ccdoq65R.s:2954   .debug_str:000000000000031f .LASF50
     /tmp/ccdoq65R.s:2912   .debug_str:00000000000001cd .LASF51
     /tmp/ccdoq65R.s:3020   .debug_str:00000000000004d5 .LASF53
     /tmp/ccdoq65R.s:2874   .debug_str:0000000000000099 .LASF55
     /tmp/ccdoq65R.s:3054   .debug_str:00000000000006ae .LASF80
     /tmp/ccdoq65R.s:2934   .debug_str:0000000000000263 .LASF82
     /tmp/ccdoq65R.s:2848   .debug_str:0000000000000000 .LASF56
     /tmp/ccdoq65R.s:2922   .debug_str:0000000000000235 .LASF58
     /tmp/ccdoq65R.s:2858   .debug_str:0000000000000031 .LASF107
     /tmp/ccdoq65R.s:3046   .debug_str:0000000000000677 .LASF59
     /tmp/ccdoq65R.s:2990   .debug_str:00000000000003dc .LASF61
     /tmp/ccdoq65R.s:2988   .debug_str:00000000000003d1 .LASF63
     /tmp/ccdoq65R.s:2946   .debug_str:00000000000002d1 .LASF65
     /tmp/ccdoq65R.s:2950   .debug_str:00000000000002fa .LASF60
     /tmp/ccdoq65R.s:2944   .debug_str:00000000000002b6 .LASF62
     /tmp/ccdoq65R.s:2942   .debug_str:00000000000002a9 .LASF64
     /tmp/ccdoq65R.s:2996   .debug_str:0000000000000406 .LASF66
     /tmp/ccdoq65R.s:2880   .debug_str:00000000000000cb .LASF67
     /tmp/ccdoq65R.s:2860   .debug_str:0000000000000039 .LASF68
     /tmp/ccdoq65R.s:3004   .debug_str:0000000000000467 .LASF91
     /tmp/ccdoq65R.s:3000   .debug_str:0000000000000436 .LASF69
     /tmp/ccdoq65R.s:3010   .debug_str:000000000000048d .LASF70
     /tmp/ccdoq65R.s:3034   .debug_str:000000000000054b .LASF71
     /tmp/ccdoq65R.s:2892   .debug_str:0000000000000130 .LASF108
     /tmp/ccdoq65R.s:3022   .debug_str:00000000000004e4 .LASF72
     /tmp/ccdoq65R.s:2952   .debug_str:0000000000000306 .LASF73
     /tmp/ccdoq65R.s:2928   .debug_str:000000000000024d .LASF74
     /tmp/ccdoq65R.s:2964   .debug_str:0000000000000359 .LASF75
     /tmp/ccdoq65R.s:2932   .debug_str:000000000000025b .LASF76
     /tmp/ccdoq65R.s:2972   .debug_str:000000000000036e .LASF77
     /tmp/ccdoq65R.s:2926   .debug_str:0000000000000244 .LASF78
     /tmp/ccdoq65R.s:2966   .debug_str:000000000000035f .LASF79
GAS LISTING /tmp/ccdoq65R.s 			page 25


     /tmp/ccdoq65R.s:2940   .debug_str:000000000000029b .LASF81
     /tmp/ccdoq65R.s:2914   .debug_str:00000000000001e3 .LASF83
     /tmp/ccdoq65R.s:3056   .debug_str:00000000000006c3 .LASF109
     /tmp/ccdoq65R.s:3044   .debug_str:000000000000064b .LASF110
     /tmp/ccdoq65R.s:2962   .debug_str:0000000000000350 .LASF84
     /tmp/ccdoq65R.s:3032   .debug_str:0000000000000534 .LASF85
     /tmp/ccdoq65R.s:2982   .debug_str:00000000000003a5 .LASF86
     /tmp/ccdoq65R.s:2906   .debug_str:000000000000019f .LASF87
     /tmp/ccdoq65R.s:3016   .debug_str:00000000000004bd .LASF111
     /tmp/ccdoq65R.s:2938   .debug_str:0000000000000290 .LASF88
     /tmp/ccdoq65R.s:2918   .debug_str:0000000000000214 .LASF89
     /tmp/ccdoq65R.s:2898   .debug_str:0000000000000161 .LASF90
     /tmp/ccdoq65R.s:46     .text:0000000000000020 .LFB37
     /tmp/ccdoq65R.s:584    .text:0000000000000254 .LFE37
     /tmp/ccdoq65R.s:2856   .debug_str:000000000000002a .LASF92
     /tmp/ccdoq65R.s:2631   .debug_loc:0000000000000000 .LLST0
     /tmp/ccdoq65R.s:2832   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccdoq65R.s:2970   .debug_str:0000000000000369 .LASF93
     /tmp/ccdoq65R.s:3002   .debug_str:000000000000045f .LASF94
     /tmp/ccdoq65R.s:2968   .debug_str:0000000000000364 .LASF95
     /tmp/ccdoq65R.s:2682   .debug_loc:00000000000000c7 .LLST4
     /tmp/ccdoq65R.s:245    .text:0000000000000124 .LBB74
     /tmp/ccdoq65R.s:271    .text:0000000000000138 .LBE74
     /tmp/ccdoq65R.s:2705   .debug_loc:0000000000000136 .LLST13
     /tmp/ccdoq65R.s:2720   .debug_loc:0000000000000170 .LLST14
     /tmp/ccdoq65R.s:261    .text:0000000000000134 .LVL10
     /tmp/ccdoq65R.s:333    .text:0000000000000168 .LBB70
     /tmp/ccdoq65R.s:355    .text:0000000000000178 .LBE70
     /tmp/ccdoq65R.s:2727   .debug_loc:0000000000000193 .LLST11
     /tmp/ccdoq65R.s:2734   .debug_loc:00000000000001b6 .LLST12
     /tmp/ccdoq65R.s:347    .text:0000000000000174 .LVL18
     /tmp/ccdoq65R.s:360    .text:000000000000017c .LBB67
     /tmp/ccdoq65R.s:421    .text:00000000000001bc .LBE67
     /tmp/ccdoq65R.s:3028   .debug_str:000000000000051a .LASF96
     /tmp/ccdoq65R.s:2741   .debug_loc:00000000000001d9 .LLST6
     /tmp/ccdoq65R.s:2748   .debug_loc:00000000000001fc .LLST7
     /tmp/ccdoq65R.s:2755   .debug_loc:000000000000021f .LLST8
     /tmp/ccdoq65R.s:2762   .debug_loc:0000000000000242 .LLST9
     /tmp/ccdoq65R.s:2769   .debug_loc:0000000000000265 .LLST10
     /tmp/ccdoq65R.s:405    .text:00000000000001a0 .LVL24
     /tmp/ccdoq65R.s:413    .text:00000000000001b8 .LVL25
     /tmp/ccdoq65R.s:426    .text:00000000000001c0 .LBB66
     /tmp/ccdoq65R.s:452    .text:00000000000001dc .LBE66
     /tmp/ccdoq65R.s:2776   .debug_loc:0000000000000288 .LLST5
     /tmp/ccdoq65R.s:430    .text:00000000000001c8 .LVL27
     /tmp/ccdoq65R.s:117    .text:0000000000000084 .LBB58
     /tmp/ccdoq65R.s:132    .text:0000000000000090 .LBE58
     /tmp/ccdoq65R.s:138    .text:0000000000000098 .LBB60
     /tmp/ccdoq65R.s:153    .text:00000000000000a4 .LBE60
     /tmp/ccdoq65R.s:277    .text:000000000000013c .LBB79
     /tmp/ccdoq65R.s:288    .text:0000000000000140 .LBE79
     /tmp/ccdoq65R.s:2783   .debug_loc:00000000000002ab .LLST15
     /tmp/ccdoq65R.s:293    .text:0000000000000144 .LBB81
     /tmp/ccdoq65R.s:305    .text:0000000000000148 .LBE81
     /tmp/ccdoq65R.s:2790   .debug_loc:00000000000002ce .LLST16
     /tmp/ccdoq65R.s:238    .text:0000000000000120 .LVL6
     /tmp/ccdoq65R.s:498    .text:000000000000020c .LBB48
GAS LISTING /tmp/ccdoq65R.s 			page 26


     /tmp/ccdoq65R.s:578    .text:0000000000000254 .LBE48
     /tmp/ccdoq65R.s:500    .text:000000000000020c .LBB49
     /tmp/ccdoq65R.s:515    .text:0000000000000218 .LBE49
     /tmp/ccdoq65R.s:519    .text:000000000000021c .LBB51
     /tmp/ccdoq65R.s:534    .text:0000000000000228 .LBE51
     /tmp/ccdoq65R.s:549    .text:0000000000000244 .LBB53
     /tmp/ccdoq65R.s:560    .text:0000000000000248 .LBE53
     /tmp/ccdoq65R.s:2797   .debug_loc:00000000000002f1 .LLST3
     /tmp/ccdoq65R.s:565    .text:000000000000024c .LBB55
     /tmp/ccdoq65R.s:577    .text:0000000000000254 .LBE55
     /tmp/ccdoq65R.s:544    .text:0000000000000240 .LVL33
     /tmp/ccdoq65R.s:66     .text:0000000000000040 .LBB38
     /tmp/ccdoq65R.s:83     .text:000000000000004c .LBE38
     /tmp/ccdoq65R.s:461    .text:00000000000001dc .LBB43
     /tmp/ccdoq65R.s:473    .text:00000000000001e4 .LBE43
     /tmp/ccdoq65R.s:2804   .debug_loc:0000000000000314 .LLST1
     /tmp/ccdoq65R.s:487    .text:0000000000000204 .LBB46
     /tmp/ccdoq65R.s:495    .text:0000000000000208 .LBE46
     /tmp/ccdoq65R.s:2812   .debug_loc:0000000000000338 .LLST2
     /tmp/ccdoq65R.s:107    .text:0000000000000080 .LVL1
     /tmp/ccdoq65R.s:10     .text:0000000000000000 .LFB36
     /tmp/ccdoq65R.s:40     .text:0000000000000020 .LFE36
     /tmp/ccdoq65R.s:3062   .debug_str:00000000000006f1 .LASF112
     /tmp/ccdoq65R.s:3070   .debug_str:0000000000000721 .LASF97
     /tmp/ccdoq65R.s:3052   .debug_str:00000000000006a2 .LASF98
     /tmp/ccdoq65R.s:2994   .debug_str:00000000000003fb .LASF99
     /tmp/ccdoq65R.s:3048   .debug_str:0000000000000680 .LASF100
     /tmp/ccdoq65R.s:3058   .debug_str:00000000000006d1 .LASF101
     /tmp/ccdoq65R.s:2886   .debug_str:0000000000000102 .LASF102
     /tmp/ccdoq65R.s:81     .text:000000000000004c .LVL0
     /tmp/ccdoq65R.s:112    .text:0000000000000084 .LVL2
     /tmp/ccdoq65R.s:168    .text:00000000000000b0 .LVL4
     /tmp/ccdoq65R.s:240    .text:0000000000000124 .LVL7
     /tmp/ccdoq65R.s:326    .text:0000000000000168 .LVL16
     /tmp/ccdoq65R.s:357    .text:000000000000017c .LVL19
     /tmp/ccdoq65R.s:423    .text:00000000000001c0 .LVL26
     /tmp/ccdoq65R.s:450    .text:00000000000001dc .LVL28
     /tmp/ccdoq65R.s:477    .text:00000000000001ec .LVL30
     /tmp/ccdoq65R.s:163    .text:00000000000000ac .LVL3
     /tmp/ccdoq65R.s:233    .text:0000000000000114 .LVL5
     /tmp/ccdoq65R.s:253    .text:0000000000000128 .LVL8
     /tmp/ccdoq65R.s:259    .text:000000000000012c .LVL9
     /tmp/ccdoq65R.s:268    .text:0000000000000138 .LVL11
     /tmp/ccdoq65R.s:342    .text:000000000000016c .LVL17
     /tmp/ccdoq65R.s:371    .text:0000000000000180 .LVL20
     /tmp/ccdoq65R.s:377    .text:0000000000000184 .LVL21
     /tmp/ccdoq65R.s:393    .text:0000000000000190 .LVL22
     /tmp/ccdoq65R.s:399    .text:0000000000000194 .LVL23
     /tmp/ccdoq65R.s:276    .text:000000000000013c .LVL12
     /tmp/ccdoq65R.s:285    .text:0000000000000140 .LVL13
     /tmp/ccdoq65R.s:292    .text:0000000000000144 .LVL14
     /tmp/ccdoq65R.s:301    .text:0000000000000148 .LVL15
     /tmp/ccdoq65R.s:548    .text:0000000000000244 .LVL34
     /tmp/ccdoq65R.s:557    .text:0000000000000248 .LVL35
     /tmp/ccdoq65R.s:470    .text:00000000000001e4 .LVL29
     /tmp/ccdoq65R.s:486    .text:0000000000000204 .LVL31
     /tmp/ccdoq65R.s:493    .text:0000000000000208 .LVL32
GAS LISTING /tmp/ccdoq65R.s 			page 27


     /tmp/ccdoq65R.s:593    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccdoq65R.s:115    .text:0000000000000084 .LBB57
     /tmp/ccdoq65R.s:171    .text:00000000000000b4 .LBE57
     /tmp/ccdoq65R.s:175    .text:00000000000000b4 .LBB84
     /tmp/ccdoq65R.s:182    .text:00000000000000bc .LBE84
     /tmp/ccdoq65R.s:186    .text:00000000000000bc .LBB85
     /tmp/ccdoq65R.s:195    .text:00000000000000c4 .LBE85
     /tmp/ccdoq65R.s:199    .text:00000000000000c4 .LBB86
     /tmp/ccdoq65R.s:306    .text:0000000000000148 .LBE86
     /tmp/ccdoq65R.s:330    .text:0000000000000168 .LBB87
     /tmp/ccdoq65R.s:457    .text:00000000000001dc .LBE87

UNDEFINED SYMBOLS
console_handler
_ZN7_thread16timeSliceCounterE
_ZN7_thread8dispatchEv
__mem_alloc
__mem_free
_Z12printIntegerm
_ZN7_thread12createThreadEPPS_PFvvEPvS4_
_ZN7_thread10threadStopEv
_ZN7_thread7runningE
