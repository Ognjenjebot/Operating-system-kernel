GAS LISTING /tmp/ccgVAGo2.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../lib/mem.h"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  12              		.loc 1 12 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 29 is_stmt 0
  28              	# 14 "src/riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
GAS LISTING /tmp/ccgVAGo2.s 			page 2


  46              	.LFB34:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  18:src/riscv.cpp **** {
  47              		.loc 1 18 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FA 		addi	sp,sp,-96
  50              		.cfi_def_cfa_offset 96
  51 0024 233C1104 		sd	ra,88(sp)
  52 0028 23388104 		sd	s0,80(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040106 		addi	s0,sp,96
  56              		.cfi_def_cfa 8, 0
  19:src/riscv.cpp ****     uint64 scause = r_scause();
  57              		.loc 1 19 5
  58              	.LBB32:
  59              	.LBB33:
  60              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
GAS LISTING /tmp/ccgVAGo2.s 			page 3


  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  61              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  62              		.loc 2 92 5
  63              		.loc 2 92 72 is_stmt 0
GAS LISTING /tmp/ccgVAGo2.s 			page 4


  64              	#APP
  65              	# 92 "src/../h/riscv.hpp" 1
  93              	    return scause;
  66              		csrr a5, scause
  67              	# 0 "" 2
  68              	#NO_APP
  69 0034 2334F4FC 		sd	a5,-56(s0)
  70              		.loc 2 93 5 is_stmt 1
  71              		.loc 2 93 12 is_stmt 0
  72 0038 033784FC 		ld	a4,-56(s0)
  73              	.LVL0:
  74              	.LBE33:
  75              	.LBE32:
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  76              		.loc 1 21 5 is_stmt 1
  77              	.LBB34:
  78              		.loc 1 21 40 is_stmt 0
  79 003c 930687FF 		addi	a3,a4,-8
  80              		.loc 1 21 5
  81 0040 93071000 		li	a5,1
  82 0044 63F8D702 		bleu	a3,a5,.L10
  83              	.LBE34:
  22:src/riscv.cpp ****     {
  23:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  24:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  26:src/riscv.cpp ****         uint64  code;
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         if(code == 0x1) {
  30:src/riscv.cpp ****             //MEM_ALLOC
  31:src/riscv.cpp ****             uint64 x;
  32:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
  33:src/riscv.cpp ****             uint64 *r = (uint64 *) __mem_alloc(x);
  34:src/riscv.cpp ****             //povratna vrednost
  35:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
  36:src/riscv.cpp ****         }else{
  37:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
  38:src/riscv.cpp ****             _thread::dispatch();
  39:src/riscv.cpp ****         }
  40:src/riscv.cpp **** 
  41:src/riscv.cpp ****         //promena konteksta
  42:src/riscv.cpp **** //        _thread::timeSliceCounter = 0;
  43:src/riscv.cpp **** //        _thread::dispatch();
  44:src/riscv.cpp ****         w_sstatus(sstatus);
  45:src/riscv.cpp ****         w_sepc(sepc);
  46:src/riscv.cpp ****     }
  47:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  84              		.loc 1 47 10 is_stmt 1
  85              	.LBB65:
  86              	.LBB35:
  87 0048 9307F0FF 		li	a5,-1
  88 004c 9397F703 		slli	a5,a5,63
  89 0050 93871700 		addi	a5,a5,1
  90 0054 630CF708 		beq	a4,a5,.L11
  48:src/riscv.cpp ****     {
GAS LISTING /tmp/ccgVAGo2.s 			page 5


  49:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  50:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  51:src/riscv.cpp ****         _thread::timeSliceCounter++;
  52:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
  53:src/riscv.cpp ****         {
  54:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
  55:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  56:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
  57:src/riscv.cpp ****             _thread::dispatch();
  58:src/riscv.cpp ****             w_sstatus(sstatus);
  59:src/riscv.cpp ****             w_sepc(sepc);
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****     }
  62:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  91              		.loc 1 62 10
  92 0058 9307F0FF 		li	a5,-1
  93 005c 9397F703 		slli	a5,a5,63
  94 0060 93879700 		addi	a5,a5,9
  95 0064 6312F706 		bne	a4,a5,.L3
  63:src/riscv.cpp ****     {
  64:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  65:src/riscv.cpp ****         console_handler();
  96              		.loc 1 65 9
  97              		.loc 1 65 24 is_stmt 0
  98 0068 97000000 		call	console_handler@plt
  98      E7800000 
  99              	.LVL1:
 100              	.LBE35:
 101              	.LBE65:
  66:src/riscv.cpp ****     }
  67:src/riscv.cpp ****     else
  68:src/riscv.cpp ****     {
  69:src/riscv.cpp ****         // unexpected trap cause
  70:src/riscv.cpp ****     }
  71:src/riscv.cpp **** }...
 102              		.loc 1 71 1
 103 0070 6F008005 		j	.L3
 104              	.LVL2:
 105              	.L10:
 106              	.LBB66:
 107              	.LBB51:
  24:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 108              		.loc 1 24 9 is_stmt 1
 109              	.LBB52:
 110              	.LBB53:
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 111              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
GAS LISTING /tmp/ccgVAGo2.s 			page 6


 112              		.loc 2 104 5
 113              		.loc 2 104 64 is_stmt 0
 114              	#APP
 115              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 116              		csrr a5, sepc
 117              	# 0 "" 2
 118              	#NO_APP
 119 0078 233CF4FC 		sd	a5,-40(s0)
 120              		.loc 2 105 5 is_stmt 1
 121              		.loc 2 105 12 is_stmt 0
 122 007c 833784FD 		ld	a5,-40(s0)
 123              	.LBE53:
 124              	.LBE52:
  24:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 125              		.loc 1 24 41
 126 0080 93874700 		addi	a5,a5,4
  24:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 127              		.loc 1 24 43
 128 0084 2334F4FA 		sd	a5,-88(s0)
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 129              		.loc 1 25 9 is_stmt 1
 130              	.LBB54:
 131              	.LBB55:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccgVAGo2.s 			page 7


 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 132              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 133              		.loc 2 172 5
 134              		.loc 2 172 76 is_stmt 0
 135              	#APP
 136              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 137              		csrr a5, sstatus
 138              	# 0 "" 2
 139              	#NO_APP
 140 008c 2338F4FC 		sd	a5,-48(s0)
 141              		.loc 2 173 5 is_stmt 1
 142              		.loc 2 173 12 is_stmt 0
 143 0090 833704FD 		ld	a5,-48(s0)
 144              	.LBE55:
 145              	.LBE54:
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 146              		.loc 1 25 45
 147 0094 2338F4FA 		sd	a5,-80(s0)
  26:src/riscv.cpp ****         uint64  code;
 148              		.loc 1 26 9 is_stmt 1
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
 149              		.loc 1 27 9
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
GAS LISTING /tmp/ccgVAGo2.s 			page 8


 150              		.loc 1 27 52 is_stmt 0
 151              	#APP
 152              	# 27 "src/riscv.cpp" 1
 153              		mv a4, a0
 154              	# 0 "" 2
 155              	.LVL3:
  29:src/riscv.cpp ****         if(code == 0x1) {
 156              		.loc 1 29 9 is_stmt 1
 157              	#NO_APP
 158              	.LBB56:
 159 009c 93071000 		li	a5,1
 160 00a0 630CF702 		beq	a4,a5,.L12
  37:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 161              		.loc 1 37 13
  37:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 162              		.loc 1 37 35 is_stmt 0
 163 00a4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 163      83B70700 
 164 00ac 23B00700 		sd	zero,0(a5)
  38:src/riscv.cpp ****             _thread::dispatch();
 165              		.loc 1 38 13 is_stmt 1
  38:src/riscv.cpp ****             _thread::dispatch();
 166              		.loc 1 38 26 is_stmt 0
 167 00b0 97000000 		call	_ZN3TCB8dispatchEv@plt
 167      E7800000 
 168              	.LVL4:
 169              	.L6:
 170              	.LBE56:
  44:src/riscv.cpp ****         w_sstatus(sstatus);
 171              		.loc 1 44 9 is_stmt 1
  44:src/riscv.cpp ****         w_sstatus(sstatus);
 172              		.loc 1 44 18 is_stmt 0
 173 00b8 833704FB 		ld	a5,-80(s0)
 174              	.LVL5:
 175              	.LBB58:
 176              	.LBB59:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 177              		.loc 2 178 5 is_stmt 1
 178              		.loc 2 178 77 is_stmt 0
 179              	#APP
 180              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 181              		csrw sstatus, a5
 182              	# 0 "" 2
 183              	.LVL6:
 184              	#NO_APP
 185              	.LBE59:
 186              	.LBE58:
  45:src/riscv.cpp ****         w_sepc(sepc);
 187              		.loc 1 45 9 is_stmt 1
  45:src/riscv.cpp ****         w_sepc(sepc);
 188              		.loc 1 45 15 is_stmt 0
 189 00c0 833784FA 		ld	a5,-88(s0)
GAS LISTING /tmp/ccgVAGo2.s 			page 9


 190              	.LVL7:
 191              	.LBB60:
 192              	.LBB61:
 110:src/../h/riscv.hpp **** }
 193              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 194              		.loc 2 110 65 is_stmt 0
 195              	#APP
 196              	# 110 "src/../h/riscv.hpp" 1
 197              		csrw sepc, a5
 198              	# 0 "" 2
 199              	.LVL8:
 200              	#NO_APP
 201              	.L3:
 202              	.LBE61:
 203              	.LBE60:
 204              	.LBE51:
 205              	.LBE66:
 206              		.loc 1 71 1
 207 00c8 83308105 		ld	ra,88(sp)
 208              		.cfi_remember_state
 209              		.cfi_restore 1
 210 00cc 03340105 		ld	s0,80(sp)
 211              		.cfi_restore 8
 212              		.cfi_def_cfa 2, 96
 213 00d0 13010106 		addi	sp,sp,96
 214              		.cfi_def_cfa_offset 0
 215 00d4 67800000 		jr	ra
 216              	.LVL9:
 217              	.L12:
 218              		.cfi_restore_state
 219              	.LBB67:
 220              	.LBB63:
 221              	.LBB62:
 222              	.LBB57:
  31:src/riscv.cpp ****             uint64 x;
 223              		.loc 1 31 13 is_stmt 1
  32:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 224              		.loc 1 32 13
  32:src/riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (x));
 225              		.loc 1 32 53 is_stmt 0
 226              	#APP
 227              	# 32 "src/riscv.cpp" 1
 228              		mv a0, a1
 229              	# 0 "" 2
 230              	.LVL10:
  33:src/riscv.cpp ****             uint64 *r = (uint64 *) __mem_alloc(x);
 231              		.loc 1 33 13 is_stmt 1
  33:src/riscv.cpp ****             uint64 *r = (uint64 *) __mem_alloc(x);
 232              		.loc 1 33 47 is_stmt 0
 233              	#NO_APP
 234 00dc 97000000 		call	__mem_alloc@plt
 234      E7800000 
 235              	.LVL11:
  35:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
 236              		.loc 1 35 13 is_stmt 1
  35:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (r));
GAS LISTING /tmp/ccgVAGo2.s 			page 10


 237              		.loc 1 35 54 is_stmt 0
 238              	#APP
 239              	# 35 "src/riscv.cpp" 1
 240              		mv a0, a0
 241              	# 0 "" 2
 242              	#NO_APP
 243              	.LBE57:
 244 00e8 6FF01FFD 		j	.L6
 245              	.LVL12:
 246              	.L11:
 247              	.LBE62:
 248              	.LBE63:
 249              	.LBB64:
 250              	.LBB36:
  50:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 251              		.loc 1 50 9 is_stmt 1
 252              	.LBB37:
 253              	.LBB38:
 144:src/../h/riscv.hpp **** }
 254              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 255              		.loc 2 144 64 is_stmt 0
 256 00ec 93072000 		li	a5,2
 257              	#APP
 258              	# 144 "src/../h/riscv.hpp" 1
 259              		csrc sip, a5
 260              	# 0 "" 2
 261              	.LVL13:
 262              	#NO_APP
 263              	.LBE38:
 264              	.LBE37:
  51:src/riscv.cpp ****         _thread::timeSliceCounter++;
 265              		.loc 1 51 9 is_stmt 1
  51:src/riscv.cpp ****         _thread::timeSliceCounter++;
 266              		.loc 1 51 30 is_stmt 0
 267 00f4 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 267      03370700 
 268              	.LVL14:
 269 00fc 83370700 		ld	a5,0(a4)
 270 0100 93871700 		addi	a5,a5,1
 271 0104 2330F700 		sd	a5,0(a4)
  52:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 272              		.loc 1 52 9 is_stmt 1
 273              	.LBB39:
  52:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 274              		.loc 1 52 64 is_stmt 0
 275 0108 17070000 		la	a4,_ZN3TCB7runningE
 275      03370700 
 276 0110 03370700 		ld	a4,0(a4)
 277              	.LVL15:
 278              	.LBB40:
 279              	.LBB41:
 280              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccgVAGo2.s 			page 11


   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class _thread
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     _threadread() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 281              		.loc 3 21 35 is_stmt 1
 282              		.loc 3 21 42 is_stmt 0
 283 0114 03370702 		ld	a4,32(a4)
 284              	.LVL16:
 285              	.LBE41:
 286              	.LBE40:
  52:src/riscv.cpp ****         if (_thread::timeSliceCounter >= _thread::running->getTimeSlice())
 287              		.loc 1 52 9
 288 0118 E3E8E7FA 		bltu	a5,a4,.L3
 289              	.LBB42:
  54:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 290              		.loc 1 54 13 is_stmt 1
 291              	.LBB43:
 292              	.LBB44:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 293              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 294              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 295              		.loc 2 104 64 is_stmt 0
 296              	#APP
 297              	# 104 "src/../h/riscv.hpp" 1
 298              		csrr a5, sepc
 299              	# 0 "" 2
 300              	#NO_APP
 301 0120 2334F4FE 		sd	a5,-24(s0)
 105:src/../h/riscv.hpp **** }
 302              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 303              		.loc 2 105 12 is_stmt 0
 304 0124 833784FE 		ld	a5,-24(s0)
 305              	.LBE44:
 306              	.LBE43:
  54:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 307              		.loc 1 54 43
 308 0128 233CF4FA 		sd	a5,-72(s0)
  55:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 309              		.loc 1 55 13 is_stmt 1
 310              	.LBB45:
 311              	.LBB46:
GAS LISTING /tmp/ccgVAGo2.s 			page 12


 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 312              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 313              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 314              		.loc 2 172 76 is_stmt 0
 315              	#APP
 316              	# 172 "src/../h/riscv.hpp" 1
 317              		csrr a5, sstatus
 318              	# 0 "" 2
 319              	#NO_APP
 320 0130 2330F4FE 		sd	a5,-32(s0)
 173:src/../h/riscv.hpp **** }
 321              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 322              		.loc 2 173 12 is_stmt 0
 323 0134 833704FE 		ld	a5,-32(s0)
 324              	.LBE46:
 325              	.LBE45:
  55:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 326              		.loc 1 55 49
 327 0138 2330F4FC 		sd	a5,-64(s0)
  56:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 328              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             _thread::timeSliceCounter = 0;
 329              		.loc 1 56 35 is_stmt 0
 330 013c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 330      83B70700 
 331 0144 23B00700 		sd	zero,0(a5)
  57:src/riscv.cpp ****             _thread::dispatch();
 332              		.loc 1 57 13 is_stmt 1
  57:src/riscv.cpp ****             _thread::dispatch();
 333              		.loc 1 57 26 is_stmt 0
 334 0148 97000000 		call	_ZN3TCB8dispatchEv@plt
 334      E7800000 
 335              	.LVL17:
  58:src/riscv.cpp ****             w_sstatus(sstatus);
 336              		.loc 1 58 13 is_stmt 1
  58:src/riscv.cpp ****             w_sstatus(sstatus);
 337              		.loc 1 58 22 is_stmt 0
 338 0150 833704FC 		ld	a5,-64(s0)
 339              	.LVL18:
 340              	.LBB47:
 341              	.LBB48:
 178:src/../h/riscv.hpp **** }
 342              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 343              		.loc 2 178 77 is_stmt 0
 344              	#APP
 345              	# 178 "src/../h/riscv.hpp" 1
 346              		csrw sstatus, a5
 347              	# 0 "" 2
 348              	.LVL19:
 349              	#NO_APP
 350              	.LBE48:
 351              	.LBE47:
  59:src/riscv.cpp ****             w_sepc(sepc);
GAS LISTING /tmp/ccgVAGo2.s 			page 13


 352              		.loc 1 59 13 is_stmt 1
  59:src/riscv.cpp ****             w_sepc(sepc);
 353              		.loc 1 59 19 is_stmt 0
 354 0158 833784FB 		ld	a5,-72(s0)
 355              	.LVL20:
 356              	.LBB49:
 357              	.LBB50:
 110:src/../h/riscv.hpp **** }
 358              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 359              		.loc 2 110 65 is_stmt 0
 360              	#APP
 361              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 362              		csrw sepc, a5
 363              	# 0 "" 2
 364              		.loc 2 111 1
 365              	#NO_APP
 366 0160 6FF09FF6 		j	.L3
 367              	.LBE50:
 368              	.LBE49:
 369              	.LBE42:
 370              	.LBE39:
 371              	.LBE36:
 372              	.LBE64:
 373              	.LBE67:
 374              		.cfi_endproc
 375              	.LFE34:
 377              	.Letext0:
 378              		.file 4 "src/../h/../lib/hw.h"
 379              		.file 5 "src/../lib/mem.h"
 380              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccgVAGo2.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccgVAGo2.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccgVAGo2.s:13     .text:0000000000000000 .L0 
     /tmp/ccgVAGo2.s:14     .text:0000000000000000 .L0 
     /tmp/ccgVAGo2.s:15     .text:0000000000000004 .L0 
     /tmp/ccgVAGo2.s:17     .text:0000000000000008 .L0 
     /tmp/ccgVAGo2.s:19     .text:000000000000000c .L0 
     /tmp/ccgVAGo2.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccgVAGo2.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccgVAGo2.s:33     .text:0000000000000014 .L0 
     /tmp/ccgVAGo2.s:34     .text:0000000000000018 .L0 
     /tmp/ccgVAGo2.s:35     .text:0000000000000018 .L0 
     /tmp/ccgVAGo2.s:37     .text:000000000000001c .L0 
     /tmp/ccgVAGo2.s:39     .text:0000000000000020 .L0 
     /tmp/ccgVAGo2.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccgVAGo2.s:48     .text:0000000000000020 .L0 
     /tmp/ccgVAGo2.s:49     .text:0000000000000020 .L0 
     /tmp/ccgVAGo2.s:50     .text:0000000000000024 .L0 
     /tmp/ccgVAGo2.s:53     .text:000000000000002c .L0 
     /tmp/ccgVAGo2.s:54     .text:000000000000002c .L0 
     /tmp/ccgVAGo2.s:56     .text:0000000000000030 .L0 
     /tmp/ccgVAGo2.s:61     .text:0000000000000030 .L0 
     /tmp/ccgVAGo2.s:62     .text:0000000000000030 .L0 
     /tmp/ccgVAGo2.s:63     .text:0000000000000030 .L0 
  src/../h/riscv.hpp:92     .text:0000000000000030 .L0 
     /tmp/ccgVAGo2.s:71     .text:0000000000000038 .L0 
     /tmp/ccgVAGo2.s:72     .text:0000000000000038 .L0 
     /tmp/ccgVAGo2.s:78     .text:000000000000003c .L0 
     /tmp/ccgVAGo2.s:79     .text:000000000000003c .L0 
     /tmp/ccgVAGo2.s:81     .text:0000000000000040 .L0 
     /tmp/ccgVAGo2.s:87     .text:0000000000000048 .L0 
     /tmp/ccgVAGo2.s:92     .text:0000000000000058 .L0 
     /tmp/ccgVAGo2.s:97     .text:0000000000000068 .L0 
     /tmp/ccgVAGo2.s:98     .text:0000000000000068 .L0 
     /tmp/ccgVAGo2.s:103    .text:0000000000000070 .L0 
     /tmp/ccgVAGo2.s:111    .text:0000000000000074 .L0 
     /tmp/ccgVAGo2.s:112    .text:0000000000000074 .L0 
     /tmp/ccgVAGo2.s:113    .text:0000000000000074 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000074 .L0 
     /tmp/ccgVAGo2.s:121    .text:000000000000007c .L0 
     /tmp/ccgVAGo2.s:122    .text:000000000000007c .L0 
     /tmp/ccgVAGo2.s:126    .text:0000000000000080 .L0 
     /tmp/ccgVAGo2.s:128    .text:0000000000000084 .L0 
     /tmp/ccgVAGo2.s:132    .text:0000000000000088 .L0 
     /tmp/ccgVAGo2.s:133    .text:0000000000000088 .L0 
     /tmp/ccgVAGo2.s:134    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000088 .L0 
     /tmp/ccgVAGo2.s:142    .text:0000000000000090 .L0 
     /tmp/ccgVAGo2.s:143    .text:0000000000000090 .L0 
     /tmp/ccgVAGo2.s:147    .text:0000000000000094 .L0 
     /tmp/ccgVAGo2.s:149    .text:0000000000000098 .L0 
     /tmp/ccgVAGo2.s:150    .text:0000000000000098 .L0 
       src/riscv.cpp:27     .text:0000000000000098 .L0 
     /tmp/ccgVAGo2.s:159    .text:000000000000009c .L0 
GAS LISTING /tmp/ccgVAGo2.s 			page 15


     /tmp/ccgVAGo2.s:162    .text:00000000000000a4 .L0 
     /tmp/ccgVAGo2.s:163    .text:00000000000000a4 .L0 
     /tmp/ccgVAGo2.s:166    .text:00000000000000b0 .L0 
     /tmp/ccgVAGo2.s:167    .text:00000000000000b0 .L0 
     /tmp/ccgVAGo2.s:172    .text:00000000000000b8 .L0 
     /tmp/ccgVAGo2.s:173    .text:00000000000000b8 .L0 
     /tmp/ccgVAGo2.s:178    .text:00000000000000bc .L0 
  src/../h/riscv.hpp:178    .text:00000000000000bc .L0 
     /tmp/ccgVAGo2.s:188    .text:00000000000000c0 .L0 
     /tmp/ccgVAGo2.s:189    .text:00000000000000c0 .L0 
     /tmp/ccgVAGo2.s:194    .text:00000000000000c4 .L0 
  src/../h/riscv.hpp:110    .text:00000000000000c4 .L0 
     /tmp/ccgVAGo2.s:207    .text:00000000000000c8 .L0 
     /tmp/ccgVAGo2.s:208    .text:00000000000000cc .L0 
     /tmp/ccgVAGo2.s:209    .text:00000000000000cc .L0 
     /tmp/ccgVAGo2.s:211    .text:00000000000000d0 .L0 
     /tmp/ccgVAGo2.s:212    .text:00000000000000d0 .L0 
     /tmp/ccgVAGo2.s:214    .text:00000000000000d4 .L0 
     /tmp/ccgVAGo2.s:218    .text:00000000000000d8 .L0 
     /tmp/ccgVAGo2.s:224    .text:00000000000000d8 .L0 
     /tmp/ccgVAGo2.s:225    .text:00000000000000d8 .L0 
       src/riscv.cpp:32     .text:00000000000000d8 .L0 
     /tmp/ccgVAGo2.s:232    .text:00000000000000dc .L0 
     /tmp/ccgVAGo2.s:234    .text:00000000000000dc .L0 
     /tmp/ccgVAGo2.s:237    .text:00000000000000e4 .L0 
       src/riscv.cpp:35     .text:00000000000000e4 .L0 
     /tmp/ccgVAGo2.s:254    .text:00000000000000ec .L0 
     /tmp/ccgVAGo2.s:255    .text:00000000000000ec .L0 
     /tmp/ccgVAGo2.s:256    .text:00000000000000ec .L0 
     /tmp/ccgVAGo2.s:266    .text:00000000000000f4 .L0 
     /tmp/ccgVAGo2.s:267    .text:00000000000000f4 .L0 
     /tmp/ccgVAGo2.s:274    .text:0000000000000108 .L0 
     /tmp/ccgVAGo2.s:275    .text:0000000000000108 .L0 
     /tmp/ccgVAGo2.s:282    .text:0000000000000114 .L0 
     /tmp/ccgVAGo2.s:283    .text:0000000000000114 .L0 
     /tmp/ccgVAGo2.s:288    .text:0000000000000118 .L0 
     /tmp/ccgVAGo2.s:293    .text:000000000000011c .L0 
     /tmp/ccgVAGo2.s:294    .text:000000000000011c .L0 
     /tmp/ccgVAGo2.s:295    .text:000000000000011c .L0 
  src/../h/riscv.hpp:104    .text:000000000000011c .L0 
     /tmp/ccgVAGo2.s:303    .text:0000000000000124 .L0 
     /tmp/ccgVAGo2.s:304    .text:0000000000000124 .L0 
     /tmp/ccgVAGo2.s:308    .text:0000000000000128 .L0 
     /tmp/ccgVAGo2.s:312    .text:000000000000012c .L0 
     /tmp/ccgVAGo2.s:313    .text:000000000000012c .L0 
     /tmp/ccgVAGo2.s:314    .text:000000000000012c .L0 
  src/../h/riscv.hpp:172    .text:000000000000012c .L0 
     /tmp/ccgVAGo2.s:322    .text:0000000000000134 .L0 
     /tmp/ccgVAGo2.s:323    .text:0000000000000134 .L0 
     /tmp/ccgVAGo2.s:327    .text:0000000000000138 .L0 
     /tmp/ccgVAGo2.s:329    .text:000000000000013c .L0 
     /tmp/ccgVAGo2.s:330    .text:000000000000013c .L0 
     /tmp/ccgVAGo2.s:333    .text:0000000000000148 .L0 
     /tmp/ccgVAGo2.s:334    .text:0000000000000148 .L0 
     /tmp/ccgVAGo2.s:337    .text:0000000000000150 .L0 
     /tmp/ccgVAGo2.s:338    .text:0000000000000150 .L0 
     /tmp/ccgVAGo2.s:343    .text:0000000000000154 .L0 
GAS LISTING /tmp/ccgVAGo2.s 			page 16


  src/../h/riscv.hpp:178    .text:0000000000000154 .L0 
     /tmp/ccgVAGo2.s:353    .text:0000000000000158 .L0 
     /tmp/ccgVAGo2.s:354    .text:0000000000000158 .L0 
     /tmp/ccgVAGo2.s:359    .text:000000000000015c .L0 
  src/../h/riscv.hpp:110    .text:000000000000015c .L0 
     /tmp/ccgVAGo2.s:366    .text:0000000000000160 .L0 
     /tmp/ccgVAGo2.s:374    .text:0000000000000164 .L0 
     /tmp/ccgVAGo2.s:381    .text:0000000000000164 .L0 
     /tmp/ccgVAGo2.s:163    .text:00000000000000a4 .L0 
     /tmp/ccgVAGo2.s:267    .text:00000000000000f4 .L0 
     /tmp/ccgVAGo2.s:275    .text:0000000000000108 .L0 
     /tmp/ccgVAGo2.s:330    .text:000000000000013c .L0 
     /tmp/ccgVAGo2.s:105    .text:0000000000000074 .L10
     /tmp/ccgVAGo2.s:246    .text:00000000000000ec .L11
     /tmp/ccgVAGo2.s:201    .text:00000000000000c8 .L3
     /tmp/ccgVAGo2.s:217    .text:00000000000000d8 .L12
     /tmp/ccgVAGo2.s:169    .text:00000000000000b8 .L6
     /tmp/ccgVAGo2.s:1304   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccgVAGo2.s:2449   .debug_str:00000000000004b7 .LASF90
     /tmp/ccgVAGo2.s:2407   .debug_str:000000000000038d .LASF91
     /tmp/ccgVAGo2.s:2329   .debug_str:0000000000000169 .LASF92
     /tmp/ccgVAGo2.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccgVAGo2.s:377    .text:0000000000000164 .Letext0
     /tmp/ccgVAGo2.s:2275   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccgVAGo2.s:2383   .debug_str:0000000000000316 .LASF0
     /tmp/ccgVAGo2.s:2403   .debug_str:0000000000000367 .LASF1
     /tmp/ccgVAGo2.s:2373   .debug_str:00000000000002cf .LASF2
     /tmp/ccgVAGo2.s:2351   .debug_str:000000000000023a .LASF4
     /tmp/ccgVAGo2.s:2429   .debug_str:0000000000000420 .LASF3
     /tmp/ccgVAGo2.s:2295   .debug_str:000000000000005e .LASF5
     /tmp/ccgVAGo2.s:2405   .debug_str:000000000000037a .LASF6
     /tmp/ccgVAGo2.s:2381   .debug_str:0000000000000303 .LASF7
     /tmp/ccgVAGo2.s:2453   .debug_str:000000000000058a .LASF8
     /tmp/ccgVAGo2.s:2339   .debug_str:00000000000001bf .LASF9
     /tmp/ccgVAGo2.s:2411   .debug_str:00000000000003a6 .LASF10
     /tmp/ccgVAGo2.s:2451   .debug_str:000000000000057b .LASF11
     /tmp/ccgVAGo2.s:2297   .debug_str:0000000000000065 .LASF12
     /tmp/ccgVAGo2.s:2279   .debug_str:0000000000000008 .LASF13
     /tmp/ccgVAGo2.s:2305   .debug_str:00000000000000af .LASF14
     /tmp/ccgVAGo2.s:2423   .debug_str:00000000000003ec .LASF15
     /tmp/ccgVAGo2.s:2309   .debug_str:00000000000000c8 .LASF16
     /tmp/ccgVAGo2.s:2399   .debug_str:0000000000000356 .LASF56
     /tmp/ccgVAGo2.s:2363   .debug_str:0000000000000282 .LASF93
     /tmp/ccgVAGo2.s:2439   .debug_str:000000000000046a .LASF17
     /tmp/ccgVAGo2.s:2397   .debug_str:000000000000034d .LASF18
     /tmp/ccgVAGo2.s:2357   .debug_str:000000000000024f .LASF19
     /tmp/ccgVAGo2.s:2421   .debug_str:00000000000003e1 .LASF52
     /tmp/ccgVAGo2.s:2469   .debug_str:0000000000000605 .LASF54
     /tmp/ccgVAGo2.s:2281   .debug_str:0000000000000018 .LASF20
     /tmp/ccgVAGo2.s:2321   .debug_str:0000000000000128 .LASF22
     /tmp/ccgVAGo2.s:2317   .debug_str:0000000000000117 .LASF24
     /tmp/ccgVAGo2.s:2315   .debug_str:0000000000000102 .LASF26
     /tmp/ccgVAGo2.s:2433   .debug_str:0000000000000443 .LASF21
     /tmp/ccgVAGo2.s:2413   .debug_str:00000000000003b5 .LASF23
     /tmp/ccgVAGo2.s:2447   .debug_str:00000000000004b0 .LASF25
     /tmp/ccgVAGo2.s:2443   .debug_str:000000000000048b .LASF27
     /tmp/ccgVAGo2.s:2333   .debug_str:000000000000019a .LASF28
GAS LISTING /tmp/ccgVAGo2.s 			page 17


     /tmp/ccgVAGo2.s:2311   .debug_str:00000000000000de .LASF29
     /tmp/ccgVAGo2.s:2277   .debug_str:0000000000000000 .LASF30
     /tmp/ccgVAGo2.s:2343   .debug_str:00000000000001e3 .LASF31
     /tmp/ccgVAGo2.s:2293   .debug_str:0000000000000056 .LASF32
     /tmp/ccgVAGo2.s:2299   .debug_str:0000000000000075 .LASF33
     /tmp/ccgVAGo2.s:2473   .debug_str:0000000000000628 .LASF34
     /tmp/ccgVAGo2.s:2323   .debug_str:000000000000013d .LASF35
     /tmp/ccgVAGo2.s:2385   .debug_str:0000000000000323 .LASF36
     /tmp/ccgVAGo2.s:2465   .debug_str:00000000000005ed .LASF37
     /tmp/ccgVAGo2.s:2289   .debug_str:0000000000000036 .LASF38
     /tmp/ccgVAGo2.s:2331   .debug_str:0000000000000187 .LASF39
     /tmp/ccgVAGo2.s:2335   .debug_str:00000000000001a2 .LASF40
     /tmp/ccgVAGo2.s:2445   .debug_str:000000000000049e .LASF41
     /tmp/ccgVAGo2.s:2287   .debug_str:0000000000000030 .LASF42
     /tmp/ccgVAGo2.s:2479   .debug_str:000000000000064c .LASF43
     /tmp/ccgVAGo2.s:2471   .debug_str:000000000000061d .LASF44
     /tmp/ccgVAGo2.s:2427   .debug_str:0000000000000408 .LASF45
     /tmp/ccgVAGo2.s:2401   .debug_str:000000000000035c .LASF46
     /tmp/ccgVAGo2.s:2441   .debug_str:0000000000000473 .LASF47
     /tmp/ccgVAGo2.s:2303   .debug_str:00000000000000a5 .LASF48
     /tmp/ccgVAGo2.s:2347   .debug_str:00000000000001fc .LASF49
     /tmp/ccgVAGo2.s:2377   .debug_str:00000000000002e9 .LASF50
     /tmp/ccgVAGo2.s:2341   .debug_str:00000000000001cd .LASF51
     /tmp/ccgVAGo2.s:2435   .debug_str:000000000000044a .LASF53
     /tmp/ccgVAGo2.s:2301   .debug_str:0000000000000089 .LASF55
     /tmp/ccgVAGo2.s:2457   .debug_str:00000000000005a6 .LASF74
     /tmp/ccgVAGo2.s:2361   .debug_str:0000000000000260 .LASF76
     /tmp/ccgVAGo2.s:2285   .debug_str:0000000000000028 .LASF94
     /tmp/ccgVAGo2.s:2345   .debug_str:00000000000001f7 .LASF57
     /tmp/ccgVAGo2.s:2415   .debug_str:00000000000003c8 .LASF59
     /tmp/ccgVAGo2.s:2409   .debug_str:000000000000039b .LASF61
     /tmp/ccgVAGo2.s:2337   .debug_str:00000000000001a8 .LASF63
     /tmp/ccgVAGo2.s:2375   .debug_str:00000000000002dd .LASF58
     /tmp/ccgVAGo2.s:2475   .debug_str:0000000000000630 .LASF60
     /tmp/ccgVAGo2.s:2369   .debug_str:00000000000002b4 .LASF62
     /tmp/ccgVAGo2.s:2291   .debug_str:000000000000003d .LASF64
     /tmp/ccgVAGo2.s:2307   .debug_str:00000000000000bb .LASF65
     /tmp/ccgVAGo2.s:2367   .debug_str:0000000000000298 .LASF66
     /tmp/ccgVAGo2.s:2419   .debug_str:00000000000003dc .LASF95
     /tmp/ccgVAGo2.s:2425   .debug_str:0000000000000402 .LASF67
     /tmp/ccgVAGo2.s:2379   .debug_str:00000000000002f3 .LASF68
     /tmp/ccgVAGo2.s:2319   .debug_str:0000000000000120 .LASF96
     /tmp/ccgVAGo2.s:2437   .debug_str:0000000000000459 .LASF97
     /tmp/ccgVAGo2.s:2355   .debug_str:000000000000024a .LASF69
     /tmp/ccgVAGo2.s:2389   .debug_str:0000000000000333 .LASF70
     /tmp/ccgVAGo2.s:2359   .debug_str:0000000000000258 .LASF71
     /tmp/ccgVAGo2.s:2395   .debug_str:0000000000000343 .LASF72
     /tmp/ccgVAGo2.s:2353   .debug_str:0000000000000241 .LASF73
     /tmp/ccgVAGo2.s:2371   .debug_str:00000000000002c1 .LASF75
     /tmp/ccgVAGo2.s:2461   .debug_str:00000000000005c9 .LASF77
     /tmp/ccgVAGo2.s:2459   .debug_str:00000000000005bb .LASF98
     /tmp/ccgVAGo2.s:2349   .debug_str:0000000000000212 .LASF99
     /tmp/ccgVAGo2.s:2387   .debug_str:000000000000032a .LASF78
     /tmp/ccgVAGo2.s:2325   .debug_str:0000000000000151 .LASF79
     /tmp/ccgVAGo2.s:2431   .debug_str:0000000000000432 .LASF100
     /tmp/ccgVAGo2.s:2365   .debug_str:000000000000028d .LASF80
     /tmp/ccgVAGo2.s:2463   .debug_str:00000000000005e2 .LASF81
GAS LISTING /tmp/ccgVAGo2.s 			page 18


     /tmp/ccgVAGo2.s:2327   .debug_str:0000000000000164 .LASF82
     /tmp/ccgVAGo2.s:46     .text:0000000000000020 .LFB34
     /tmp/ccgVAGo2.s:375    .text:0000000000000164 .LFE34
     /tmp/ccgVAGo2.s:2283   .debug_str:0000000000000021 .LASF83
     /tmp/ccgVAGo2.s:2160   .debug_loc:0000000000000000 .LLST0
     /tmp/ccgVAGo2.s:2267   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccgVAGo2.s:2393   .debug_str:000000000000033e .LASF84
     /tmp/ccgVAGo2.s:2417   .debug_str:00000000000003d4 .LASF85
     /tmp/ccgVAGo2.s:2391   .debug_str:0000000000000339 .LASF86
     /tmp/ccgVAGo2.s:2193   .debug_loc:0000000000000088 .LLST4
     /tmp/ccgVAGo2.s:222    .text:00000000000000d8 .LBB57
     /tmp/ccgVAGo2.s:243    .text:00000000000000e8 .LBE57
     /tmp/ccgVAGo2.s:2204   .debug_loc:00000000000000be .LLST5
     /tmp/ccgVAGo2.s:2211   .debug_loc:00000000000000e1 .LLST6
     /tmp/ccgVAGo2.s:235    .text:00000000000000e4 .LVL11
     /tmp/ccgVAGo2.s:109    .text:0000000000000074 .LBB52
     /tmp/ccgVAGo2.s:124    .text:0000000000000080 .LBE52
     /tmp/ccgVAGo2.s:130    .text:0000000000000088 .LBB54
     /tmp/ccgVAGo2.s:145    .text:0000000000000094 .LBE54
     /tmp/ccgVAGo2.s:175    .text:00000000000000bc .LBB58
     /tmp/ccgVAGo2.s:186    .text:00000000000000c0 .LBE58
     /tmp/ccgVAGo2.s:2218   .debug_loc:0000000000000104 .LLST7
     /tmp/ccgVAGo2.s:191    .text:00000000000000c4 .LBB60
     /tmp/ccgVAGo2.s:203    .text:00000000000000c8 .LBE60
     /tmp/ccgVAGo2.s:2225   .debug_loc:0000000000000127 .LLST8
     /tmp/ccgVAGo2.s:168    .text:00000000000000b8 .LVL4
     /tmp/ccgVAGo2.s:289    .text:000000000000011c .LBB42
     /tmp/ccgVAGo2.s:369    .text:0000000000000164 .LBE42
     /tmp/ccgVAGo2.s:291    .text:000000000000011c .LBB43
     /tmp/ccgVAGo2.s:306    .text:0000000000000128 .LBE43
     /tmp/ccgVAGo2.s:310    .text:000000000000012c .LBB45
     /tmp/ccgVAGo2.s:325    .text:0000000000000138 .LBE45
     /tmp/ccgVAGo2.s:340    .text:0000000000000154 .LBB47
     /tmp/ccgVAGo2.s:351    .text:0000000000000158 .LBE47
     /tmp/ccgVAGo2.s:2232   .debug_loc:000000000000014a .LLST3
     /tmp/ccgVAGo2.s:356    .text:000000000000015c .LBB49
     /tmp/ccgVAGo2.s:368    .text:0000000000000164 .LBE49
     /tmp/ccgVAGo2.s:335    .text:0000000000000150 .LVL17
     /tmp/ccgVAGo2.s:58     .text:0000000000000030 .LBB32
     /tmp/ccgVAGo2.s:75     .text:000000000000003c .LBE32
     /tmp/ccgVAGo2.s:252    .text:00000000000000ec .LBB37
     /tmp/ccgVAGo2.s:264    .text:00000000000000f4 .LBE37
     /tmp/ccgVAGo2.s:2239   .debug_loc:000000000000016d .LLST1
     /tmp/ccgVAGo2.s:278    .text:0000000000000114 .LBB40
     /tmp/ccgVAGo2.s:286    .text:0000000000000118 .LBE40
     /tmp/ccgVAGo2.s:2247   .debug_loc:0000000000000191 .LLST2
     /tmp/ccgVAGo2.s:99     .text:0000000000000070 .LVL1
     /tmp/ccgVAGo2.s:10     .text:0000000000000000 .LFB33
     /tmp/ccgVAGo2.s:40     .text:0000000000000020 .LFE33
     /tmp/ccgVAGo2.s:2467   .debug_str:0000000000000600 .LASF101
     /tmp/ccgVAGo2.s:2477   .debug_str:0000000000000647 .LASF87
     /tmp/ccgVAGo2.s:2455   .debug_str:000000000000059a .LASF88
     /tmp/ccgVAGo2.s:2313   .debug_str:00000000000000f2 .LASF89
     /tmp/ccgVAGo2.s:73     .text:000000000000003c .LVL0
     /tmp/ccgVAGo2.s:104    .text:0000000000000074 .LVL2
     /tmp/ccgVAGo2.s:155    .text:000000000000009c .LVL3
     /tmp/ccgVAGo2.s:216    .text:00000000000000d8 .LVL9
GAS LISTING /tmp/ccgVAGo2.s 			page 19


     /tmp/ccgVAGo2.s:245    .text:00000000000000ec .LVL12
     /tmp/ccgVAGo2.s:268    .text:00000000000000fc .LVL14
     /tmp/ccgVAGo2.s:230    .text:00000000000000dc .LVL10
     /tmp/ccgVAGo2.s:174    .text:00000000000000bc .LVL5
     /tmp/ccgVAGo2.s:183    .text:00000000000000c0 .LVL6
     /tmp/ccgVAGo2.s:190    .text:00000000000000c4 .LVL7
     /tmp/ccgVAGo2.s:199    .text:00000000000000c8 .LVL8
     /tmp/ccgVAGo2.s:339    .text:0000000000000154 .LVL18
     /tmp/ccgVAGo2.s:348    .text:0000000000000158 .LVL19
     /tmp/ccgVAGo2.s:261    .text:00000000000000f4 .LVL13
     /tmp/ccgVAGo2.s:277    .text:0000000000000114 .LVL15
     /tmp/ccgVAGo2.s:284    .text:0000000000000118 .LVL16
     /tmp/ccgVAGo2.s:382    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccgVAGo2.s:107    .text:0000000000000074 .LBB51
     /tmp/ccgVAGo2.s:204    .text:00000000000000c8 .LBE51
     /tmp/ccgVAGo2.s:220    .text:00000000000000d8 .LBB63
     /tmp/ccgVAGo2.s:248    .text:00000000000000ec .LBE63

UNDEFINED SYMBOLS
console_handler
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
__mem_alloc
_ZN3TCB7runningE
